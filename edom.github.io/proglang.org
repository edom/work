#+TITLE: Designing programming languages
#+DATE: 2018-12-15 01:35 +0700
#+PERMALINK: /proglang.html
#+OPTIONS: ^:nil toc:nil
#+MATHJAX: yes
Disclaimer:
- This will change without notice.
- This may contain mistakes.
- Opinions may change.
#+TOC: headlines 1
* Executive summary
Target audience:
- programming language designers
- programming language implementors

0 in SKI combinator calculus

1 in Haskell / ML / Ocaml / F# / Scheme / JavaScript / untyped lambda-calculus

2 in Idris / Lean / GHC Core / System F / Coq

I suggest that programming language implementors follow these principles:
- Maximum composability and name-clash-freedom
  - The language must clearly separate names and referents.
    Name must not be a property of anything.
    Every language element must be able to exist anonymously.
    Every language element must be able to be referred to by a name.
    Example: JavaScript function vs C function.
  - The module systems must be a combination of JavaScript module system and Ocaml module system.
    Module must be first-class and anonymous.
- Metaprogrammability
  - The language must be homoiconic.
    The language must comfortably model its own syntax.
  - The language must use Curry-style type system (extrinsic typing), not Church-style type system (intrinsic typing).
- Usability
  - Overloading (giving same name several different meanings at the same time)?
  - The language must be lexically scoped.

We have two choices: Fix existing languages, or create a new language.
* (planned) Structure of this article
- philosophical principles and meta-thoughts
- essence of computation
- essence of programming
- philosophical principles of language design
- criteria for a module system free of name clashes
* Literature research
What literature exists for programming language design?

What can programming language researchers learn from the philosophy of language?

Things to summarize:
- 1966 article "The Next 700 Programming Languages" http://www.math.bas.bg/bantchev/place/iswim/next700.pdf
- 1997 article "Scripting: Higher Level Programming for the 21st Century" http://artemisa.unicauca.edu.co/~lgarreta/elenguajes/readings/scripting.pdf
  - "This article is an opinion piece that explains why scripting languages
    will handle many of the programming tasks of the next century better than system programming
    languages."
- Other people's opinions about designing programming languages:
  - http://www.inquisition.ca/en/info/gepsypl/rules.htm
  - 2015 dissertation "Evidence-based programming language design: a philosophical and methodological exploration",
    [[https://jyx.jyu.fi/handle/123456789/47698][abstract]],
    [[https://jyx.jyu.fi/bitstream/handle/123456789/47698/978-951-39-6388-0_vaitos04122015.pdf][pdf]]
    - It's mostly philosophy of what "evidence-based" means.
    - It doesn't design a programming language.
    - It could have been shorter.
  - https://www.reddit.com/r/ProgrammingLanguages/comments/9ep9xq/what_i_did_not_steal_from_perl_6/
    - "What's a character?" https://www.perlmonks.org/?node_id=1214956
  - https://www.reddit.com/r/ProgrammingLanguages/comments/9eqrfy/what_are_the_biggest_problems_with_programming/
  - 2017 article "The End of History? Using a Proof Assistant to Replace Language Design with Library Design" [[https://www.cs.purdue.edu/homes/bendy/Fiat/fiat-snapl.pdf][pdf]]
  - [[http://purduepl.github.io/index.html][Purdue university programming languages group]]
- Shopping for ideas:
  - [[https://www.reddit.com/r/ProgrammingLanguages/comments/8vcrzb/what_are_some_interesting_language_features_that/][What are some interesting language features that may not be well known? : ProgrammingLanguages]]
  - https://softwareengineering.stackexchange.com/questions/55047/what-is-the-greatest-design-flaw-you-have-faced-in-any-programming-language
  - https://www.reddit.com/r/ProgrammingLanguages/comments/9erq87/languages_with_separate_types_for_pointers_to_the/
  - http://math.andrej.com/2009/05/29/mathematically-structured-but-not-necessarily-functional-programming/
  - read, "true sums of products" http://hackage.haskell.org/package/generics-sop
- "The Programming Languages Zoo [...] demonstrates various concepts and techniques used in programming language design and implementation.
  It is a good starting point [...]"
  http://plzoo.andrej.com/

Unanswered questions:
- Is there a homoiconic statically-typed language?
  Does type system hamper homoiconicity?
- Can we make high-level declarative language without garbage collection?

Making a programming language
https://www.reddit.com/r/ProgrammingLanguages/comments/9ky7o6/writing_my_own_programming_language/e72qjll/
banzr: 'Racket is taught in universities to be used to write languages. Use "match" and "cases" to build the parser and interpreter. Good luck!'


2017 "Language Oriented Modularity: From Theory to Practice"
http://programming-journal.org/2017/1/10/

2017 "Classless Object Semantics"
http://researcharchive.vuw.ac.nz/handle/10063/6681
* Philosophical foundations
#+TOC: headlines 2 local
** What is computation, computer, programming, language?
Programming is making a computer do what we want it to do.

Languages are divided into several categories:
- hardware programming, system programming
- enterprise application programming
- scripting? network administration
- markup: XML, Markdown
- data: JSON, YAML

The question:
What is the least-effort way to make a computer do X?
** Who use programming languages?
A programming language serves as a means of communication in three cases:

- human-to-human:
- human-to-machine:
- machine-to-machine:

We advance technologically when we raise the bar for machines (we expect more from machines), not when we expect more from humans.
(?)
** The fundamental reason why there is no perfect language: The pigeonhole principle, encoding length trade-off
If we choose to encode something shorter in a language, then other things must be encoded longer.
If we make it easier to do something, something else has to become harder.

A language is essentially a Huffman code, a compression scheme, where often-used concepts are encoded more shortly than rarely-used concepts.

/Language encodes concept into symbols./

If there are only 26 letters and 1,000 concepts, then, by the pigeonhole principle, it is simply impossible to encode all those concepts using only 1-letter symbols.

The reason why there is no perfect language is simple:
the pigeonhole principle precludes encoding all possible concepts into short words.
** Ontology: what exists in a programming language?
- numbers
- byte strings
- character strings
- maps
- functions
- relations
** Philosophical principles
#+TOC: headlines 2 local
*** Philosophical principle, meta-thought, how to find essence
Everything (every language element) should have as few properties as possible.
If something has as few properties as possible, then what is left is its essence.
Example:
In C, the name of a function is a property of that function.
In JavaScript, the name of a function is not a property of that function.
var add = function(x,y) { return x+y; }

Is the name "x" a property of the variable x in the lambda expression \ x -> x + 1?
We can have nameless parameters with de Bruijn indexes.
*** The essence of description and computation
The essence of description is the composition of primitives.

Computation is the execution of a computing description.

All computations have repetitions.
Turing machine computation is repeated primitive computation.
Lambda-calculus beta-normalization is repeated beta-reduction.

Computation is the normalization of an expression to a value.

A logical axiom corresponds to a computing primitive.

A proof corresponds to a computing description (program).
*** Programming
  :PROPERTIES:
  :CUSTOM_ID: programming
  :END:
**** What is a program?
- A program is represented by
  - a sequence of instructions (procedural programming)
  - a lambda expression (functional programming)
**** Metaprogramming
- JetBrains MPS
- [[http://txl.ca/index.html][TXL: source transformation by example]], what can it do?
- http://www.moserware.com/2008/06/ometa-who-what-when-where-why.html
**** Comparing Ocaml and SML
- [[http://adam.chlipala.net/mlcomp/][Comparing Objective Caml and Standard ML]], Adam Chlipala
  - https://people.mpi-sws.org/~rossberg/sml-vs-ocaml.html
**** Interoperation
- Programming languages don't work with each other very well.
  - What we need is not a new programming language, but a way for languages to work together?
- [[https://mollyrocket.com/casey/stream_0019.html][compression-oriented programming]]
- Lisp family/dialects
  - Scheme
  - [[https://picolisp.com/wiki/?home][PicoLisp]]
- Undigested
  - https://hakonrossebo.github.io/functional-programming-babelfish/
  - https://github.com/rainbyte/haskell-ide-chart
  - http://docs.mamedev.org/techspecs/luaengine.html
- The source code is a textual representation of the abstract syntax tree (AST).
- The source code is unimportant cosmetics.
  We should care about the ASTs and transformations between ASTs.
  We should read, write, and edit ASTs directly, not text.
  The editor should not parse text into AST; it should generate text from AST.
- Language-oriented programming? Data-first programming?
  - Data is the most important thing.
    - Because data is harder to back up than code?
  - Program translates the shape of data.
  - Describe what you want, and write code that follows that description
    to call the lower-level implementation details.
- Programming language design
  - Which should we start with?
    - Semantics (high-level, top-down language design)
    - Machine code (low-level, bottom-up language design)
  - Every enhancement reduces cognitive load.
  - Example of bottom-up language design and how each level reduces cognitive load:
    - Begin with machine code.
    - Provide mnemonics for instructions.
    - Provide the illusion of infinite custom-named registers and orthogonal operands.
    - Provide macros subroutines as extensible instructions.
    - Provide the illusion of infinite custom-named registers and orthogonal operands.
    - Provide macros and subroutines as extensible instructions.
    - Provide named locations.
    - Provide the illusion of infinite memory.
    - Abstract away processor registers.
    - Abstract away pointers.
    - Expression.
    - Infix expression syntax.
    - First-class functions.
    - The program itself is a procedural program that tells the interpreter what code to generate.
    - End up with something like Randall Hyde's High Level Assembly?
- PL research
  - [[https://www.microsoft.com/en-us/research/publication/implementing-functional-languages-a-tutorial/][1992, book, "Implementing functional languages: a tutorial"]]
- Improve an existing language instead of starting new?
- What is this? http://reasonablypolymorphic.com/blog/elm-is-wrong
**** Interesting languages?
***** Rebol? Rebol metaprogramming?
https://en.m.wikipedia.org/wiki/REBOL
***** Carp lisp dialect?
**** Scheme vs Lisp:
- A Lisp implementation doesn't have to have proper tail calls.
- A Scheme implementation must have proper tail calls.
**** Type systems
- Types help computers help us.
  - Types prevent some mistakes.
  - Types are part of documentation.
    - Types help us write an IDE.
** A lambda abstraction is not a function
A mathematical function is a triple \((A,B,F)\) where \(A\) is the domain, \(B\) is the codomain, and \(F \subseteq A \times B\) is the mapping.

A lambda abstraction \( \lambda x. y \) is not the /same/ as a function \( x \mapsto y \).

The expression 1 + 2 is not the /same/ as the number 3.
That expression /evaluates/ to that number.
** The philosophical foundation of object-orientation?
Identity?

Properties?

What does "X is a Y" mean?

What does "Every X is a Y" mean?

First-order logical meaning of object-oriented definitions?
#+BEGIN_EXAMPLE
Car my_car = new Car(); // my_car is a Car.
class What extends Car {} // Every What is a Car.
#+END_EXAMPLE

\begin{align*}
Car(my\_car)
\\
\forall x : What(x) \to Car(x)
\end{align*}
* Effects and side-effects
What is an "effect"?

What is a "side-effect"?

Does "side-" imply undesirability?

Isn't memory allocation an effect?
* Total separation between names and referents
#+TOC: headlines 2 local
** Example with functions
Consider this example:
#+BEGIN_EXAMPLE
// C
double add1 (double x) { return x + 1; }

// JavaScript
var add1 = function (x) { return x + 1; };
#+END_EXAMPLE
In C, the name "add1" is a property of the function.
In JavaScript, "add1" is not a property of the function, but "add1" is a name that we use to refer to the function.

An analogous example:
"Erik" is not a property of me.
"Erik" is the name that people use to refer to me in a local scope (inside a room where I am the only person with that name).
My existence does not depend on the name people use to refer to me.
This is contrary to C that requires every function to decide its own name.

This separation between names and referents enhances composability.
In programming parlance, when we say "everything should be first-class",
we mean this total separation between names and referents.

A function must not decide its own name.
The caller of that function picks a name that it uses to refer to that function.
The same goes for modules and every other language element that can be named.
** Example with modules
The key message:
- A thing (function, module, etc.) should not decide its own name.
- The implementation must be able to load a file into an anonymous module.
- The implementation must load the same file at most once.

If you satisfy those constraints, it will be simple to resolve name clashes in your language.

To avoid name clash, your module system must satisfy these:
- The user of a module, not the module itself, decides what to call that module.
  A module must not name itself.
  A module does not have a name.
  A name is not a property of a module.
  A name is something that the user of that module uses to refer to that module.
- A module can contain other modules.

As far as I know,
the only languages with satisfactory module systems are JavaScript and TypeScript.
Ocaml's anonymous modules and local imports are more satisfactory than JavaScript modules,
but Ocaml as a whole is unsatisfactory because Ocaml infers module names from file names.

Most programming languages are unsatisfactory.
A thing should not decide its own name.
#+BEGIN_EXAMPLE
// Java
package foo;      // Unsatisfactory: package foo decides its own name
class Cls {
}

-- Haskell
module Foo where  -- Unsatisfactory: module Foo decides its own name
data Bar = Baz

## Ruby
module Foo        ## Unsatisfactory: module Foo decides its own name
  class Bar
  end
end

// C++
namespace foo {   // Unsatisfactory: namespace foo decides its own name
}
#+END_EXAMPLE

The implementation must be able to /load a file into an anonymous module/:
#+BEGIN_SRC javascript
// JavaScript module system is satisfactory:
// foo.js contains a module, but it does not decide its own name;
// the user of foo.js decides that
// my_module is the local name it uses to refer to the module.
var my_module = require("foo.js");
#+END_SRC

The implementation must /load the same file at most once/.
(Two files are the same iff their paths resolve to the same canonical path.)
In this example, the contents of "foo.js" should be parsed exactly once.
#+BEGIN_SRC javascript
// JavaScript
var foo1 = require("foo.js");
var foo2 = require("foo.js");
// foo2 should refer to the same thing that foo1 refers to
#+END_SRC

A language used by millions of programmers must separate names and referents to avoid naming conflicts.
** Philosophical investigation
Designing anything good:
Name is not a property of anything.
Name is a linguistic artifact that we use to refer to something.
A function does not have a name.
A predicate does not have a name.

A language must clearly separate names and referents (the things that the names refer to).

If Prolog is to have anonymous predicates, then it works with second-order logic, no longer with first-order logic.

The job of a module is to disambiguate names.
Example: which "member/2" do we mean?
* Catching mistakes; checking; proving; reasoning; type systems
** Curry-style extrinsic typing instead of Church-style intrinsic typing
Types help, but they are not the essence.
Types are a means of writing better programs, not an end to be achieved for its own sake.
Type should not be a property of an expression.
Prefer Curry-style (domain-free) type system to Church-style (domainful) type system.

"Domain-Free Pure Type Systems"
https://pdfs.semanticscholar.org/e638/74519839d4f2baf27f95078fc50ed0540fed.pdf

But, if we don't have types, how do we resolve overloading?
We can't resolve overloading without context.
The only context we have is what variable has what type.

For example, this is an example essence of a business logic:
#+BEGIN_EXAMPLE
discount_percent P = 0
  + (if old P then 10 else 0)
  + (if student P then 10 else 0)
  + (if pregnant P then 10 else 0)
#+END_EXAMPLE

The meaning is as in mathematics: all numbers are real numbers.
Realization then produces a restricted subset of that description that works for all numbers whose magnitude is smaller than 2^63.
A program is a restricted (realized, finitized) mathematical description.
Example:
The mathematical description f x = x + 1 works with all real numbers.
The program works with all natural numbers from 0 to 2^64-1.
The realization of a mathematical function (A,B,F) is simply a finite subset of it: (A',B',F'), where A', B', and F' are finite.
Even if you use arbitrary-precision arithmetic, you are still limited to the memory of the machine. For example, if the machine only has 1000 bytes of memory, then it can only realize number smaller than 2^(1000 * 8).

Ocaml has first-class modules, but can it import a file into a module?
https://v1.realworldocaml.org/v1/en/html/first-class-modules.html

What JavaScript does right:
- a module is a plain JavaScript object
- it is possible import a file into a module referred by a local variable
What Ocaml does right:
- local import

Ocaml design mistake: Tying module name to file name.
"Source files in OCaml are tied into the module system, with each file compiling down into a module whose name is derived from the name of the file."
https://v1.realworldocaml.org/v1/en/html/files-modules-and-programs.html
** What is a type? Understanding what a type is from how it is used
Mathematically, A type is a set whose membership is syntactically decidable.

Engineeringly, A type gives meaning to bit patterns.

A type encodes meaning into bit patterns.
    - For example, consider the bit pattern 11111111.
        - It means -1 as an int8.
        - It means 127 as an uint8.
    - Types help translate programs.

Type system helps machines help us.
We shouldn't focus on type systems.
We should focus on logic.
We should focus on making machines help us.
The question is not how to make a good type system.
The question is how to offload the job as much as possible from humans to machines.

A programming language is a formal system.
A type system is a formal system.
Therefore a type system is a formal system embedded in a bigger formal system that is a programming language.

Programming languages have semantics, even if it is implicit.

A type defines the memory layout (bit pattern) of its values.

A type constrains values and expressions.

A type determines what values a function can take/give.

There are also other uses of types.

The question is: What is a type?
What principles should we follow when we design a language?

- https://news.ycombinator.com/item?id=8045115
    - [[https://existentialtype.wordpress.com/2011/03/19/dynamic-languages-are-static-languages/][Dynamic Languages are Static Languages | Existential Type]]
** Church types and Curry types
- https://lispcast.com/church-vs-curry-types/
- [[https://www.reddit.com/r/programming/comments/2cavea/church_vs_curry_types_two_conflicting_perspectives/][Church vs Curry Types -- Two conflicting perspectives : programming]]
** Row polymorphism
Why is it called row polymorphism?
Where is the row?
See "Objects and Aspects: Row Polymorphism", Neel Krishnaswami [[https://www.cs.cmu.edu/~neelk/rows.pdf][pdf]]

In the following, the function =set_name_r=  is row-polymorphic.
The function =set_name_n= is not row-polymorphic.
#+BEGIN_EXAMPLE
type Person = { name : String; age : Int; };
type Company = { name : String; location : String; };

set_name_r : String -> {name:String; r;} -> {name:String; r;};
set_name_r new_name {name=n; r;} = {name=new_name; r;};

set_name_n : String -> {name:String;} -> {name:String;};
set_name_n new_name {name=n;} = {name=new_name;};

john : Person;
john = { name="John"; age = 20; }

joe : Person;
joe = set_name_r "Joe" john;

not_person : {name:String};
not_person = set_name_n "What" john;

abc = { name="ABC"; location="1 ABC Way"; };
def = set_name_r "DEF" abc;
#+END_EXAMPLE
Without row polymorphism, we would have to write set_name twice: once for each type.
*** Row polymorphism vs subtyping
https://cs.stackexchange.com/questions/53998/what-are-the-major-differences-between-row-polymorphism-and-subtyping
*** Row polymorphism vs structural subtyping
https://news.ycombinator.com/item?id=13047934
** what

- Liquid Haskell https://ucsd-progsys.github.io/liquidhaskell-blog/
- [[https://brianmckenna.org/blog/row_polymorphism_isnt_subtyping][Row Polymorphism Isn't Subtyping - BAM Weblog]]
- recursive types http://ecee.colorado.edu/~siek/ecen5013/spring10/lecture15.pdf
- http://tomasp.net/coeffects/
- 2008, article, "Church and Curry: Combining Intrinsic and Extrinsic Typing", Frank Pfenning https://www.cs.cmu.edu/~fp/papers/andrews08.pdf
- From Wadler home page
  - [[http://groups.inf.ed.ac.uk/abcd/][From Data Types to Session Types: A Basis for Concurrency and Distribution]]
- [[https://www.reddit.com/r/dependent_types/comments/8qig0u/vectors_are_records_too_pdf/][Vectors are records, too (pdf) : dependent_types]]
- https://wiki.haskell.org/Untypechecking is "converting from a type to a term".
- NOOL 2016 article "Static Typing Without Static Types — Typing Inheritance from the Bottom Up" [[http://www.it.uu.se/workshop/nool16/nool16-paper4.pdf][pdf]]
- https://en.wikipedia.org/wiki/Literate_programming

** Parametricity
- Every recursive type can be written as `mu a. F a` where F is the associated free functor?
    - Example: `List a = Fix (F a)` where `F a b = 1 + a * b`.
    - `Fix F = F (Fix F)` is the least fixed point of F.
- Why should we care about parametricity?
    - [[https://bartoszmilewski.com/2014/09/22/parametricity-money-for-nothing-and-theorems-for-free/][Parametricity: Money for Nothing and Theorems for Free - Bartosz Milewski's Programming Cafe]]
** Subtyping
A subtyping relation is an ordering of types.

So what? That is technically correct but that doesn't give any insights.

A subtype is an ordering that follows the Liskov substitution principle?

** Type-checking
- Every type checking algorithm is unification (logic programming).
    - If the programmer annotates a term, use that annotation.
    - If the a term is not annotated, annotate that term with a freshly generated variable.
    - Unify everything according to the typing rules.
    - See Algorithm W in [[https://en.wikipedia.org/wiki/Hindley%E2%80%93Milner_type_system][WP:Hindley–Milner type system]].
** Algebraic subtyping?
- subtyping
    - algebraic subtyping
        - 2016, PhD thesis, "Algebraic subtyping", Stephen Dolan https://www.cl.cam.ac.uk/~sd601/thesis.pdf
        - "Polymorphism, subtyping and type inference in MLsub" http://www.cl.cam.ac.uk/~sd601/papers/mlsub-preprint.pdf
            - from http://lambda-the-ultimate.org/node/5393
                    - from https://contributors.scala-lang.org/t/algebraic-subtyping/577
- http://www.cl.cam.ac.uk/~sd601/papers/mlsub-preprint.pdf
- https://www.cl.cam.ac.uk/~sd601/thesis.pdf
- https://cs.stackexchange.com/questions/53998/what-are-the-major-differences-between-row-polymorphism-and-subtyping
- https://www.cl.cam.ac.uk/teaching/1415/L28/rows.pdf
- 2017, "Introduction to homotopy type theory", http://www.cs.nott.ac.uk/~psztxa/ss-types-17/notes-summer17.pdf
- http://www.cs.nott.ac.uk/~psztxa/ss-types-17/
- https://homotopytypetheory.org/book/
- https://en.wikipedia.org/wiki/Subtyping
- https://en.wikipedia.org/wiki/Circle-ellipse_problem
- What does "X is a Y" mean?
It means P(X) => P(Y) for every predicate P.
Liskov substitution principle.
Does it mean "X is a subclass of Y" or "X is an instance of Y"?
* Module systems
#+TOC: headlines 2 local
** What
REBOL module system?

Bad example: java:
- name is a property of a method.
- a method cannot be referred to by a name.
If you use reflection, you are referring to a representation of that method, not the method itself.

Bad example: scheme: map, vector-map, tree-map, etc.

Racket vs prolog
Racket has racklog and miniKanren

(infix
  x = 1 :
  y = x + x :
)

Racket DCG, packrat
** from module.md (Designing module systems)
What is a module?
Or, should we be asking these questions instead?

- How do we decompose a program? (I think David Parnas has answered this.)
- Why do we need modules?
- How do we organize programs?

Modules reduce complexity by partitioning and independence.
See [[http://www.computing.dcu.ie/~renaat/ca2/ca214/ca214vii.html][Three Universal methods of reducing complexity]]
from the course [[http://www.computing.dcu.ie/~renaat/ca2/ca214over.html][CA214 Systems Analysis and Design Page]].

What do others say?

- [[https://en.wikipedia.org/wiki/Module][Wikipedia]]
- According to [[https://en.wiktionary.org/wiki/module][Wiktionary]]:

  - The word "module" is from Latin "modulus" that means "a small measure".
  - A module is "a self-contained component of a system, often interchangeable, which has a well-defined interface to the other components".

- [[https://www.dictionary.com/browse/module][dictionary.com]]

What do we infer?

- We can develop different modules at the same time.

*** Philosophical investigation
   :PROPERTIES:
   :CUSTOM_ID: philosophical-investigation
   :END:

- What are the properties of a module?
- What are its relationships with other things?

  - interchangeability

- A module groups things.

  - Is this essential or accidental?
    Is it made for grouping?
    Is grouping only a side-effect?

- What can we do with modules?

  - We can combine modules.
  - We can shadow modules.
  - We can link modules.
  - We can embed/inline modules.

- A module is an incomplete/dependent piece of functionality/code.

  - A module may have unresolved symbols?

- A module is a decomposition of a program?
- Module is about reusability?
- A program is a module and a starting point.
- A module specifies a contract.
  A module can be swapped with another module that satisfies the same contract without changing the correctness of the program.
- A module is a bunch of imports and exports?
- A module is smallest unit of reuse? Isn't that function?
- A module is smallest unit of compilation? Isn't that function?

*** Modules are for humans
   :PROPERTIES:
   :CUSTOM_ID: modules-are-for-humans
   :END:

Computers don't need modules.
All it needs is a sequence of machine codes.

A program is a lambda expression.
A big program is a big lambda expression.
Given enough memory, a computer can handle arbitrarily big lambda expressions.

Human uses modules for organizing things.
Human uses modules to make machines separate compilation, speed up recompilation, and recompile a part of the program.

- Does a module have to coincide with a compilation unit?
- Basic module functions?

  - How does a code describe its dependencies?
  - How does the machine disambiguate names?
  - Functions should be versioned. Not module. Not package.
    Version describes semantics.

Module is second-order logic programming?
Note below, that the same =Plus= is used as both a variable and a predicate.

#+BEGIN_EXAMPLE
    export(module_name, type, name, value).

    export(prelude, int, plus, Plus) |- export(my_module, int, three, Plus(1, 2)).
#+END_EXAMPLE

- The smallest unit for this discussion is a machine instruction.
- A subroutine is a collection of instructions.
- A library is a collection of subroutines.
- A program is a collection of libraries and an entry point.
- History

  - The initial motivation was to reuse.

    - Reduce development cost.

      - Humans have always been looking for easier ways to live.
        This "laziness" (the ability to get bored repeating something) is the source of all human technology.

  - The next motivation was to reduce disk and memory usage.

- The essence of programming-in-the-large is Don't Repeat Yourself?

*** Comparing existing module systems
   :PROPERTIES:
   :CUSTOM_ID: comparing-existing-module-systems
   :END:

How do programming languages deal with modules?

- [[https://github.com/dhall-lang/dhall-lang/issues/182][dhall modules · Issue #182 · dhall-lang/dhall-lang]]
- [[https://futhark-lang.org/blog/2017-01-25-futhark-module-system.html][Futhark]]
- [[https://elixir-lang.org/getting-started/modules-and-functions.html][Elixir]]

  - [[https://hexdocs.pm/elixir/Module.html][Module -- Elixir v1.7.2]]

- Racket

  - 2011, article, "Languages as Libraries", [[http://www.cs.utah.edu/plt/publications/pldi11-tscff.pdf][pdf]]

- Scheme R7RS, Common Lisp, Clojure
- Java, Scala, Kotlin, Go, C, C++

  - C ABI

    - A module is an ELF shared object file (SO file).

- Pascal, Ada, Oberon, Algol, Fortran
- JavaScript, TypeScript, ECMAScript
- Standard ML, Caml, OCaml, MLTON, SML/NJ, F#

  - 2000, "A modular module system", [[https://hal.inria.fr/hal-01499946/document][pdf]]

    - "Harper-Lillibridge-Leroy module system"
    - "applicability of that module system to a wide range of programming languages"

- Haskell has underpowered module system.
- book, "Advanced topics in types and programming languages", part IV, programming in the large, [[http://camlunity.ru/swap/Functional%20Programming/Type%20Systems/Pierce/Advanced%20Topics%20in%20Types%20and%20Programming%20Languages.pdf][pdf]]

  - book, "Types and programming languages", [[https://www.asc.ohio-state.edu/pollard.4/type/books/pierce-tpl.pdf][pdf]]

- [[https://en.wikipedia.org/wiki/Modular_programming][WP:Modular programming]]

*** Key idea: Module = Dictionary -> Dictionary
   :PROPERTIES:
   :CUSTOM_ID: key-idea-module-dictionary---dictionary
   :END:

Assume a dependently-typed language.

Recall some terminologies:

- A record is a tuple whose components are named.
- A dictionary is also known as key-value map or look-up table.

Then a module is a lambda abstraction that takes a record and gives a record.

A module is a lambda abstraction.

This idea is similar to Nix and JavaScript modules.

=type Module = Map Name Decl -> Map Name Decl=

A module translates into a lambda-calculus expression.
An import translates to an entry in the input dictionary.
An export translates to an entry in the output dictionary.
Example:

#+BEGIN_EXAMPLE
    module {
        import add mul Int32;
        export f g T;
        f = add;
        g = mul;
        T = Int32;
    };

    -- The expression above translates to:

    \ {add; mul; Int32; ...} -> {
        f = add;
        g = mul;
        T = Int32;
    };
#+END_EXAMPLE

- Key ideas of that example:

  - Dictionary pattern matching simulates row polymorphism.
  - ={a;b;c;}= is shorthand for ={a:a; b:b; c:c;}=.
  - [[https://blog.robphoenix.com/elixir/notes-on-elixir-pattern-matching-maps/][Notes on Elixir: Pattern-Matching Maps · Rob Phoenix]]

What we are doing here is also known as "blurring the phase distinction".
See [[https://futhark-lang.org/blog/2017-01-25-futhark-module-system.html#modules-versus-higher-order-functions]["Modules versus Higher-Order Functions" in Futhark blog post]]:
"A module can be viewed as nothing but a record containing types and values."

A problem: compilation may fail to terminate.
No big deal.
Set a time-out.

*** what
   :PROPERTIES:
   :CUSTOM_ID: what
   :END:

- Hypothesis: Lazy evaluation solves the partial query problem elegantly.
- What are some cool ideas?

  - Dhall can import from IPFS.

    - http://www.haskellforall.com/2016/12/dhall-non-turing-complete-configuration.html

  - Elixir can pattern-match maps (dictionaries).

- What is a module in an untyped functional programming language such as Tulip?
- Finding a programming language for programming in the large

  - Ecosystem, libraries, tools, and communities.
  - The most important thing in programming in the large is name management.
    Namespaces.

    - C has two namespaces: type namespace and value namespace.
    - Haskell has two namespaces: type namespace and value namespace.
    - Java has better namespacing than C.
    - Enable the same name to be used in different context, so that you can write =get_name employee= and =get_name company= instead of =employee_get_name employee= or =company_get_name company=.

      - Ad-hoc polymorphism.

  - Which one has the biggest community?
  - Which one has a decent IDE?
  - Which community puts their money on where their mouth is?
  - Comparing type systems

    - [[https://docs.racket-lang.org/ts-guide/][The Typed Racket Guide]]
    - F#
    - SML
    - Caml
    - OCaml
    - Idris, Agda
    - Coq, Lean
    - Haskell
    - 2004, chapter, "Type systems", Luca Cardelli, [[http://lucacardelli.name/Papers/TypeSystems.pdf][pdf]]

      - from https://www.artima.com/forums/flat.jsp?forum=106&thread=185420
      - 2005, book, "Advanced topics in types and programming languages", Benjamin C. Pierce (editor)

        - Part IV, "Types for Programming in the Large"

      - 2002, book, "Types and programming languages", Benjamin C. Pierce

    - Java, Kotlin, Scala
    - Things that annoy me

      - ML, SML, Caml, OCaml: ='a tf= is somewhat annoying. It should have been =tf a=.

        - F# uses =tf<'a>=.
        - Haskell uses =Tf a=.

      - Would you rather type ='a list= (F#) or deal with an inadequate record/module system (Haskell)?
      - Haskell doesn't have =instance Read (->)= and =instance Show (->)=.

        - Haskell expressions are not first-class citizen in the language.

          - Unlike Lisp/Scheme.

        - Encumbers metaprogramming.

    - OCaml labels and polymorphic variants?

      - http://caml.inria.fr/pub/docs/manual-ocaml-400/manual006.html
      - OCaml labels are somewhat similar to Scheme keyword arguments.

    - F# quotations is important for metaprogramming.
    - F# doesn't do ad-hoc polymorphism well?

      - [[https://withouttheloop.com/articles/2014-10-21-fsharp-adhoc-polymorphism/][Ad-hoc Polymorphism in F# (how to survive without Type Classes) - Without the loop]]
      - [[https://sidburn.github.io/blog/2016/03/24/higher-kinded-polymorphism][Higher-kinded Polymorphism: What is it, why you want it · David Raab]]

    - https://cstheory.stackexchange.com/questions/40705/why-did-caml-become-ocaml-or-why-use-objects-in-f
    - ML begat Caml. Caml begat Caml Light? Caml Light begat OCaml?
    - [[https://www.quora.com/How-does-F-compare-to-OCaml-in-regard-to-major-syntactic-differences-paradigm-shifts-and-interoperability-with-Windows-What-about-its-numeric-capabilities][How does F# compare to OCaml, in regard to major syntactic differences, paradigm shifts, and interoperability with Windows? What about its numeric capabilities? - Quora]]

      - Jon Harrop claims. More sources needed. Take it with a grain of salt.

        - "OCaml has an integrated full-blown macro system in the form of Camlp4 whereas F# does not have macros and, in fact, has been deliberately closed off in order to discourage people from creating products that compete with Visual Studio."

          - "deliberately closed off [...]" is a bold claim.

  - [[https://softwareengineering.stackexchange.com/questions/155239/are-all-languages-basically-the-same/155243][Are all languages basically the same? - Software Engineering Stack Exchange]]

- package/dependency management tools

  - Java: Maven, Gradle
  - OCaml: OPAM
  - Haskell: Cabal, Stack
  - F#: Paket? NuGet?
  - C/C++: conan? chocolate? vcpkg?

- Formally adding modules to lambda calculus

  - What is module calculus?

    - 2017 article "Modules, Abstraction, and Parametric Polymorphism" [[https://www.cs.cmu.edu/~crary/papers/2017/mapp.pdf][pdf]]
    - 2003 article "A Type System for Higher-Order Modules" [[http://www.cs.cmu.edu/~rwh/papers/thoms/tr2.pdf][pdf]]
    - 2001 article "A Calculus of Module Systems" [[http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.22.5407][pdf available]]
    - 2012 course notes "Types for Module Systems" [[http://www.ccs.neu.edu/home/amal/course/7480-s12/modules-notes.pdf][pdf]]
      from [[http://www.ccs.neu.edu/home/amal/course/7480-s12/][CS7480 Type Systems (Spring 2012)]]

- Ignored undocumented code sketches

  - [[https://github.com/jordanlewis/simple-module-system][jordanlewis/simple-module-system: Adding modules to a polymorphic lambda calculus]], code in SML/NJ.
* Strings, especially of characters
Why do we have strings?

Computer keyboards evolved from typewriters.

Computerization of human writing?

First came Gutenberg's printing press.
Each letter is imprinted by a type.

The problem is to encode human text in bits.
We solved the problem of encoding numbers with two's-complement signed integers.
English text is simple: ASCII.

An accented letter is a letter and an accent.

A /string/ is a homogenous sequence.

A string has a beginning, and may have an ending.
A string may be finite.

A /byte string/ is a sequence of bytes.

An /ASCII string/ is a byte string.

A /character string/ is a sequence of characters.

Unqualified "string" usually means "character string".

A /character string literal/ is surrounded with quotes.

- inconclusive discussion https://www.reddit.com/r/ProgrammingLanguages/comments/9tj6ka/how_would_you_best_implement_first_class_strings/
** Escape sequences
** Characters
What is Unicode's definition of "character"?
Is that definition sane?

Should Unicode normalization/canonicalization be built into the programming language?

Issues: ordering/collation, capitalization, combination, halfwidthization, ligature, etc.

- https://en.wikipedia.org/wiki/String_(computer_science)
- https://en.wikipedia.org/wiki/Character_(computing)
* Dictionary, map, associative array, record, finite function, hash table
** Clojure maps are applicable like functions.
A very interesting fundamental idea.

#+BEGIN_SRC lisp
({:a 1 :b 2 :c 3} :a)
=> 1
({:a 1 :b 2 :c 3} :b)
=> 2
#+END_SRC

Clojure has nice map syntax: =(m k)= for accessing k.

Maps are isomorphic to functions.
We update a map.
Updating a function is simple:
#+BEGIN_SRC haskell
update nk nv f = \ k -> if k == nk then nv else f k
-- and then beta-normalize the lambda body
#+END_SRC

A Prolog deterministic binary predicate is like a Clojure map.
* The human aspect
** Science (evolution and neuroscience) explains why people stick to shitty-but-predictable languages
The brain reward system rewards correct predictions.
If person P finds language L predictable (according to P's background knowledge), then P will like L.
Procedural languages are predictable.
Thus people stick to them, no matter how shitty those languages are.
People prefer predictable shitty things to unpredictable great things.
People are risk-averse.

Curiosity of finding a better way to program is the exception; the norm is "we have always done it this way".

We can dumb down the language, or we can smart up the people, but people are naturally lazy, because laziness promotes survival.

"David Liddle's idea on application user interfaces give us a clue as to why lower-level languages draw more people in than higher-level ones (Liddle, 1989).
He claims that the most important aspect of a good user interface is how well it leads the user to an accurate conceptual model of how the application works.
If the user develops an accurate conceptual model, then the application works as expected.
This leads the user to try more things, which also work as expected, leading to an even better understanding, thus drawing the user further and further into the tool."
https://www.amzi.com/articles/prolog_under_the_hood.htm
* Designing the programming language
#+TOC: headlines 2 local
** Prolog
Prolog without assert?
https://www.mercurylang.org/information/doc-latest/mercury_trans_guide/AssertRetract.html

Translate

nat(z).
nat(s(X)) :- nat(X).

suc(X, s(X)).

- https://stackoverflow.com/questions/20511060/parsing-an-expression-in-prolog-and-returning-an-abstract-syntax
  - "you did something quite smart [...] That is fine. However, this strategy is inherently very inefficient"
  - "There is a general way how to fix this: Add another pair of arguments to encode the length."

1988, Towards functional programming in Prolog
ftp://obaluae.inf.puc-rio.br/pub/docs/Publications/88_AI_Furtado_SINPLAN.Not.pdf
It defines several infix operators.
"[...] The problem of evaluating expressions combining functions and predicates
is investigated. Examples are provided to illustrate the discussion. The paper includes a prototype implementation."

2.7.1 "Axiomatizing Context-Free Grammars"
http://www.mtome.com/Publications/PNLA/prolog-digital.pdf
See third paragraph: "the general statement made by the context-free rule [...] can be summarized using relations on positions with the following logical statement [...]"
** Combining lambda-calculus and first-order logic: combining beta-reduction, unification, and backtracking
Anonymous function: \ x -> x + 1
Anonymous predicate: \ a b c -> f a, g b, h c
fix f = f (fix f)

father_child(dad, kid).
father_child(daddy, kiddo).

:- operator --
father(daddy) -- child(kiddo).

father_child dad kid
father_child daddy kiddo
father dad -- child kid

father_child = \ dad kid
father_child = \ Dad Kid -> Dad = dad, Kid = kid

"First-order logic without equality"
https://math.stackexchange.com/questions/363168/first-order-logic-without-equality

"Differences between logic with and without equality"
https://mathoverflow.net/questions/316648/differences-between-logic-with-and-without-equality


Isn't this Curry language?
Curry's slogan is "A Truly Integrated Functional Logic Language"


Lambda-Prolog, Harrop formula
Why was Harrop formula defined?
What's so special about it?
https://en.wikipedia.org/wiki/Harrop_formula

Lambda-Prolog

https://math.stackexchange.com/questions/2494645/lambda-calculus-combined-with-first-order-logic-notation-quantifiers-propositi

"But languages aren't tools! IDEs are tools. Languages are material. See FallacyOfTheRightTool."
http://wiki.c2.com/?QuestForThePerfectLanguage
** Three semantics of Horn clauses
We use "cause semantics" for gui.

Rule semantics
A :- B means "If B then A".

turn_on_air_conditioner :- air_feels_hot.

Proof semantics of Prolog
A :- B means to prove A, prove B.
even(z).
even(s(s(N))) :- even(N).

Cause semantics of Prolog
A :- B means B causes A.
name_value(mytextbox, yes) :- name_isdown(mybutton, true).
That means "pressing mybutton causes mytextbox value to be yes".

** Prolog predicate naming
blue(X)
has(A,B)
can_sing(A)
version(A,B,C)
person_name(P,N)
index_fibonacci
index_list_element

class_field
table_column
column_type

class(Atom) is true iff Atom is a referent.

table(Atom) has different namespace

class_field(Cls, F) :- table_column(T, Col), field_name(F, N), column_name(Col, N).

Metamodel
A thing is modeled as an association list such as [a=b,c=d,e=f]
alist_key_value([K=V|_],K,V).
alist_key_value([_|R],K,V) :- alist_key_value(R,K,V).

alist_empty
alist_tail
alist_head
alist_without_keys
alist_size
alist_merge

thing_prop(T,P)
thing_prop_replaced(T0,P,T1)
Use thing_prop_replaced(T,P,T) to get the property P of T


url_page

There is a difference between dif and \=: dif is coroutining.
https://stackoverflow.com/questions/16560058/difference-between-x-y-and-difx-y
But "coroutine" is an overloaded term.
http://www.swi-prolog.org/pldoc/man?section=delcont


Prolog predicate naming problem when there is a compound word
integer_integer_sum(A, B, C)
basic_block__ssa_block()
** Lambda calculus
Lambda calculus formalizes binding and substitution.

Follow [[https://crypto.stanford.edu/~blynn/lambda/][Ben Lynn's lambda-calculus tutorial]]:

- why use lambda calculus as theoretical basis (cool reasons!)
*** Beta-reduction
- reduce : E -> E
- reduce ((\ x -> y) p) = reduce (y[x:=p])
  - y[x:=p] means y but with every bound occurence of x replaced with p)
- reduce x = x otherwise
** Macro, reflection, reification, quoting
The language should be a model of itself.

The language should be able to describe itself.

Does that cause a paradox?
** What program, execution, and termination mean in declarative paradigms

In functional paradigm:

- The program is a big lambda expression.
- Execution is beta-reduction / term-rewriting.
- Execution terminates when the program reaches normal form (is no longer beta-reducible).

In satisfying-logic paradigm:

- The program is a big logic formula.
- Execution is trying to satisfy the formula.
- Execution terminates when satisfiability is determined.

In theorem-proving paradigm:

- The program is a big logic formula, presumably in conjunctive-normal form.
- Execution is trying to prove the main(world) goal.
- Execution terminates when the goal is proved or disproved.

** Records, also for namespaces and modules

We want records because /records obviate namespaces and modules/.

We want namespaces and modules because they are necessary for humans to manage large programs.

*** We don't want to represent records as functions.

We can describe the semantics of a record r as a function r : string -> expression.

There are several options to pretty-print a record:

- Define a =show-record= function that is different from =show=.
- But we want polymorphic =show=. We want one =show= function to work for all things.
- If a record is represented by a lambda abstraction, then pretty-printing the record will pretty-print a lambda abstraction.
  We don't want that.
  We want pretty-printed records to look like how we write records.

*** We want records to be applicable like lambda; we add a new beta-reduction rule for "applying" records.

Record access is function application.
To get the field =fld= or record =rec=, evaluate =rec fld=.

The record =rec= with the the field =fld= updated to =new= is the expression =\ name -> IF name = fld THEN new ELSE rec fld=.

We add this beta-reduction rule:

- If X is a record, and Y is a string, then =X Y= reduces to =get X Y=.

We want to pretend that records are functions.
We want to use records as if they were functions.
But we don't want records to be functions; we want to pretty-print records as records, not as lambda abstractions.

*** Modules as record functions

A module is a function taking a record and giving a record.
The input is called /imports/ or /dependencies/.
The output is called /exports/.

Example:

#+BEGIN_EXAMPLE
\ { add; } -> { add_one: \ x -> add x 1; }
#+END_EXAMPLE

*** Record expressions

We add these expression syntax rules:

- If each of x1,...,xn is a label and each of e1,...,en is an expression, then ={x1:e1; ...; xn:en;}= is a /record expression/.
- =union R S= is a /record union expression/.
- record update expression (should be polymorphic)
- record filtering/selection/intersection expression

An example of a record expression is ={id: \ x -> x; app: \ f x -> f x;}=.

*** Labels

A /label/ is a string.
If the label doesn't contain funny characters, it doesn't have to be quoted.
For example, ={"a":1;}= and ={a:1;}= are the same thing.

Should we generalize label to expression?
** Annotations: user-defined metadata attached to concrete syntax tree nodes

We add these expression syntax rules:

- If M is an expression and E is an expression, then =E : M= (read: data E annotated with metadata M) is an /annotated expression/.
  - Alternative syntax: =E : M= can also be written =meta M E=.

This generalizes type systems.
With type systems, you annotate an expression with a type expression.
With general annotations, you annotate an expression with another expression (some of which are type expressions).

We assume that the outermost metadata update wins:

- meta M (meta N E) = meta M E

We add metadata extraction function symbol =meta-of=.

We add these beta-reduction rules:

- reduce (meta M E) = reduce E
- reduce (meta-of (meta M E)) = reduce M
- reduce (meta-of E) = #<empty-record> (for expressions without metadata)

This is like Java/C# annotation but more principled?

*** Annotation is not type

This is an example of type annotation that our annotation above can't handle: =\ (x : T) -> y=,
because =x= is not an expression.
** Let-expressions

The /let-expression/ =let x1 = y1; ...; xn = yn; in z;= desugars to =(\ x1 ... xn -> z) y1 ... yn=.

Let-expressions is for readability by humans.

Do we still need let-expressions if our program is well-factored?

*** let-expressions may recur

I think letrec is ugly.
All let-expression should allow recursion, like Haskell's.

https://stackoverflow.com/questions/28796904/whats-the-reason-of-let-rec-for-impure-functional-language-ocaml/28798040
** Sharing, laziness, full laziness, complete laziness, and optimal reduction

- https://www.reddit.com/r/haskell/comments/3pa5ii/are_optimal_evaluators_actually_optimal/
  - https://cstheory.stackexchange.com/questions/32850/are-optimal-evaluators-actually-optimal

*** Sharing

- Should the programmer care about sharing?
- sigma-calculus?
- Should the programmer decide whether to share or not?
- Is there a best sharing strategy?
- Should the machine guess by heuristics?

Sharing affects performance, but does not change the result.
Should we care?

*** Example of sharing

Consider the expression letexp defined as =let x = y in z;=.

We want x to be shared iff doing so speeds up the reduction of letexp.

This is always the case:

- If x occurs /at most once/ in z, we always want x not shared.

These depend on circumstances:

- If y is expensive, we want x shared.
- If y is cheap, we want x not shared.

How do we define "expensive"?

*** Lazy accumulation problem

#+BEGIN_EXAMPLE
sum a 0 = a
sum a

sum 0 = 0
sum n = n + sum (n - 1)
#+END_EXAMPLE
** Currying is not compatible with vararg and named parameters?

Vararg stands for "variable-length arguments".

Do we want currying?

Currying simplifies language user but complicates compiler writer.

The problems:

- https://softwareengineering.stackexchange.com/questions/286231/is-it-possible-to-have-currying-and-variadic-function-at-the-same-time
- http://tolmasky.com/2016/03/24/generalizing-jsx/

** Modeling all data

*** Hypothesis: data = ADTs + records + row polymorphism

Hypothesis: All data can be modeled by a combination of these:

- product (tuple)
- sum (alternative, union)
- record (tuple with named components)
- row polymorphism

Can we use web standards to define an ontology (so we can use Protege to edit it)?
https://protege.stanford.edu/

- Does Eclipse EMF have textual representation?

*** Church-representation of products, sums, and algebraic data types in general

https://en.wikipedia.org/wiki/Lambda_calculus#Pairs

Let [x] mean the /representation/ of x.

A /product/ (a,b) can be represented as [(a,b)] = \ f -> f [a] [b].

The left projection p1 is represented as [p1] = \ p -> p (\ a b -> a).

If we assume the sum type A + B, then:

- The choice inl a can be represented as [inl a] = \ f g -> f [a].
- The choice inr b can be represented as [inr b] = \ f g -> g [b].

A recursive data type such as "stream a = (a, stream a)" can be represented as:

- [cons h t] = \ f -> f [h] [t].

Thus [a : b : c : ...] = \ f -> f [a] (\ f -> f [b] (\ f -> f [c] ...)).

A recursive data type such as "list a = nil | cons a (list a)" can be represented as:

- [nil] = \ f g -> f.
- [cons x y] = \ f g -> g [x] [y].

Natural numbers "nat = z | s nat":

- [z] = \ f g -> f.
- [s x] = \ f g -> g [x].

Thus:

- [s z] = \ f g -> g (\ f g -> f)

*** Reverse semantics

Semantics maps syntax to mathematical object.

Reverse semantics maps mathematical object to syntax.
Reverse semantics is representation.
Reverse semantics is realization.

Example of reverse semantics is representing the tuple =(x,y)= with the lambda abstraction =\ f -> f [x] [y]= where =[x]= denotes the representation of x.

https://en.wikipedia.org/wiki/Realizability

*** Self-interpreter

1994 article "Efficient Self-Interpretation in Lambda Calculus"
** Representing knowledge; logic programming; symbolic AI
- https://en.wikipedia.org/wiki/Logic_programming#Knowledge_representation
- https://en.wikipedia.org/wiki/Knowledge_representation_and_reasoning

Example: We encode "a todo item has an int64 id" as

#+BEGIN_EXAMPLE
IF entity todo_app todo E THEN property E int64 id.
#+END_EXAMPLE
** Dynamic binding, contextual holes

- 1996 article "Enriching the lambda calculus with contexts: toward a theory of incremental program construction" https://dl.acm.org/citation.cfm?id=232652
- 1998 article "A lambda-calculus for dynamic binding" https://core.ac.uk/download/pdf/82810390.pdf
- 1998 article "Computing with Contexts: A simple approach" https://core.ac.uk/download/pdf/82065430.pdf
- 2009 article "Two-level Lambda-calculus" https://www.sciencedirect.com/science/article/pii/S1571066109002400

** Working with existing systems
*** Working with Java
** Semantics (should we worry about this earlier?)

*** Cost model

- "Cost models based on the lambda-calculus", [[http://www.cs.cmu.edu/~guyb/papers/lambdaInria.pdf][pdf slides]], from http://www.cs.cmu.edu/~guyb/

*** Denotational semantics

**** Intro to denotational semantics

- 1971, monograph, Dana Scott and Christopher Strachey, "Toward a mathematical semantics for computer languages", [[https://www.cs.ox.ac.uk/files/3228/PRG06.pdf][pdf]]
- [[https://pdfs.semanticscholar.org/presentation/76cd/955ec6dafde3699d64e50882ec7fb4384803.pdf][pdf slides]]
- [[https://www.seas.harvard.edu/courses/cs152/2016sp/sections/sec-2016-02-18-soln.pdf][Exercises]] about denotational semantics and lambda calculus
- 1997, book, "Denotational semantics: a methodology for language development", [[http://www.bcl.hamilton.ie/~barak/teach/F2008/NUIM/CS424/texts/ds.pdf][pdf]]
- 1989, PhD thesis, Frank Steven Kent Silbermann, "A Denotational Semantics Approach to Functional and Logic Programming", chapter 3, [[http://www.cs.unc.edu/techreports/89-030.pdf][pdf]]
  - "A novel approach is taken in constructing an operational semantics directly from the denotational description."

**** TODO Does lambda calculus have a semantics that doesn't depend on reduction strategy?

*** Operational semantics and evaluation/reduction strategy

Which one should we choose, and why?

- call-by-name
- call-by-value
- call-by-need
- what else?

<2018-09-29> Wikipedia needs cleanup:

- https://en.wikipedia.org/wiki/Reduction_strategy_(lambda_calculus)
- https://en.wikipedia.org/wiki/Lambda_calculus#Reduction_strategies
- https://en.wikipedia.org/wiki/Evaluation_strategy
** Overloadable function application?
** Interpreters: Giving different meanings to the same syntax

Sometimes we want to interpret the same syntax (appearance, source code, text) differently.

** System F, System F with subtyping, System F-omega

https://en.wikipedia.org/wiki/System_F

"System F is rich enough that the self-application =\x.x x= is typable." https://crypto.stanford.edu/~blynn/lambda/systemf.html

Brown and Palsberg, "Breaking Through the Normalization Barrier: A Self-Interpreter for F-omega"

** Imperative subset

Haskell's ST monad enables us to embed a local imperative program in a functional program.

** Introduction?

- unknown-year lecture notes "Lambda Calculus as a Programming Language" [[http://andrei.clubcisco.ro/cursuri/2pp/01.Lambda_prog.pdf][pdf]]

I thought lambda calculus could be summarized in one page, but Henk Barendregt wrote hundreds of pages about it. Is there more to lambda calculus than it seems?

- 1994, 50 pages, [[http://www.nyu.edu/projects/barker/Lambda/barendregt.94.pdf][pdf]]
- 1991, 190 pages, [[https://people.mpi-sws.org/~dreyer/tor/papers/barendregt.pdf][pdf]]

** Extending lambda-calculus with various bells and whistles

- Vectorial lambda-calculus

  - The 2013 article "The Vectorial Lambda-Calculus" [[https://who.rocq.inria.fr/Alejandro.Diaz-Caro/TheVectorialCalculus.pdf][pdf]] adds vectors and matrices and their types to lambda calculus.
  - The 2010 article "Semantics of a Typed Algebraic Lambda-Calculus" [[https://arxiv.org/abs/1006.1433][pdf available]] also mentions "vectorial".

- 2016 article "System F-omega with Equirecursive Types for Datatype-Generic Programming" [[http://ps.informatik.uni-tuebingen.de/research/functors/equirecursion-fomega-popl16.pdf][pdf]]

** Lambda calculus semantics?

- https://en.wikipedia.org/wiki/Lambda_calculus#Semantics

  - "In the 1970s, Dana Scott showed that, if only continuous functions were considered,
    a set or domain D with the required property could be found, thus providing a model for the lambda calculus."

    - 1982, [[https://www.sciencedirect.com/science/article/pii/S0019995882800879]["What is a model of lambda calculus?"]]
    - 2008, PhD thesis, [[https://tel.archives-ouvertes.fr/tel-00715207/document]["Models and theories of lambda calculus"]]

      - 2009, [[https://arxiv.org/abs/0904.4756][summary]]

- Paul Hudak, lecture notes, [[http://www.cs.yale.edu/homes/hudak/CS430F07/LectureSlides/Reynolds-ch10.pdf][The Lambda Calculus]]

  - "The Greatest Thing Since Sliced Bread™, or maybe even before it"

- The operational semantics of lambda calculus depends on the evaluation strategy?

  - What-reduction?

    - Normal-order reduction
    - Applicative-order reduction

  - Call-by-what?

    - Call-by-value
    - Call-by-name

** When should we introduce a type system?

- 2005 article "Introduction to Type Theory" [[http://www.cs.ru.nl/~erikb/onderwijs/sl2/materiaal/tt-sl2.pdf][pdf]]

** Optimizing lambda calculus?

- http://thyer.name/lambda-animator/
- http://thyer.name/phd-thesis/
- http://hackage.haskell.org/package/graph-rewriting-lambdascope
- partial evaluation

  - 2010, slides, "O, partial evaluator, where art thou?", Lennart Augustsson, [[http://www.cse.chalmers.se/~palka/Lennarts_talk/PEPM-2010.pdf][pdf]]

    - https://en.wikipedia.org/wiki/Partial_evaluation

      - Futamura projection

  - 1997, article, "Distributed partial evaluation", [[http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.134.1238][citeseerx]]

- Lambda calculus

  - might be related to bottom-up beta substitution

    - Abdullah hinted that BUBS (bottom-up beta-substitution [Shivers2004])
      might be used to make a garbage-free or a fast interpreter.
    - https://en.wikipedia.org/wiki/Strict_programming_language
    - https://en.wikipedia.org/wiki/Lazy_evaluation
    - [[https://memo.barrucadu.co.uk/strict-vs-lazy.html][Strict-by-default vs Lazy-by-default]]
    - https://en.wikipedia.org/wiki/Applicative_computing_systems
    - non-strict, beta reduction, normal order, applicative order
    - The terms "lazy" and "strict" imply operational semantics.
      They are two strategies for beta-reduction.
      "Lazy" is normal-order.
      "Strict" is applicative-order.
    - [[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.90.2386&rep=rep1&type=pdf][An Algorithm for Optimal Lambda Calculus Reduction, John Lamping]]
    - [[http://www.lsv.fr/Publis/PAPERS/PDF/sinot-wrs07.pdf][Complete Laziness: a Natural Semantics, François-Régis Sinot]]
    - http://rochel.info/ graph-rewriting-lambdascope (screenshot): An implementation of an optimal evaluator for the λ-calculus, PDFLambdascope

  - How is lambda calculus algebraic?

    - [[https://www.mscs.dal.ca/~selinger/papers/combinatory.pdf]["The lambda calculus is algebraic", Peter Selinger]]

      - "We argue that free variables should not be interpreted as elements in a model, as is usually done, but as indeterminates."

    - [[https://pdfs.semanticscholar.org/055d/69ee4dc95fbf6457419c90338493667478b1.pdf]["On the algebraic models of lambda calculus", Antonino Salibra]]

      - "The variety (equational class) of lambda abstraction algebras was introduced
        to algebraize the untyped lambda calculus in the same way Boolean algebras algebraize the classical propositional calculus."
        Propositional logic is modeled by Boolean algebra.
        First-order logic is modeled by cylindric algebra?
        Lambda calculus is modeled by lambda abstraction algebra.
        Why algebra? Because it is equational?

    - [[https://en.wikipedia.org/wiki/Algebraic_logic][Wikipedia "algebraic logic"]]
    - [[https://pdfs.semanticscholar.org/7596/19f05a42ff3045bcf87fcaa3edbff01e1130.pdf]["The algebraic lambda-calculus", Lionel Vaux]]
    - [[https://pdfs.semanticscholar.org/44c9/2ad00b8ceba78319005db048b24d61a80748.pdf]["Lambda abstraction algebras: representation theorems", Don Pigozzi, Antonino Salibra]]
    - [[http://www.dsi.unive.it/~salibra/mainfinale.pdf]["Applying Universal Algebra to Lambda Calculus", Giulio Manzonetto, Antonino Salibra]]

  - Dana Scott's PCF; also search the Internet for "the language pcf"
    [[http://www.cs.bham.ac.uk/~mhe/papers/RNC3.pdf]["Introduction to Real PCF (Notes)", Mart'in H"otzel Escard'o]]
  - 1993 John Launchbury [[https://pdfs.semanticscholar.org/492b/200419199892857faa6a6956614641ae9464.pdf][Lazy imperative programming]]

- lambda calculus

  - Church-encoding enables lambda calculus to represent conditionals and algebraic data types.
  - Fixed-point combinators enables recursion and looping.
  - https://en.wikipedia.org/wiki/Lambda_cube
  - https://en.wikipedia.org/wiki/Calculus_of_constructions
  - https://en.wikipedia.org/wiki/Simply_typed_lambda_calculus

    - "The simply typed lambda calculus [...], a form of type theory,
      is a typed interpretation of the lambda calculus with only one type constructor: [...] that builds function types."

      - What is an "interpretation of the lambda calculus"?
      - What is "the lambda calculus"? Is there only one lambda calculus?

  - https://www.reddit.com/r/haskell/comments/8els6f/why_are_combinators_as_powerful_as_full/
  - https://math.stackexchange.com/questions/5639/the-power-of-lambda-calculi
  - Implement lambda calculus.

    - Without dynamic allocation / garbage collection.
    - Translate lambda calculus to assembly

      - Basic idea:

        - Every expression translates to a subroutine.
        - Calling the subroutine ~ evaluating the expression.
        - Subroutine return value ~ value obtained by evaluating the expression.

      - A lambda abstraction translates to a subroutine that accepts one parameter.
      - An application translates to a subroutine call.
      - An int value translates to what? Choice:

        - itself
        - a subroutine that returns the int

    - 2012, article, [[https://arxiv.org/abs/1202.2924]["From Mathematics to Abstract Machine: A formal derivation of an executable Krivine machine"]]

      - https://en.wikipedia.org/wiki/Krivine_machine

** Begin with an interpreter, not a compiler

- Don't make a compiler?
  Make an interpreter instead, and stage it?
  Turn an interpreter into a compiler for free?
- "To stage an interpreter" is to add staging annotations to the code of the interpreter.
- Staging is similar to quoting in Lisp/Scheme.
- 2004 article "A Gentle Introduction to Multi-stage Programming" [[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.103.2543&rep=rep1&type=pdf][pdf]]
  - Basic Problems in Building Program Generators
  - part 2 https://pdfs.semanticscholar.org/aa3c/d4233f7c0db95e5c38d5b8fc1d199df21857.pdf
- multi-stage programming for Scala https://scala-lms.github.io/
- 2006 article "A Verified Staged Interpreter is a Verified Compiler" [[https://www.researchgate.net/profile/Kevin_Hammond/publication/221108683_A_verified_staged_interpreter_is_a_verified_compiler/links/00b7d517ede725c057000000.pdf][pdf]]

** Foreign function interface: working with C
** Ocaml

- https://ocaml.org/learn/

** Reconciling functional and logic programming into declarative programming?

1996 publication "A Note on Declarative Programming Paradigms and the Future of Definitional Programming" [[http://www.cse.chalmers.se/~oloft/Papers/wm96/wm96.html][html]]

*** Example: Representing a predicate in lambda calculus

Lambda calculus with boolean logic extensions:

#+BEGIN_EXAMPLE
p = \ x -> x = "a" OR x = "b"
#+END_EXAMPLE

Prolog:

#+BEGIN_EXAMPLE
p(a).
p(b).
#+END_EXAMPLE

*** Example: Representing a function in logic programming

#+BEGIN_EXAMPLE
inc(X, Y) :- X = Y + 1.
#+END_EXAMPLE

*** The "satisfy" function

The expression "satisfy f" finds all x : a that satisfies f : a -> bool.
Thus the type of "satisfy" is "(a -> bool) -> list a".

It is in principle possible to write such "satisfy" builtin for some lambda expressions.

#+BEGIN_EXAMPLE
satisfy (\ x -> x = "a" OR x = "b")
=> ["a","b"]

satisfy (\ (x : int) -> x >= 10)
=> [10,11,12,...] -- an infinite list

satisfy (\ (x : bool) -> true)
=> [false,true]
#+END_EXAMPLE

*** A function is a relation, a relation is a function, so what?

A function \( (A,B,F) \) is trivially a relation.

A relation \( (A,B,R) \) is a function \( (A,2^B,F) \) where \( F(x) = \{ y ~|~ (x,y) \in R \} \).
** Precise memory accounting

We want precise memory accounting to enable the runtime to limit memory usage.

** Execution state reification, save states, saving and loading states, pausing and resuming computations

We want execution state reification so that we can do live process migration.

** Haskell woes

- [[https://news.ycombinator.com/item?id=5893442][Ask HN: Any downsides of programming in Haskell? | Hacker News]]
- [[https://www.reddit.com/r/haskell/comments/1gknfs/ask_hn_any_downsides_of_programming_in_haskell/][Ask HN: Any downsides of programming in Haskell? : haskell]]

*** Can't import type class instances explicitly

[[https://stackoverflow.com/questions/8728596/explicitly-import-instances][There is a reason]].
** Monads, and Haskell type system limitations

- A monad is a way of /conservatively extending/ all categories. (Abdullah, private correspondence)
- https://www.reddit.com/r/haskell/comments/3h2aqg/can_someone_explain_the_monads_are_generalised/

*** Should Nat (the natural numbers) be a subtype of Int (the integers)?

Intuitively, yes.

*** <2018-10-01> @abdullah Signedness is a monad: conservatively extending naturals to integers

I think this is what we mean when we say "integer is a monad".
I think what we are really trying to say is "signedness is a monad", that is, "we can conservatively extend the naturals to the integers by using the Signed monad".

We can write that in Haskell as follows (with some problems described later).

#+BEGIN_EXAMPLE
data Nat = Zero | Succ Nat
type Int = Signed Nat
data Signed a = Positive a | Negative a

instance Functor Signed ...
instance Applicative Signed ...

instance Monad Signed where
    return = Positive
    m >>= k = join_signed (fmap k m)

join_signed :: Signed (Signed a) -> Signed a
join_signed mm = case mm of
    Positive x -> x
    Negative x -> negate_signed x

negate_signed :: Signed a -> Signed a
negate_signed (Positive x) = Negative x
negate_signed (Negative x) = Positive x

f :: Nat -> Nat
f = ...

f_int :: Int -> Int
f_int = fmap f
#+END_EXAMPLE

We can have Signed Char, Signed String, etc., but those may not make sense.

The problem:
Nat should be a subtype of Int, because everyone who knows arithmetics seems to think that way.
We want f and f_int to be the /same/ function.
We don't want to type fmap, liftM2, and their ilk.
** Abdullah's dream language: Extending System F application beta-reduction rules to automate fmap and extend?
Add these inference rules?
- If =f : a -> b=, and =x : m a=, and =m= is an instance of =Functor=, then =f x= beta-reduces to =fmap f x=.
- If =k : a -> m b=, and =x : m a=, and =m= is an instance of =Monad=, then =k x= beta-reduces to =k =<< x=.

\[
f : a \to b , ~ x : m~a , ~ Functor~m \vdash (f~x \to_\beta fmap~f~x)
\]

Suppose =f : a -> b=, and =x : m (p a)=, and =m= is an instance of =Functor=, and =p= is an instance of =Functor=.

- The rule beta-reduces =f x= to =fmap f x=.
- Problem: The rule interferes with the =Functor= instance of =(->)=.
** Increasing language adoption
*** What
In order for a language to be adopted, people must perceive its risk as low.

The language must work with existing codebases.

The language designer must think from the language user's point of view.
Let's say I have 100,000 lines of Java that I've been writing and testing for the past 5 years.
Are you expecting me throw away all of them?

Thus the language must work with C, C++, C#, Java, Go, JavaScript, Python, Ruby, and everything else.
This should be possible because the essence of all programming languages is the same: every programming language is a formal system.
It should be possible to translate a program P1 in language L1 to program P2 in language L2 with the same semantics.

Improve/enhance, not supersede.

Mixing languages should be easy.

2013, article, "Empirical analysis of programming language adoption", [[http://sns.cs.princeton.edu/docs/asr-oopsla13.pdf][pdf]]

The language must be suitable for systems programming. - System programming is hardware-aware programming.
Application programming assumes abstract machine, infinite memory, and all convenience provided by the operating system. - Why do we make this distinction?

The language must facilitate metaprogramming.
Everything must be a first-class citizen.
It has to have EVAL.
The language must provide a way for interpreting/compiling/loading a program at runtime.
The compiler becomes a part of every program.

What is the reason for the name "metacircular evaluator"?
What is circular?
What is metacircular?

To make syntax first-class, we need QUOTE and UNQUOTE (such as in Lisp/Scheme)?

To prevent syntax flamewar, we should define the canonical linearization of the abstract syntax tree.
Go does this with =go fmt=.
I think that is wise.

- Basic assumptions
  - Computer (machine) is embodied formal system.
    - Assume no hardware fault.
  - Software is executable mathematics.
*** Other people's opinions
- 2012 article "Socio-PLT: Principles for Programming Language Adoption" [[https://lmeyerov.github.io/projects/socioplt/paper0413.pdf][pdf]]
** What are some interesting programming languages?
   :PROPERTIES:
   :CUSTOM_ID: what-are-some-interesting-programming-languages
   :END:

- Interesting functional programming languages tailored for web programming.
  Perhaps related to data modeling.

  - Ur/Web

    - [[http://www.impredicative.com/ur/faq.html][FAQ]]

      - "Why would I prefer to use Ur/Web over OPA?"

    - [[http://www.impredicative.com/ur/resources.html][How to Get Started Learning Ur/Web]]

  - [[http://links-lang.org/][The Links Programming Language]]
  - [[http://opalang.org/][The Opa Language]]

- Moving logic into SQL stored procedures

  - [[https://sivers.org/pg][Simplify: move code into database functions | Derek Sivers]]

    - A legitimate concern: How do we version-control (and release, and rollback) stored procedures, triggers, and other database logics?

  - [[https://news.ycombinator.com/item?id=11802917][Andl, a relational language that is not SQL, is coming to Postgres | Hacker News]]

- https://www.microsoft.com/en-us/research/publication/convenient-explicit-effects-using-type-inference-with-subeffects/
- [[https://nikita-volkov.github.io/if-haskell-were-strict/][If Haskell were strict, what would the laziness be like?]]
- http://homepages.inf.ed.ac.uk/wadler/papers/free-rectypes/free-rectypes.txt

*** Do we really have to read these fragmented sources?
    :PROPERTIES:
    :CUSTOM_ID: do-we-really-have-to-read-these-fragmented-sources
    :END:

- [[http://www.cse.chalmers.se/edu/year/2015/course/DAT150/lectures/proglang-12.html][Lecture 12: Design and Evolution of Programming Languages]]
** Making compilers?
   :PROPERTIES:
   :CUSTOM_ID: making-compilers
   :END:

Every compiler does name resolution / symbol table.
Is there a compiler that doesn't do that?
[[https://www.reddit.com/r/Forth/comments/695oik/advances_in_forth_language_design/dh454oq/][Forth?]]

- https://www.reddit.com/r/haskell/comments/4jhhrj/anders_hejlsberg_on_modern_compiler_construction/
- https://cs.stackexchange.com/questions/63018/visual-programming-tools-why-don-t-they-work-with-the-ast-directly
- compiling with continuations

  - Why use CPS (continuation passing style) as intermediate form?

    - http://matt.might.net/articles/cps-conversion/
    - https://www.microsoft.com/en-us/research/publication/compiling-with-continuations-continued/
    - https://news.ycombinator.com/item?id=7150095

  - 2003, retrospective: the essence of compiling with continuations https://users.soe.ucsc.edu/~cormac/papers/best-pldi.pdf

    - https://en.wikipedia.org/wiki/A-normal_form

** After-2018 programming language requirements

*** Ergonomic error handling

- http://joeduffyblog.com/2015/11/03/blogging-about-midori/
  - http://joeduffyblog.com/2016/02/07/the-error-model/

*** REPL (read-eval-print loop)

The language must not preclude making a REPL for it.

REPL is important for immediate feedback, experimentation, exploration, and playing around.

*** Example of mixing nominal and structural subtyping

https://www.eclipse.org/n4js/features/nominal-and-structural-typing.html

*** Programming language should separate modeling and binding. Can we combine dynamic binding and static typing?

Example of binding is =import= statement.

*** Paradigm, approach, viewpoint, worldview?

- graph programming languages

  - https://cstheory.stackexchange.com/questions/3906/what-are-theoretically-sound-programming-languages-for-graph-problems

    - https://www.cs.york.ac.uk/plasma/wiki/index.php?title=GP_%28Graph_Programs%29
    - 2007, PhD thesis, Steinert, [[https://www.cs.york.ac.uk/ftpdir/reports/2007/YCST/15/YCST-2007-15.pdf]["The graph programming language GP"]]
    - a short visual example of "conditional rule schemata"

      - 2010, article, [[https://www.cs.york.ac.uk/plasma/publications/pdf/PoskittPlump.VS-Theory.10.pdf]["Hoare Logic for Graph Programs"]]

    - https://markorodriguez.com/2013/01/09/on-graph-computing/
    - https://en.wikipedia.org/wiki/Gremlin_(programming_language)

- equational programming?

  - 2017-2018, https://www.cs.vu.nl/~tcs/ep/
  - term-rewriting

    - retired, [[http://q-lang.sourceforge.net/][Q language]]

      - http://q-lang.sourceforge.net/examples.html
      - superseded by Pure

        - https://agraef.github.io/pure-lang/
        - https://en.wikipedia.org/wiki/Pure_(programming_language)
        - https://github.com/agraef/pure-lang/wiki/Rewriting

    - Joy

- 2002, article, [[http://www.cs.tufts.edu/comp/150PP/archive/norman-ramsey/pmonad.pdf]["Stochastic Lambda Calculus and Monads of Probability Distributions"]]
- "Purely functional lazy nondeterministic programming", [[https://www.cambridge.org/core/journals/journal-of-functional-programming/article/purely-functional-lazy-nondeterministic-programming/1E8BA117E549A9612BC4AF9804E5507A][paywall]]
- relational programming (pure logic programming?)

  - miniKanren

    - Byrd PhD thesis https://scholarworks.iu.edu/dspace/bitstream/handle/2022/8777/Byrd_indiana_0093A_10344.pdf

      - mentions other programming languages: Prolog, Mercury, Curry

- https://en.wikipedia.org/wiki/Multi-adjoint_logic_programming
- ramble

  - https://www.researchgate.net/project/Ontology-oriented-programming
  - http://www.doc.ic.ac.uk/~klc/OntProg.html

*** Low-code? Programming for the masses?

Limited programming?

What can we assume about the user's skill/knowledge/background?

- https://en.wikipedia.org/wiki/End-user_development
- https://en.wikipedia.org/wiki/Low-code_development_platforms
** Toward a language with first-class syntax?
   :PROPERTIES:
   :CUSTOM_ID: toward-a-language-with-first-class-syntax
   :END:

- composable grammars?

  - 2013, article, Viera & Swierstra, "First Class Syntax, Semantics, and Their Composition" http://www.cs.ru.nl/P.Achten/IFL2013/symposium_proceedings_IFL2013/ifl2013_submission_21.pdf

    - 2013, PhD thesis, Viera, "First Class Syntax, Semantics, and Their Composition" file:///home/erik/Downloads/viera.pdf

  - 1990, [[https://authors.library.caltech.edu/26726/]["A Primer for Program Composition Notation"]]
  - https://stackoverflow.com/questions/953185/composable-grammars
  - OMeta
  - Programming languages with programmable syntax

    - [[http://chrisseaton.com/katahdin/][Katahdin]]

  - parsing expression grammar, packrat

    - "Parsing ought to be easier"

      - https://news.ycombinator.com/item?id=2330830

        - "PEGs are one class of cleanly composable grammars."?

  - http://www.cs.cmu.edu/~Compose/
  - cryptographic protocol analysis

    - https://en.wikipedia.org/wiki/Universal_composability

- Programming languages with macros

  - Common Lisp
  - Scheme
  - Kotlin?
  - Clojure?
  - Scala? https://www.scala-lang.org/blog/2017/11/27/macros.html

** Enabling metaprogramming
   :PROPERTIES:
   :CUSTOM_ID: enabling-metaprogramming
   :END:

- [[https://stackoverflow.com/questions/50490883/why-is-ml-called-meta-language][metaprogramming - Why is ML called Meta-Language? - Stack Overflow]]
- related?

  - https://github.com/PostgREST/postgrest
  - http://rosecompiler.org/

- Metaprogramming

  - http://kaitai.io/

    - from description, generate parsers for binary data (as opposed to text data)

- Aspect-oriented programming is a restricted form of metaprogramming.

  - relationship between Aspect-Oriented Programming and Functional Programming

    - 2009, article, "What Does Aspect-Oriented Programming Mean for Functional Programmers?", [[https://www.cs.ox.ac.uk/files/2282/wgp14-wang.pdf][pdf]]
    - 2008, article, "On Feature Orientation and Functional Programming", [[https://pdfs.semanticscholar.org/522e/b6c2ea910ed074a13fe21767c9fa070fb685.pdf][pdf]]
    - 2016, article, "Realtime collaborative editor. Algebraic properties of the problem.", [[http://blog.haskell-exists.com/yuras/posts/realtime-collaborative-editor.html][html]]

      - see also Darcs patch theory

    - 2008, PhD thesis, "An Integrated System to Manage Crosscutting Concerns in Source Code", [[http://wwwtmp.st.ewi.tudelft.nl/arie/phds/Marin.pdf][pdf]]
    - 2003, article, "Language-independent aspect-oriented programming", [[http://www.tara.tcd.ie/handle/2262/32627][pdf available]]

- Java metaprogramming

  - Similar products

    - libraries

      - [[https://github.com/INRIA/spoon][INRIA Spoon]]
      - The =javax.lang.model= package of the Java standard library, but it does not model method bodies.

    - environments

      - [[http://www.eclipse.org/modeling/emf/][Eclipse Modeling Framework (EMF)]]
      - [[https://www.jetbrains.com/mps/][JetBrains MPS (Meta Programming System)]]
      - [[http://strategoxt.org/][Stratego/XT]]
      - TXL
      - [[http://www.eclipse.org/Xtext/][Eclipse Xtext]] and [[http://www.eclipse.org/xtend/][Eclipse Xtend]]

    - programming languages

      - Eclipse Xtend

    - parser generators

      - [[https://en.wikipedia.org/wiki/Compiler-compiler][WP:Compiler-compiler]]
      - [[https://en.wikipedia.org/wiki/Comparison_of_parser_generators][WP:Comparison of parser generators]]
      - [[http://www.antlr.org/][ANTLR (Another Tool for Language Recognition)]]
      - [[https://javacc.org/][JavaCC]]
      - YACC, Bison; with Lex, Flex

  - Related concepts

    - Model-driven development
    - Model-driven architecture

** Automatic (program) differentiation
   :PROPERTIES:
   :CUSTOM_ID: automatic-program-differentiation
   :END:

- What is the relationship between incremental lambda-calculus and automatic differentiation of programs (or of algebraic data types)?

** Extending functions
   :PROPERTIES:
   :CUSTOM_ID: extending-functions
   :END:

Not only classes, but also functions, should be extensible.

"To extend the function \( f : A \to B \) to the function \( f' : A' \to B' \)" means:

- For every \( x \in A \), we have \( f(x) = f'(x) \).
- \( A \subseteq A' \).
- \( B \subseteq B' \).

A consequence:
Every occurrence of \( f \) can be replaced with \( f' \) while preserving the meaning of the containing expression.

** Is inheritance subtyping?
   :PROPERTIES:
   :CUSTOM_ID: is-inheritance-subtyping
   :END:

The short article [2] basically tells the user to read AbdelGawad's other works.

- [1] 1989, "Inheritance is not subtyping", [[https://www.cs.utexas.edu/users/wcook/papers/InheritanceSubtyping90/CookPOPL90.pdf][pdf]]
- [2] 2013, "Inheritance is subtyping", [[https://pdfs.semanticscholar.org/569c/9b35375144756761167fd4a2571b1d97f0e8.pdf][pdf]]
- [[https://www.cmi.ac.in/~madhavan/courses/pl2009/lecturenotes/lecture-notes/node28.html][Subtyping vs inheritance]]

  - Subtyping and inheritance are orthogonal concepts.

A language should provide both nominal and structural subtyping.

- 2008, "Integrating Nominal and Structural Subtyping", [[http://www.cs.cmu.edu/~aldrich/papers/ecoop08.pdf][pdf]]

We can define structural subtyping for C structs.

We can define layout types (almost like ASN.1):

#+BEGIN_EXAMPLE
    layout {
        at byte 0;
        def var0 : little_endian int32;
        at byte 4;
        def var1 : big_endian int32;
        reserve 8 byte;
        skip 4 byte; -- synonym for reserve
        def var2 : int8;
        def var3 : array of 4 int8;
        align 16;
        def var4 : layout {
            reserve 16 byte;
            def var1 : int8;
            align 32;
        };
    }
#+END_EXAMPLE

We can define intersection, union, concatenation, and composition/nesting of two layout types.

Why don't we just build ASN.1 into the language?

- [[http://whiley.org/2010/12/13/why-not-use-structural-subtyping/][Why not use Structural Subtyping?]]

  - What is it trying to say?

** Maximum polymorphism?
   :PROPERTIES:
   :CUSTOM_ID: maximum-polymorphism
   :END:

- Read this: [[https://blog.inf.ed.ac.uk/apl16/archives/178/comment-page-1][Lecture 4: Higher Polymorphism | Advances in Programming Languages]]
- [[https://github.com/lampepfl/dotty/issues/1886][Rethink Structural Types · Issue #1886 · lampepfl/dotty]]

  - "However, there is another area where statically-typed languages are often more awkward than dynamically-typed ones: database access."
  - Keynote - What's Different In Dotty by Martin Odersky https://www.youtube.com/watch?v=9lWrt6H6UdE

** Typing records
   :PROPERTIES:
   :CUSTOM_ID: typing-records
   :END:

A record type can be thought as a product type whose components are named.

If each value =valN= has type =typN=, then the record ={key1=val1; key2=val2; ...;}= has type ={key1:typ1; key2:typ2; ...;}=.
For example, the record ={name="John"; age=20}= has type ={name:String; age:Int;}=.

** Polymorphism is code generation
   :PROPERTIES:
   :CUSTOM_ID: polymorphism-is-code-generation
   :END:

- Consider translating =id : a -> a= to assembly.

  - If types define memory layout (bit representation), then the compiler must generate an =id= function for every =a=.
  - If the language uses runtime type tagging, then there doesn't have to be more than one=id= functions.

** Fixed points and recursive types
   :PROPERTIES:
   :CUSTOM_ID: fixed-points-and-recursive-types
   :END:

A thing \( x \) is a /fixed point/ of function \( f \) iff \( f(x) = x \).

A function may have zero, one, or many fixed points.

A thing \( x : A \) is a /least fixed point/ of function \( f : A \to A \) iff
\( x \) is a minimum of the set of the fixed points of \( f \).
The words "least" and "minimum" assume an ordering \( \le \).
This ordering should be clear from context.

If \( f \) has exactly one least fixed point \( x \) with respect to ordering \( \le \), then we write \( \mu_\le(f) = x \).

The syntax \( \mu a. b \) means \( \mu_\le(\lambda a. b) \).
The syntax \( \mu a. b \) is analogous to lambda expression syntax \( \lambda a. b \).

What is the ordering used in formulating the least fixed point of a recursive algebraic data type?

todo: equirecursive types and isorecursive types

** A sketch about reusable language-oriented programming: CommonMark, Liquid, and Jekyll, reusable grammar?
   :PROPERTIES:
   :CUSTOM_ID: case-study-commonmark-liquid-and-jekyll-reusable-grammar
   :END:

I want something like this:

#+BEGIN_EXAMPLE
    data CommonMark = ... -- CommonMark AST
    data Liquid = ... -- Liquid AST
    type Jekyll = CommonMark + Liquid

    parse_cm : String -> Parser CommonMark
    parse_lq : String -> Parser Liquid
    parse_jk : String -> Parser Jekyll
    parse_jk = parse_cm + parse_lq
#+END_EXAMPLE

- [[https://stackoverflow.com/questions/953185/composable-grammars][design - Composable Grammars - Stack Overflow]]
- [[https://jeffreykegler.github.io/Ocean-of-Awareness-blog/individual/2015/12/composable.html][Grammar reuse]]
- [[https://github.com/melt-umn/silver][melt-umn/silver: An attribute grammar-based programming language for composable language extensions]]
- OMeta, Katahdin
** Some tentative plans: Create a language that compiles to Haskell?
- [[https://github.com/bennofs/haskell-generate][bennofs/haskell-generate: Type-safe library for generating haskell source code]]
** Whole-program optimization?
   :PROPERTIES:
   :CUSTOM_ID: whole-program-optimization
   :END:

- https://stackoverflow.com/questions/3416980/why-arent-whole-program-optimizations-more-prevalent-now/27757382

** TODO <2018-09-15> Make the programming language
- cite:DBLP:conf/popl/CookHC90
- cite:cartwright2013inheritance
** TODO <2018-09-15> Find out how type systems may guarantee pointer safety
Is escape analysis the only way?
*** TODO <2018-09-15> Study Sixten type system
*** TODO <2018-09-15> Study Rust type system
See [[https://doc.rust-lang.org/reference/type-system.html][Rust type system reference]].
** Combine things and let the programmer choose?
*** Combine nominal subtyping and structural subtyping
** Effects?
- Reddit post "Try/Catch and Async/Await are just a specialized form of Algebraic Effects!" https://www.reddit.com/r/ProgrammingLanguages/comments/9kzcz6/trycatch_and_asyncawait_are_just_a_specialized/
  - 2016 article "Algebraic Effects for Functional Programming" https://www.microsoft.com/en-us/research/wp-content/uploads/2016/08/algeff-tr-2016-v2.pdf
    - "we show how algebraic effects generalize over common constructs like exception handling, state, iterators and async-await"
  - <2018-10-08> not yet performant
** Abdullah research roadmap
- Abbreviations:

  - CCC: Cartesian closed category ([[https://en.wikipedia.org/wiki/Cartesian_closed_category][Wikipedia]])

- Abdullah wants to make a monad-aware programming language.

  - Categories enable us to organize a hierarchy of effects?

    - effectful over category \( C \) = extends category \( C \)?

- The plan is to research two related things in parallel:

  - using algebraic subtyping to mix parametric subtyping and inheritance subtyping

    - [[https://www.cl.cam.ac.uk/~sd601/thesis.pdf][Stephen Dolan's Ph.D. thesis "Algebraic subtyping"]]

      - "Type systems which support subtyping care about the direction of data flow."
      - "Find the /simplest/ algebra of types, and /some/ syntax for them"

    - [[https://en.wikipedia.org/wiki/Subtyping][Wikipedia: Subtyping]]
    - Scala already tries to join parametric subtyping and inheritance subtyping.
      What is the problem with Scala?

- Related: [[file:%7B%%20link%20functional_programming.md %}][functional programming research]].
- Who is Abdullah?

  - Abdullah a.k.a. Kim-Ee Yeoh is [[https://www.atamo.com/][atamo.com]].

*** Research questions
   :PROPERTIES:
   :CUSTOM_ID: research-questions
   :END:

**** Possible questions
    :PROPERTIES:
    :CUSTOM_ID: possible-questions
    :END:

- What is the result of CPS-transforming a recursive function?

#+BEGIN_SRC haskell
    fac 0 = 1
    fac n = n * fac (n - 1)

    fac 0 k = k 1
    fac n k = fac (n - 1) $ \ x -> k (n * x)
#+END_SRC

Conjecture:
Every recursive function can be transformed to a tail-recursive function with a helper function \( f(x) = f(g(x)) \).

#+BEGIN_SRC haskell
    fac 0 = 1
    fac n = n * fac (n - 1)

    fach (a, 0) = (a, 0)
    fach (a, n) = fach (a * n, n - 1)

    fac n = fach (1, n)
#+END_SRC

How do we enable the caller to step the recursion?

#+BEGIN_SRC haskell
    fac n = \ k -> k (\ x -> x * fac (n - 1) k) n
    fac n (\ f x -> f x)

    tri 0 = 0
    tri n = n + tri (n - 1)

    tri :: Nat -> ((x -> c -> Nat) -> Nat -> Nat)
    tri 0 = \ k -> 0
    tri n = \ k -> k (\ x c -> x + tri (n - 1) c) n

    inc x = inc (x + 1)

    inc x = \ k -> k (\ ) (x + 1)
#+END_SRC

- [[https://github.com/dorchard/unfix][github: dorchard/unfix: Takes a recursive function and syntactically unties the recursive knot]]

**** What is the relationship between self-reference, recursion, and fixed points?
    :PROPERTIES:
    :CUSTOM_ID: what-is-the-relationship-between-self-reference-recursion-and-fixed-points
    :END:

We say that \( x \) is a /fixed point/ of \( f \) iff \( f(x) = x \).

[[https://mathoverflow.net/questions/126513/categories-of-recursive-functions][MO 126513: categories of recursive functions]]

- What is the essence of self-recursion?

  - =fix= does not exist in a strict language.

    - "The Z combinator will work in strict languages [...]" [[https://en.wikipedia.org/wiki/Fixed-point_combinator#Strict_fixed_point_combinator][WP: Fixed-point combinator]]

      - The Z combinator is obtained by eta-expanding the Y combinator.

**** What is the formal definition of strict, non-strict, eager, and lazy?
    :PROPERTIES:
    :CUSTOM_ID: what-is-the-formal-definition-of-strict-non-strict-eager-and-lazy
    :END:

The difference is explained by luqui on [[https://stackoverflow.com/questions/7140978/haskell-how-does-non-strict-and-lazy-differ][SO 7140978]]. - Strict and non-strict are about meaning (denotational semantics?).
Eager and lazy are about operation (operational semantics?). - Strictness is a domain-theoretic concept.
Laziness is a computer implementation detail. - This uses Haskell to introduce domain theory: [[https://en.wikibooks.org/wiki/Haskell/Denotational_semantics][Wikibooks: Haskell: Denotational semantics]]. - In Haskell, the least fixed point operator can be defined as =fix f = f (fix f)=. - Why is bottom the /least/ fixed point of =id=?
Every \( x \) is a fixed point of an identity function \( x \mapsto x \), isn't it? - What is the ordering? - "Semantic approximation order" - [[https://wiki.haskell.org/Lazy_vs._non-strict][Haskell wiki]] is wrong?
It conflates non-strictness with normal-order reduction strategy? - [[http://pages.cs.wisc.edu/~horwitz/CS704-NOTES/6.DENOTATIONAL-SEMANTICS.html#simple][A simple example of denotational semantics using a language of binary numerals]] - [[https://en.wikipedia.org/wiki/Binary_combinatory_logic][WP: Binary combinatory logic]].
Its semantics is SK calculus (SKI calculus without the redundant I combinator) which is equivalent to lambda calculus. - we can execute non-strict functions eagerly,
for example by strictness analysis or speculative execution.

People are often sloppy with these terms. Redditors. Experts. Researchers. Academics.
It is true that Haskell is non-strict.
It is true that Haskell (as implemented by GHC) is lazy.

We can infer these formal definitions: - A function \( f \) is /strict/ iff \( f(\bot) = \bot \). - "a strict function must map bottom to bottom" (from the SO answer)

**** How do we represent general recursion by a monad? How do we add general recursion to TFP? How do we do it with monads?
    :PROPERTIES:
    :CUSTOM_ID: how-do-we-represent-general-recursion-by-a-monad-how-do-we-add-general-recursion-to-tfp-how-do-we-do-it-with-monads
    :END:

Here we try to salvage [McBride2015].

TODO write the problem: how McBride's General doesn't compose

- Is McBride's General really a monad?
- Is Abdullah's M really a monad?
- Did Abdullah mistranslate McBride's General?
- Is there a way to transform begin-step-end to McBride's General or Abdullah's M?
- Start with axioms, then infer the data types.

These are the axioms that we want M to satisfy. - =rec f . rec g = rec (ext f . g)= - =rec f . rec g = rec (f <=< g)= - =rec pure = id=

How do we translate a recursive function =f : a -> b=
to an explicitly recursive function =f : a -> m b=?

#+BEGIN_SRC haskell
    -- Abdullah's M, obtained by translating
    -- the General in [McBride2015] from Agda to Haskell
    data M s t a
        = Em a
        | Ap (t -> M s t a) s

    cata :: (a -> r) -> ((t -> r) -> s -> r) -> r
    cata ar xrxr m = fix $ \ self m -> case m of
        Em a -> ar a
        Ap xma x -> xrxr (self . xma) x
#+END_SRC

- Why do we want to add general recursion to TFP?

  - Adding general recursion to a TFPL
    makes programming in that language more practical.

- There are several attempts to add general recursion to TFP.

  - [Nordstrom1988] (terminating general recursion)
  - [Bove2001] (simple general recursion in type theory)
  - [Capretta2005] (general recursion via coinductive types)
  - [McBride2015] (Turing-completeness totally free)
  - me on 2018-04-07? "Approximating general recursion in TFP"?
  - [[http://adam.chlipala.net/cpdt/html/GeneralRec.html][A non-termination monad inspired by domain theory]],
    part of the documentation of Coq's GeneralRec library

- How are monads useful in FP?

  - Monads allow embedding a strict language in a lazy language [Wadler1996].
  - "Monads may be regarded as a mild generalization of continuation-passing style." [Wadler1996]

- [[http://homepages.inf.ed.ac.uk/wadler/topics/monads.html][Philip Wadler's research on monads]]
- Reading triage:

  - Moggi 1991: Notions of computation and monads

    - Programs should form a category.

      - Every type becomes an object in the category.
      - Every (one-parameter) function becomes a morphism in the category.

    - "Kleisli triples are just an alternative description for monads. Although
      the former are easy to justify from a computational perspective, the latter
      are more widely used in the literature on category theory and have the
      advantage of being defined only in terms of functors and natural transformations,
      which make them more suitable for abstract manipulation."
    - Moggi's most cited paper, according to Google Scholar
    - [[https://www.disi.unige.it/person/MoggiE/][Moggi's home page]]

      - [[https://www.disi.unige.it/person/MoggiE/publications.html][Moggi's list of his publications]]

        - recent paper: 2010 "Monad Transformers as Monoid Transformers". Theoretical Computer Science, TCS vol.411

  - [[https://www.irif.fr/~mellies/mpri/mpri-ens/articles/moggi-computational-lambda-calculus-and-monads.pdf][Moggi 1989: Computational lambda-calculus and monads]]
  - 2017 Uustalu [[https://www.semanticscholar.org/paper/Partiality-and-Container-Monads-Uustalu-Veltri/a45cabd8696232a985368e5b7f138fd21a7bff9f][Partiality and container monads]]
  - [Sheard2003] (a pure language with default strict evaluation order and explicit laziness)
  - [Wadler1998] (how to add laziness to a strict language without even being odd)
  - [Wadler1992] "explores the use of monads to structure functional programs"
  - [[https://srfi.schemers.org/srfi-40/mail-archive/msg00059.html][Monad for lazy evaluation]],
    Scheme, SRFI-40 mail archive, Andre van Tonder
  - [[http://math.andrej.com/2008/11/17/not-all-computational-effects-are-monads/][Not all computational effects are monads]]
  - 2018 Tomas Petricek [[https://arxiv.org/pdf/1803.10195.pdf][What we talk about when we talk about monads]]

*** Result of meeting on 2018-04-21
   :PROPERTIES:
   :CUSTOM_ID: result-of-meeting-on-2018-04-21
   :END:

- https://mvanier.livejournal.com/2897.html
- Applicative Functor is a homomorphism over CCC (Cartesian closed category)?
- We can use a category as the denotation of a functional programming language.

  - An example of a category:

    - One object: Unit
    - One morphism:
    - Two functions:

      - =f0 x = Unit=
      - =f1 x = x=

- What is a CCC? It is a category that satisfies the axioms in [[https://en.wikipedia.org/wiki/Cartesian_closed_category][WP: CCC]].

*** Agenda for 2018-04-21
   :PROPERTIES:
   :CUSTOM_ID: agenda-for-2018-04-21
   :END:

**** Totality is not about termination
    :PROPERTIES:
    :CUSTOM_ID: totality-is-not-about-termination
    :END:

Consider this example.
This recursion is not structural.
However, it terminates under normal-order beta-reduction strategy.

#+BEGIN_SRC haskell
    -- Constant function.
    f : Nat -> Nat
    f _ = 0

    main : Nat
    main = f main
#+END_SRC

Is =main= a total function?
Does that question make sense?
Note that =main= is not a mathematical function.
The denotation of =main= might be a mathematical function.

Does totality depend on the reduction strategy?
Does that question make sense?

I conjecture that every general recursive function can be transformed into its begin-step-end form.
See "Approximating general recursion in TFP".

**** I think we can't add a Lazy Monad instance to Strict Haskell without changing the language semantics
    :PROPERTIES:
    :CUSTOM_ID: i-think-we-cant-add-a-lazy-monad-instance-to-strict-haskell-without-changing-the-language-semantics
    :END:

Here I try to (and fail to) add a Lazy monad to an imaginary language Strict Haskell (SH).

Imagine SH, a language with Haskell syntax
but with Scheme's applicative-order beta reduction (AOBR) instead of Haskell's normal-order beta reduction.
AOBR means: to evaluate =f x=, first evaluate =x=, and then evaluate =f x=.
SH is strict, and Haskell is lazy.

An inhabitant of the type =Lazy a= can be thought as a thunk that will return an inhabitant of =a=.

To construct an expression of type =Lazy a=, combine these: - The expression =bottom= constructs a thunk will fail. - The expression =pure x= constructs a thunk that will return =x=.
Note that =x= is evaluated before the thunk is constructed. - The expression =delay f= constructs a thunk that will return the result of evaluating =f Unit=.
The type of =f= is =Unit -> a=.
Note that =f unit= is not evaluated when the thunk is constructed,
unlike =pure=. - The expression =eval t= evaluates or forces the thunk =t=.
The type of =eval= is =Lazy a -> Maybe a=.

We want to embed laziness into SH.
Formally, this means that we want this equation to hold

#+BEGIN_EXAMPLE
    eval (bottom >>= \ x -> pure c) = Just c
#+END_EXAMPLE

but this is impossible in SH because the =>>== is strict.

However, if the type of =>>== were this

#+BEGIN_EXAMPLE
    (Monad m) => m (Lazy a) -> (Lazy a -> m (Lazy b)) -> m (Lazy b)
#+END_EXAMPLE

then it would be possible to embed laziness into SH.

Thus =Lazy= cannot be a =Monad= instance in SH.

Monads allow embedding a strict language in a lazy language [Wadler1996].
We are trying the reverse (embedding a lazy language in a strict language).
We have just tried the most naive way.
It failed.

**** Does TFP really sacrifice Turing-completeness?
    :PROPERTIES:
    :CUSTOM_ID: does-tfp-really-sacrifice-turing-completeness
    :END:

- What is a rigorous definition of Turing-completeness?

  - [[https://en.wikipedia.org/wiki/Turing_completeness][Wikipedia]]:
    "a system of data-manipulation rules (such as a computer's instruction set, a programming language, or a cellular automaton)
    is said to be Turing complete or computationally universal if it can be used to simulate any Turing machine"

    - What does "simulate" mean?

  - What is the relationship among total Turing machine, partial Turing machine, total function, and partial function?
    See [[https://en.wikipedia.org/wiki/Machine_that_always_halts][Wikipedia: Machine that always halts]].

- Why do you ask this?

  - We've been thinking that totality precludes Turing-completeness, but Conor McBride disagrees in [McBride2015].

*** Results
   :PROPERTIES:
   :CUSTOM_ID: results
   :END:

**** Is continuation the mother of all monads?
    :PROPERTIES:
    :CUSTOM_ID: is-continuation-the-mother-of-all-monads
    :END:

Abdullah wants to prove that continuation is the mother of all monads.

I think I have a partial proof of that for all Haskell-98 type endofunctions.

The folder [[https://github.com/Lambda-Jakarta/research/tree/master/abdullah-conjecture][abdullah-conjecture]]
contains a proposed partial proof of the Abdullah conjecture for all Haskell 98 type endofunctions.
The proof can be checked by the Lean theorem prover version 3.
See also the [[https://leanprover.github.io/][Lean prover home page]].
To edit Lean source files, use Visual Studio Code and its Lean plugin.

*** Reading triage
   :PROPERTIES:
   :CUSTOM_ID: reading-triage
   :END:

[[https://pdfs.semanticscholar.org/b60b/1c2e49ec6f574f220f162c8fdc81b2831830.pdf][1995, D. A. Turner, Elementary Strong Functional Programming]]

[[https://nms.kcl.ac.uk/maribel.fernandez/papers/TCS10.pdf][Godel's System T revisited]]

[[http://semantic-domain.blogspot.co.id/2012/12/total-functional-programming-in-partial.html][Total Functional Programming in a Partial Impure Language]]

[[http://www.cse.chalmers.se/~coquand/bengt.pdf][Type theory and functional programming]]:
Can we see type theory as a functional programming language?

[[http://www.cse.chalmers.se/~coquand/][Thierry Coquand page at Chalmers]]

[[https://mathoverflow.net/questions/126513/categories-of-recursive-functions][MO 126513: Categories of recursive functions]]

[[https://www.researchgate.net/publication/234808984_Denotational_semantics_and_rewrite_rules_for_FP][Denotational semantics and rewrite rules for FP]]:
"We consider languages whose operational semantics is given by a set of rewrite rules."

[[http://www.allisons.org/ll/Semantics/][allisons.org: Denotational Semantics]]

The Y-combinator is \( \lambda f. (\lambda x. f ~ (x ~ x)) ~ (\lambda x. f ~ (x ~ x)) \).
[[https://en.wikipedia.org/wiki/Fixed-point_combinator][WP: Fixed-point combinator]]

[[http://siek.blogspot.co.id/2016/12/simple-denotational-semantics-for.html][Simple Denotational Semantics for the Lambda Calculus, Pω Revisited?]]

*** Undigested information fragments
   :PROPERTIES:
   :CUSTOM_ID: undigested-information-fragments
   :END:

- "Partiality is an effect"
  https://www.cs.ox.ac.uk/ralf.hinze/WG2.8/22/slides/tarmo.pdf
- "Partiality Monad Transformer"
  https://stackoverflow.com/questions/15192897/partiality-monad-transformer
- http://www.cse.chalmers.se/~nad/publications/danielsson-semantics-partiality-monad.pdf
- categorical programming language

  - http://web.sfc.keio.ac.jp/~hagino/thesis.pdf
  - https://mathoverflow.net/questions/3721/programming-languages-based-on-category-theory
  - https://softwareengineering.stackexchange.com/questions/216635/category-theory-based-language

- "Kleisli triple over a category"
- "Category formed by the Kleisli triples over a category"
- Moggi 1991:

  - "Kleisli triples are just an alternative description for monads. Although
    the former are easy to justify from a computational perspective, the latter
    are more widely used in the literature on category theory and have the
    advantage of being defined only in terms of functors and natural transformations, which make them more suitable for abstract manipulation."

- Where does monad come from? Who invented it? Why was it invented?
- What is the relationship among monad, natural transformation, Kleisli category of a monad, Eilenberg-Moore what, adjunction?
- Has some semantics link
  http://math.andrej.com/2016/08/06/hask-is-not-a-category/comment-page-1/
- [[ftp://nozdr.ru/biblio/kolxo3/Cs/CsLn/Mathematics%20of%20program%20construction..%2010%20conf.,%20MPC%202010%20(LNCS6120,%20Springer,%202010)(ISBN%203642133207)(O)(435s)_CsLn_.pdf#page=109][2010, "Subtyping, Declaratively: An Exercise in Mixed Induction and Coinduction", Nils Anders Danielsson and Thorsten Altenkirch]]
** Language design
- https://github.com/mjambon/ocaml-wishlist
** ML/OCaml records vs modules: Why do we have modules if records suffice? An Ocaml "functor" would then simply be a function from records to records.
** Interoperability between programming languages
- <2018-10-04> https://www.thestrangeloop.com/2018/all-the-languages-together.html
  - "Unfortunately, most current languages and toolchains were designed with language interoperability as an afterthought [...]"
  - "This talk is about how to change the status quo to make it easier to build multi-language software."
** Designing configuration languages
  :PROPERTIES:
  :CUSTOM_ID: designing-configuration-languages
  :END:

*** What is a configuration language?
   :PROPERTIES:
   :CUSTOM_ID: what-is-a-configuration-language
   :END:

Configuration language is programming language minus Turing-completeness.

*** What is the best configuration language?
   :PROPERTIES:
   :CUSTOM_ID: what-is-the-best-configuration-language
   :END:

2018-08-31:
[[https://github.com/dhall-lang/dhall-lang][Dhall]] is the pinnacle of configuration languages, in my opinion, as far as I know.

Can a configuration language get any better than Dhall?

How far can we push configuration languages without Turing-completing it?

Dhall isn't the only Turing-incomplete language.
There are also Coq, Lean, Agda, and others.
Can we use these as configuration languages?
Should we?

*** Some rants
   :PROPERTIES:
   :CUSTOM_ID: some-rants
   :END:

Write your configuration in Dhall.
You minimize duplication.
It generates YAML/JSON.

Why stop there?
Replace all your YAML, JSON, XML, INI, PROPERTIES, configurations with Dhall.

2018-08-31:
We're considering HashiCorp Terraform.
I think they should use Dhall, or at least learn from Dhall, instead of creating their own
[[https://www.terraform.io/docs/configuration/syntax.html][HCL (HashiCorp Configuration Language)]].
We have a "Terraform Workaround Engineer" here at work.

Someone has done that: [[https://github.com/blast-hardcheese/dhall-terraform][dhall-terraform]].
** Designing markup languages
  :PROPERTIES:
  :CUSTOM_ID: designing-markup-languages
  :END:

A markup language adds some semantics to text.

- Finding the best document typesetting/processing system

  - What are some markup languages?

    - http://www.nongnu.org/skribilo/
    - markdown
    - reST (restructured text)
    - TeX, LaTeX
    - Unix roff, troff, nroff, man, GNU groff
    - GNU info

- Finding a lightweight semantic markup language with fixed ontology

  - [[https://en.wikipedia.org/wiki/Lightweight_markup_language][WP:Lightweight markup language]]
  - Which markup language?

    - reST
    - [[https://en.wikipedia.org/wiki/Textile_(markup_language)][Textile]]. GitHub Pages stopped supporting this.
    - S-expression
    - not Markdown?
    - https://tiddlywiki.com/static/WikiText.html
    - https://hackage.haskell.org/package/mmark
    - [[https://orgmode.org/][Org mode for Emacs -- Your Life in Plain Text]]

      - [[https://medium.com/@jackbaty/using-markdown-instead-of-org-mode-a78a1805c0ba][Using Markdown instead of Org Mode -- Jack Baty -- Medium]]

  - Which tool?

    - pandoc
    - hakyll

  - Which editor?

    - Vim
    - Emacs
    - Visual Studio Code
    - Too experimental

      - [[https://clearly.pl/tutorial/][clearly.pl]] reminds me of TiddlyWiki.

** Measuring programming language quality by how easy is it to do the right thing
What is the right thing?
*** What is an error?
Unintended behavior?
How do we measure intention?
*** By probability of error of random programs?
How do we measure the probability that a program, uniformly randomly taken from the set of all legal programs in language L, contains an error?
** Class-based programming
  :PROPERTIES:
  :CUSTOM_ID: class-based-programming
  :END:

- What is a class?

  - What is a class?

    - A class is a blueprint (a template).
    - A class is a way of organizing your program.

  - What does a class have?

    - A class has name, fields, and methods.

  - What does a class do?

    - A class groups data and code that needs that data.

- Every object belongs to a class.
- In class-based programming:

  - Objects don't have methods.
  - Classes have instance methods.
  - Each instance method can be called with an instance as a hidden argument.

- From procedural point of view, these two are the same:

#+BEGIN_EXAMPLE
    // Java

    object.method(arg0, arg1, ...)

    // C

    method(object, arg0, arg1, ...)
#+END_EXAMPLE

- The dot is just a syntax for passing an implicit first argument.
- The dot operator associates to the left:

#+BEGIN_EXAMPLE
    a.b().c().d() = ((a.b()).c()).d()
#+END_EXAMPLE
** Benefits and drawbacks of static type checking
The benefits of types:

- Types prevent stupid mistakes.
- Types can be used to improve program efficiency.
- Types are documentation for both human and machine.
  Types communicate intention to both human and machine.

The drawbacks of types:

- Some safe programs don't typecheck.
- Some programs become longer.
  - Haskell's type system complicates the AST decoration problem.
    In TypeScript, the AST decoration problem is trivial;
    you just add a field at runtime.
*** Arguments for static type checking?
**** What?
- There are two camps:
  - DTL (dynamically typed language)
  - STL (statically typed language)
- Every programmer is lazy, but differently.
  - People who use DTLs are too lazy to write the types.
  - People who use STLs are too lazy to do what machines can do, such as
    - detecting typos,
    - avoiding unintentional conversions,
    - tracing the code, 2 weeks later, to find out the type of a variable.
- People who use DTLs are too diligent.
They love to do what machines can do: type checking.
- Static typing enables you to be lazier.
  Help the machine help you avoid work.
  By investing in a few keystrokes, you will get these in return:
- The machine will catch more mistakes for you.
- You can have an IDE that finds references correctly.
  This enables features such as "Jump to definition", "Rename", and even more fancy refactorings.
- Moral of the story:
  - Let the machines do all the boring stuffs.
  - Be future-lazy, not present-lazy.
    Do things now so that you can be lazy later.
    Don't be lazy now only to regret it later.
    - People who organize their things are too lazy to spend mental effort later in a scramble to find things.
    - People who don't organize their things are just too lazy to do it, and would rather just experience regret in the future than experience some hardship now for a better future.
    - The sane solution to "too lazy to write types" is to pick a language with type inference, not to ditch types altogether.
    Don't throw the baby out with the bathwater.
- This argument also applies to functional programming vs procedural programming.
  Indeed this argument applies to every technology.
  Adopting technology enables us to be lazier.
- People buy tractors because they are too lazy to till their fields with hoes.
- People use frameworks because they are too lazy to do the same plumbing again and again.
- People strive to avoid side-effects in functional programming because they are too lazy to debug synchronization errors.
- The only thing the human race isn't too lazy to do is to think about lazier ways of doing things.
**** What?
- https://dimjasevic.net/marko/2018/10/23/typed-functional-programming-and-software-correctness/
  - "what can be done about a programmer’s limited time to write correct software?
    While there are multiple plausible answers to this question,
    I will argue that a very effective solution is to use typed functional programming."
  - 2017 https://dimjasevic.net/marko/2017/11/10/a-subtyping-polymorphism-misfortune/
    - "the interaction between subtyping and parametric polymorphism asks for trouble"
    - type-parameter variance and polymorphism don't mix?
** TODO Measuring programming language quality
- https://en.wikipedia.org/wiki/Goodhart%27s_law
*** Minimum IQ required to understand the language
*** Development cost
**** Length of program
**** Development effort; number of people; amount of time
*** Developer feeling/enjoyment
*** Maintenance cost
**** Cost due to runtime defects (defects discovered while the program is running in production environment)
*** Rosetta Stone: comparing programs that do the same thing in different languages
https://medium.com/concerning-pharo/elegant-pharo-code-bb590f0856d0
*** Learnability, masterability, usability
** Intersection between programming language search and software engineering: The effect of programming language on software quality
- https://developers.slashdot.org/story/14/11/05/0530228/the-effect-of-programming-language-on-software-quality
  - 2014 article "A Large Scale Study of Programming Languages and Code Quality in Github" [[http://web.cs.ucdavis.edu/~filkov/papers/lang_github.pdf][pdf]]
    - I don't know enough to determine whether the methodology is valid.
** Beginning programming language research
- [[https://blog.acolyer.org/2018/01/26/a-practitioners-guide-to-reading-programming-languages-papers/][A practitioner's guide to reading programming languages papers]]
  - from [[https://www.reddit.com/r/ProgrammingLanguages/top/][top scoring links : ProgrammingLanguages]]
- https://waleedkhan.name/blog/getting-a-job-in-pl/
  - https://www.reddit.com/r/ProgrammingLanguages/comments/9ffiky/how_to_get_a_job_in_programming_languages/
** Prolog is ideal for writing a typechecker, and TypeScript is ideal for typechecking AST decorations, so we should fuse Prolog and TypeScript.
Abdullah pointed out to me that TypeScript interface is similar to Ocaml polymorphic variant?
*** But there is Racket and its languages such as ProfessorJ, Datalog.
- "Creating languages" https://docs.racket-lang.org/guide/languages.html
** Racket syntax objects, read-syntax; does Prolog/Haskell have this?
- Must understand: reader and expander.
  - Racket parsing has two stages/levels: reader and expander.
  - (My guess?) The output of the reader is the input of the expander?
- https://docs.racket-lang.org/guide/hash-reader.html
  - "The difference between =read= and =read-syntax= is that read is meant to be used for data while =read-syntax= is meant to be used to parse programs."
  - Readtables work at the reader level.
  - Macros work at the expander level.
    - Macros can't change the lexicon.
** Stop abusing the equals sign
  :PROPERTIES:
  :CUSTOM_ID: stop-abusing-the-equals-sign
  :END:

The equals sign should be used for equations only and nothing else.

Consider this fragment in a hypothetical functional programming language.

#+BEGIN_SRC haskell
    hang : Nat
    hang = hang
#+END_SRC

The fragment =hang = hang= falsely suggests that it is an /equation/ like $x = x$.
We can substitute $x$ with any natural number, and the equation $x = x$ will still hold.
But that is not what we mean with =hang=.
We are defining a /rewrite rule/, not an equation.
Thus we should write =hang => hang= instead.

In an equation, the left and right side are equal.
We don't care if they are flipped.
In a rewrite rule, we care about direction.
We want to start with $1 + 1$ and end with $2$, not the other way,
unless we are writing a theorem prover.

Programming is hard enough already.
Let's not make it harder for students.
Stop using confusing notation.

Reading triage:

- [[https://www.researchgate.net/publication/286418817_Misuse_of_the_equals_sign_An_entrenched_practice_from_early_primary_years_to_tertiary_mathematics][Misuse of the equals sign: An entrenched practice from early primary years to tertiary mathematics]]
** JetBrains MPS
  :PROPERTIES:
  :CUSTOM_ID: jetbrains-mps
  :END:

MPS is "Meta Programming System".

A concept can have properties. Each property has a type.
The property type system is limited to int, string, and regex-constrained string.

A member in a model is an /instance/ of a concept,
similar to how an object is an instance of a class in Java.

MPS is a /tree/ editor, not a text editor.

A concept is an AST (abstract syntax tree) node type.

On 2017-08-12, MPS 2017.2 doesn't support Java 7 try-with-resources statements.

The MPS IntelliJ IDEA plugin allows you to use a language from IDEA,
but not defining your own language.
You need the MPS IDE for that.

*** External links
   :PROPERTIES:
   :CUSTOM_ID: external-links
   :END:

- [[https://confluence.jetbrains.com/display/MPSD20172/Using+MPS+inside+IntelliJ+IDEA][Using MPS inside IntelliJ IDEA]]
- [[https://confluence.jetbrains.com/pages/viewpage.action?pageId=93128576][MPS user guide for Java developers (IntelliJ IDEA)]] (long)
- [[https://confluence.jetbrains.com/display/MPSD20172/Finding+your+way+out][What to do when there is a problem]]
** Problems that the language has to solve
*** Solving the expression problem
*** Solving the AST decoration problem / AST typing problem
- Other names of this problem:
  - [[https://www.reddit.com/r/haskell/comments/1f91w3/the_ast_typing_problem/][AST typing problem]]
  - "Trees that grow" problem
- common problem in parsing: how to decorate AST in a functional language
  - 2013, article, [[http://blog.ezyang.com/2013/05/the-ast-typing-problem/][The AST typing problem]], Edward Z. Yang
    - 2010, discussion, "The AST typing problem", [[http://lambda-the-ultimate.org/node/4170][LTU]]
  - Embracing the Any type
    - [[http://javaparser.org/][JavaParser]] added an =Object data= field to the AST Node base class, but they changed their minds.
      - https://github.com/javaparser/javaparser/issues/456
      - https://github.com/javaparser/javaparser/pull/472
  - Structural typing
    - TypeScript (JavaScript) is ideal for AST decoration problem?
      You just add a key to the AST node object you want to decorate.
      - Any language with structural typing is ideal?
      #+BEGIN_EXAMPLE
          interface Node {
          }

          interface Node_parse extends Node {
          }

          interface Node_desugar extends Node_parse {
          }
      #+END_EXAMPLE
  - Loosely-typed Haskell?
    - This is basically the JavaScript way.
    #+BEGIN_SRC haskell
        type Key = String
        data Value
            = VNum Double
            | VStr String
            | VObj Object
        type Object = [(Key, Value)]
        type Node = Object
    #+END_SRC
  - 2017, article, "Trees that grow", https://www.microsoft.com/en-us/research/uploads/prod/2016/11/trees-that-grow.pdf
    - "The compiler writer is then faced with two unpalatable choices.
      She can define a new data type representing the output decorated tree, at the cost of much duplication.
      Or she can write a single data type with all the necessary fields and constructors, at the cost of having many unused fields and constructors at different stages of compilation."
    - However, we can fake extensible ADTs with pattern synonyms, with Fix, and without type families.
      - Similar endeavors
        - https://wiki.haskell.org/Type_composition
      - Haskell doesn't beta-reduce types.
      - This is an example code:
      #+BEGIN_SRC haskell
          data Exp_ name exp
              = Var name
              | Add exp exp
              | ...

          data Locd a
              = MkLocd Loc a

          data Typed t a = MkTyped t a

          newtype Compose f g a = MkCompose { unCompose :: f (g a) }

          type PsExp name = Fix (Compose Locd (Exp_ name))
          type TcExp name = Fix (Compose Locd (Compose Typed (Exp_ name)))

          -- To ameliorate the verbosity:

          class Exp name exp where
              var :: name -> exp
              add :: exp -> exp -> exp
              ...

          instance Exp (PsExp name) where ...
          instance Exp (TcExp name) where ...
      #+END_SRC
  - What if GHC can "inline" data types at compile time?
    What if GHC can "inline" A and B in =data A = MA Int; data B = MB Int String; data E = EA A | EB B;=,
    producing =data E = EA Int | EB Int String=?
    Implementing this with Haskell 98 types should be straightforward.
  - related - "Data types a la carte" - http://hackage.haskell.org/package/compdata - Haskell type composition - https://wiki.haskell.org/Extensible_datatypes
- Other people's efforts
  - https://brianmckenna.org/blog/type_annotation_cofree
- https://discuss.ocaml.org/t/is-it-feasible-to-write-parsers-without-using-polymorphic-variants-for-ast-representation/1906
**** Other solutions to the AST typing problem / trees-that-grow problem; using recursion schemes for separation of concern in functional programming
- "Program Reduction: A Win for Recursion Schemes" http://www.newartisans.com/2018/04/win-for-recursion-schemes/
  - Annotated expression trees
    - "The first moment when this recursion scheme went from an interesting idea to a good design decision was when someone created an issue on GitHub, asking to add location information to the expression tree."
  - Abstract Definitional Interpreters?
    - 2017 article "Abstracting Definitional Interpreters" https://arxiv.org/abs/1707.04755
  - boilerplate
  - recommends using recursion schemes

That is an interesting idea, but some important questions remain:

- How do we do that without boilerplate (for the library writer)?
- How do we do that without performance penalty?
* What
#+TOC: headlines 2 local
** Introduction
*** Goal
The goal is to build a usable formal language up from lambda calculus.

A /formal human language/ is a formal language that humans use to precisely (unambiguously) communicate technicalities to other humans
in a way that is also feasible to machine translation using classical compiler techniques.
*** Examples of extending lambda calculus
- [[https://sites.ualberta.ca/~jhoover/325/CourseNotes/section/UntypedLambda.htm][Functional Programming - 12. The Extended Untyped lambda Calculus]]
- STLC = simply-typed lambda calculus
- [[https://softwarefoundations.cis.upenn.edu/plf-current/MoreStlc.html][Extending STLC]]
- 1982 article "A consistent extension of the lambda-calculus as a base for functional programming languages", https://www.sciencedirect.com/science/article/pii/S0019995882904582
- "Extending the Lambda Calculus: An Eager Functional Language", [[http://www.cs.yale.edu/homes/hudak/CS430F07/LectureSlides/Reynolds-ch11.pdf][pdf slides]]
**** TODO Study OCaml
Caml begets Caml Light begets OCaml.
- https://ocaml.org/
- [[https://caml.inria.fr/pub/docs/manual-ocaml/coreexamples.html]]
- https://caml.inria.fr/resources/doc/faq/core.en.html
*** Principles
**** Refer to mathematics, logic, and English.
**** Solve the root cause; don't hack.
**** Interoperate with existing systems. Improve existing systems. Enable replacement, but don't require it.

** Functional programming

Every functional programming language is lambda calculus plus plus.

Functional programming is lambda calculus plus plus.
** What we do when we understand programs
When we are trying to understand a program, what we actually do is we run an /abstract interpretation/ of the program in our head.
We /model/ the program in our internal language of thought: logic, most likely first-order logic.
"Abstract interpretation" has a specific meaning; see [[https://en.wikipedia.org/wiki/Abstract_interpretation][Wikipedia]].
** Modeling
#+TOC: headlines 1 local
*** Prolog meta-thinking: logic, language, query, and modeling: how many parameters should we use?
Consider these models:
#+BEGIN_EXAMPLE
0 john_loves_mary
1 john_loves(mary)
2 loves(john,mary)
3 subject_verb_object(john,love,mary)
#+END_EXAMPLE

If we want to pattern match on it, or quantify it (existentially or universally), then it should be a parameter.
Example:
- "Who does John love" can not be answered by 0.
- "Who loves who" can not be answered by 1.
- "Who does what to whom" can not be answered by 2.
- "Who does what to whom at what time" can not be answered by 3.

Thus the number of parameters in our model depends on the complexity of the queries that we anticipate.
Thus when designing a logic program, we should begin with the /queries/ that we want to anticipate.
*** Modeling everything = name-property-value + subject-verb-object + time
Model of everything
Entity-attribute-value
I call it "name-property-value" to get in line with the terms used in philosophy
https://en.wikipedia.org/wiki/Entity%E2%80%93attribute%E2%80%93value_model

name-property-value

"The color of mycar is black."
:- multifile name_property_value/3.
name_property_value(mycar, color, black).
name_property_value(mydb, type, database).
name_property_value(mydb, subtype, postgresql).
name_property_value(mydb, is_a, database).

I think, if the knowledge base is big, it will be very confusing to trace which rule causes which name to have which property.

name_property_value(N, host, V) :-
    name_property_value(N, type, database),
    name_property_value(N, spec, Spec),
    member(host(V), Spec).

"Show me all databases."
?- name_property_value(E, type, database).
% press semicolon repeatedly

"X is a database" vs "The type of X is database" (The attribute "type" of X has the value "database")
** Ramble: What is programming language expressivity?
- Hierarchy of programming language semantics?
  - https://en.wikipedia.org/wiki/Semantic_spectrum ?
- Hierarchy of formal languages
  - https://en.wikipedia.org/wiki/Chomsky_hierarchy
  - Hierarchy of machines recognizing those languages?
    - https://www.reddit.com/r/compsci/comments/35w0du/a_question_about_formal_language_and_automata/
  - https://en.wikipedia.org/wiki/Expressive_power_(computer_science)
  - 1991, Felleisen, "On the expressiveness of programming languages"
    - 1989, Hoare, "The varieties of programming languages"
    - 1988, Williams, "On the formalization of semantic conventions"
- Unread
  - http://fsl.cs.illinois.edu/index.php/Programming_Language_Design_and_Semantics
  - zig is better than go?
    - [[https://news.ycombinator.com/item?id=12378922][HN: Zig: a system language which prioritizes optimality, safety, and readability]]

What if we define language expressivity this way?

"J-expressive" means "expressive with respect to language J (judge)"

Language S (strong) is more J-expressive than language W (weak) iff the shortest interpreter for J in S is shorter than the shortest interpreter for J in W, without caring about speed.

Language A is more complex than language B iff A is more B-expressive than B is A-expressive.

Prolog is simple to reason but hard to implement?
Java is hard to reason but simple to implement?
It is easier to write Prolog interpreter in Java than to write Java interpreter in Prolog.
But how does Prolog's simplicity enables us to write better programs?
If a language is more complex, shouldn't it be more expressive/powerful?
What is the relationship between complexity, expressivity, and power?
What is expressivity?

I can make a language more complex without adding expressivity, by adding features that don't fit with the language?

** Present in ACM SIGPLAN conferences?
ACM SIGPLAN POPL/PLDI/SLE https://www.sigplan.org/Conferences/
seem to be the right conferences to disseminate this idea,
but I should clean up this article first.
** SWI-Prolog stuff?
*** What should SWI-Prolog modules be?
We want these to separate names and referents:
- anonymous modules
- anonymous predicates
- load file content into an anonymous module

consult(++FilePath, --Module)

SWI-Prolog module/1 option of load_files/2 enables the caller to separate a name and a module.
A module still has to be named, but now the module user decides the name.

A module is a dictionary.

SWI-Prolog dynamic module may be saving grace.

Prolog has dynamic scoping.
Dynamic scoping is a mistake.
Prolog should have lexical scoping.

Explicit linking directive
modulename_filepath(foo, library(mylib/foo))

*** Prolog module clash = game over? Can logtalk save the day?
https://logtalk.org/rationale.html
- comparison of the module systems of various Prolog implementations
** Ideas?
The problem of C++ is that it tries to do too much.
** Proglang mess
A Logic Programming Language with Lambda-Abstraction, Function Variables, and Simple Unification

https://pdfs.semanticscholar.org/8935/8a00317f9e380abe02b9f0d04536a6cd3121.pdf

https://www.google.co.id/amp/s/amp.reddit.com/r/ProgrammingLanguages/comments/6gsacs/any_info_on_compiling_lambda_calculus_to_other/
Compiling without continuations


Prolog dcg vs Haskell happy vs parsec
https://www.quora.com/Is-Prolog-still-the-best-logic-programming-language-as-of-2016

https://www.mercurylang.org/documentation/papers.html
http://www.cse.chalmers.se/~oloft/Papers/wm96/node2.html
Google search pure log. pro.

Purifying prolog IO using state threading
Sequential
print(W0,M0,W1), print(W1,M1,W2)
Parallel
print(W0,M0,W1), print(W0,M1,W2), join(W1,W2,W3)


http://batsov.com/articles/2012/02/19/package-management-in-emacs-the-good-the-bad-and-the-ugly/
http://milkbox.net/



Transforming AST to ASG by hashing every syntax element.


The one devops tool to rule them all

DADL is what we want for devops?

Extracting Instruction Semantics via Symbolic Execution of Code
https://github.com/trailofbits/codereason
"CodeReason is a semantic binary code analysis framework and toolset."

Opalang's database support is interesting.

https://opensource.com/tools/supply-chain-management


2006 article "Poitín: Distilling Theorems From Conjectures"
https://www.sciencedirect.com/science/article/pii/S1571066106001149

1984 publication "A Logic for the Russell Programming Language"
https://ecommons.cornell.edu/handle/1813/6433

ICSE 1982 article "Capturing more world knowledge in the requirements specification"
https://dl.acm.org/citation.cfm?id=800254.807765

ICSE 1987 article "Process models, process programs, programming support"
https://dl.acm.org/citation.cfm?id=41765.41767

On the power-series expansion of a rational function
http://matwbn.icm.edu.pl/ksiazki/aa/aa62/aa6233.pdf


- Example of ontology for accomodation; related to data modeling:
http://ontologies.sti-innsbruck.at/acco/ns.html#overview





Should we just use Opa or Ur/Web?
Which should we use, Opa or Ur/Web?
https://en.wikipedia.org/wiki/Opa_(programming_language)
"It can be used for both client-side and server-side scripting, where complete programs are written in Opa and subsequently compiled to Node.js on the server and JavaScript on the client, *with the compiler automating all communication between the two*." (emphasis mine)
https://en.wikipedia.org/wiki/Ur_(programming_language)
"[...] from a single program produces server code, browser client code and SQL code specific for the chosen database backend."

Inspired by English, XQuery, and ML.

Use Landin offside rule to infer closing tags:

#+BEGIN_EXAMPLE
let page title body =
  <html>
    <head>
      <title>{title}</title>
    </head>
    <body>{body}</body>
  </html>
in
if subpath begins with /url1/url2 {
  if subpath begins with /url3 {
    if request method is GET { (* This handles GET /url1/url2/url3 *)
      let strong text = <strong>{text}</strong> in
      page "Hello" <div>{strong "Hello"}</div>
      <html>
        <body>
          {strong Hello}
    }
  }
}

<html>
  <body>
    {strong Hello}

+ GET /url1/url2/url3 {page "title" <strong>hello</strong>}
+ GET /url1/url2/url4 {page "url4" <strong>what</strong>}
#+END_EXAMPLE

We don't need to create a new surface syntax. We can shallow-embed the DSL in Ocaml.

We need a new surface syntax if we want to generate routing data structure at compile time. The choice for the data structures are:
- We can use a hash table.
- We can use a prefix tree.

#+BEGIN_EXAMPLE
match-criteria { what-to-do-if-match }

expr returning node

Program ::= if Condition { Program } | serve PageExp
Condition ::= true | subpath begins with String | client accepts Accept | request method is String
String ::= <non-space>+ | Quote <non-quote>+ Quote
PageExp ::= Node | { MLNodeExp }
#+END_EXAMPLE


- https://stackoverflow.com/questions/26379582/difference-between-munch-and-many-satisfy-p

- https://github.com/jozefg/learn-tt


- "Scala by example" online book


I think most people believe "I don't really understand what my coworkers do but I believe they're doing it well."

- Stages of academic productivity:
    - You don't build on any past work. You start things and abandon them soon after. You redo your own work. You redo others' work without knowing it.
    - You know other people' work, but pride prevents you from even considering to study that work. You want to reinvent everything.
    - You learn to build on your past work.
    - You study other people's work, but you think you can do better.
    - You learn to build on other people's work.
    - You look for others who might share your interests.
    - You don't care whether it's you or someone else who solves the research problem. All you want is to see it solved.

You write a parser in C.
You rewrite the parser in Scheme.
You rewrite the parser again in Haskell.
Then you search for the essence of programming.
Then you stop writing parsers.
Now you write the grammar instead, and find a way to generate the parser from the grammar.
You also look for a way to generate the pretty printer from the grammar.
You find Prolog.

- citizen researcher, "academic spelunker"


https://lptk.github.io/programming/2018/10/04/comprehending-monoids-with-class.html

http://hazel.org/
"Hazel is a live functional programming environment featuring typed holes."

http://tomasp.net/blog/2018/programming-interaction/


1999 article "Essence—An LR Parser Generator for Scheme"
http://s48.org/essence/doc/essence.pdf
"The generated parsers result from the general parser by an automatic program transformation called /partial evaluation/." Holy shit.

https://mortoray.com/2012/07/20/why-i-dont-use-a-parser-generator/
- "One key aspect that bothers me with many of the tools is the requirement to have a distinct first lexing phase." I agree. That requirement is an unnecessary restriction for 2018 computers.



2018 article "SweetPea: A Language for Designing Experiments"


polymorphism
2018 article "A Principled approach to Ornamentation in ML"

POPL 2018 talk "Formal Methods and the Law": formalizing code-based law
"[...] computational analysis of these formalizations may discover previously overlooked tax avoidance techniques."

can ocaml polymorphic variants be used for row-polymorphic record types?

2015 article "A Crash Course on ML Modules"
https://jozefg.bitbucket.io/posts/2015-01-08-modules.html

mapping between Haskell type classes and ML modules
2006 article "Modular Type Classes":
- "We present a smooth integration of type classes and modules that provides a foundation for future work on incorporating type classes into ML and a proper module system into Haskell"
https://people.mpi-sws.org/~dreyer/papers/mtc/main-long.pdf


- "Introduction" http://maude.cs.illinois.edu/maude2-manual/html/maude-manualch1.html
- "Maude is a high-performance reflective language and system supporting both equational and rewriting logic specification and programming for a wide range of applications." http://maude.cs.illinois.edu/w/index.php/Maude_Overview
- "Functional Modules" http://maude.cs.illinois.edu/maude2-manual/html/maude-manualch4.html

"Code of ethics doesn't influence decisions of software developers"
https://www.reddit.com/r/programming/comments/9myr6a/code_of_ethics_doesnt_influence_decisions_of/


miniKanren for compilers?
Relational programming for compiler writing/

2013 article Spoofax vs Xtext
http://msdl.cs.mcgill.ca/people/hv/teaching/MSBDesign/201314/projects/Leonard.Elezi/report/reading_report.pdf

http://flint.cs.yale.edu/cs421/case-for-ml.html
http://troydm.github.io/blog/2014/03/29/writing-micro-compiler-in-ocaml/
https://stackoverflow.com/questions/14632870/creating-a-compiler-learn-ocaml-or-stick-with-java-c-c

https://people.mpi-sws.org/~rossberg/sml-vs-ocaml.html#exceptions

OCaml looks good
ML language family: Why 'a tree instead of tree a?

Spoofax vs Xtext vs MPS?

https://www.metaborg.org/en/latest/
- What you give Spoofax: language definitions.
- What Spoofax gives you: the IDE for the languages.

!!!
Write program transformation systems in Prolog or Mercury.

Clear
https://www.metalevel.at/prolog/data



Logic programming is natural match for program checking.

Transform

entity(Name, Fields)
entity(what,[ [id,int32,nullable], [name,varchar(byte(60))] ]).
each(sql_java_type_eqv, [(int32,int), (int64,long)]).
let(F = long_pred_name, F(int32,int)).

into

field(Entity_name, Field_name, Sql_type,

https://stackoverflow.com/questions/50512673/prolog-variable-as-functor

entity_field(Entity, [Name, Type | Opts])
one_to_many(A, B)
relation_1_n_entity_entity(Rel, A, B)

We can change Prolog's search strategy by using metapredicates? Cite?

Prolog record type?
Prolog beta reduction?
SWI-Prolog has IDEs

"The power of Prolog"
https://www.metalevel.at/prolog
Timeline: Prolog, miniKanren, Godel, Mercury?


https://www.researchgate.net/publication/221266897_A_Compiler_Written_in_Prolog_The_Veda_Experience
http://faculty.cooper.edu/smyth/cs225/ch7/prolog.htm
https://dtai.cs.kuleuven.be/projects/ALP/newsletter/archive_93_96/net/grammars/compiler2.html
https://docs.racket-lang.org/reference/match.html
http://esumii.github.io/min-caml/index-e.html
http://adam.chlipala.net/mlcomp/



External type checking in the style of Erlang Dialyzer.

A type checker is a function from AST to Extended AST.

Resource should be freed as soon as it is not used.

How should we think of compile-time checking?
- Compile-time errors /predicts/ runtime errors.
- Compile-time errors /preclude/ runtime errors.

Type checking is a special case of program checking.

https://medium.com/@daveford/what-i-want-in-a-type-system-1316a78365b


Compile-time is a model of runtime. We don't model hardware errors.

Using DCG to parse CST

The principle: the rules must incorporate the parsed input. Don't remove information.

I changed my mind.
Write a DCG metainterpreter that adds location data to the token stream.
Separate the concerns.

"Separating concerns with metainterpreters" may be a worthy talk.

"Separating cross-cutting concerns with Prolog metainterpreters"

A CST node is either F(Code) or F(Child1, ..., ChildN) where
F is a functor and each ChildK is a CST node
and Code is a character code
An error node is error(Message, A, B)
It means that the parser encounters an error and resyncs to B
A is the offending subinput

exp(plus(M, N)) :- ...
exp(number(F,R)) :- ...
exp(digit(D)) :- ...

Use [plus,M,N] instead of plus(M,N)
Comments

data CST = Space Char | Digit Char | Number CST CST | Plus CST CST | Error Msg CST CST

exp :: String -> CST

It is possible to reconstruct the input string from the CST.


What is the difference between Scheme match library and ML pattern matching?

Experiment

A=[1,2],append(A,B,C) infinite
B=[1,2],append(A,B,C) infinite
C=[1,2],append(A,B,C) infinite
In order for C to be length-ground when append/3 exits:
- A and B are length-ground, or
- C is length-ground.
append(A,B,C)

S ::= <empty> | S a
s(A) :- append([S0,[0'a],S1],A), s(S0), s(S1).



- A terminal cannot be empty.
- Each right-hand side must contain at least one terminal.
  We require that every rule consume at least one character.
  This is so that the recursion is always decreasing.
- The generated parser requires that the input be length-ground.
  If the input is not length-ground, the parser may not terminate.

number ::=
    digit
;   digit, number.

expression ::=
    number
;   expression, "+", expression.

% Preprocessing.

% Terminal.
translate(STRING, t(CODES)) :-
    string(STRING),
    string_codes(STRING, CODES).

% Sequence.
translate((A, B), s(TA, TB)) :-
    translate(A, TA),
    translate(B, TB).

% Choice.
translate((A; B), c(TA, TB)) :-
    translate(A, TA),
    translate(B, TB).

% Nonterminal.
translate(CALL, n(CALL)) :-
    callable(CALL),
    functor(CALL, Name, _),
    \+ member(Name, [',', ';']).

% TODO


% Terminal.

translate(Input, Before, After, STRING, append([Before, CODES, After], Input)) :-
    string(STRING),
    string_codes(STRING, CODES).

translate(V_Input, V_Before, V_After, Call, Phrase) :-
    compound_name_arguments(Call, Functor, Args),
    compound_name_arguments(Phrase, Functor, Args_1),

rule_body__clause_body(Var_Input, Rule_body, Phrase) :- true
    , compound_name_arguments(Rule_body, Functor, Args)
    ,

TODO handle newline
code_location_effect(Code, A, B) :-
location_right(A, B).

node(Loc_before, Loc_after, Input, Remain)

The location can be inferred from the difference list.

node(Input, Remain) :- ..., append(Parsed, Remain, Input). // codes_location(Parsed, Loc0, Loc1)


Embed P in H
Embed H in P
op let 1200
op val 1200

let x = 1.
x(1).
let f(X) = X + 1.
f(X, X + 1).




Extend SWI Prolog checker library
Erlang-Dialyzer-style checker for Prolog



Prolog for computing taxes.
- https://github.com/cbbrowne/canadiantaxes
  - It uses dynamic predicates.


http://www.swi-prolog.org/pack/list?p=func

https://github.com/SWI-Prolog/issues/issues/14

"Prolog's Control Constructs in a Functional Setting — Axioms and Implementation"
https://www.cs.ox.ac.uk/publications/publication1149-abstract.html


Example of using Xtext, MPS, Spoofax
http://voelter.de/dslbook/markusvoelter-dslengineering-1.0.pdf



Software requirement does not change?
It is we who failed to discover the requirement?
It is we who failed to discover the underlying reality?
But how do we distinguish between design and overengineering?


Functional query expression language
all_rows_of(Table)
all(Table)
from(Table)
Table (just Table)
project(Columns, InTable) = OutTable
join(T1,T2)

Relational query formula language
table_row(Table, R)
table_columns_projected(T,C,R)



https://dtai.cs.kuleuven.be/projects/ALP/newsletter/archive_93_96/net/exts/monad.html


Prolog gui in logtalk?

https://stackoverflow.com/questions/19832464/what-are-the-minimum-maximum-integers-in-gprolog
http://www.swi-prolog.org/pack/list?p=plgi
http://lambda-the-ultimate.org/node/3813

Picat language?


Dbpure similar to plspec


"(Parnas, Shore & Weiss 1976) identified five definitions of a 'type'"
https://en.wikipedia.org/wiki/Data_type
* Programming language design mistakes
#+TOC: headlines 1 local
** Justifying the creation of yet another programming language
A new programming language should fix unforeseen design mistakes in existing programming languages.
It should not repeat their design mistakes.
Therefore we should collect the design mistakes so that we can avoid repeating them.

What is a mistake?
How do we know it's a mistake?

We realize something is a mistake when we find a better way.

Mistakes are always discovered by hindsight.
We don't know it's a mistake until long after we have done it.
** Common design mistakes
*** Ignoring programming language theory and research
Some mistakes are because the language designer is ignorant, lazy, or in a hurry.
*** Dynamic typing
    :PROPERTIES:
    :CUSTOM_ID: dynamic-typing
    :END:

Dynamic typing is a design mistake.
Type inference goes back to 1958.
ML has type inference since 1973.
It's 2018.
There is no excuse for ignoring 60 years of research.
See [[https://en.wikipedia.org/wiki/Type_inference#Hindley%E2%80%93Milner_type_inference_algorithm][WP1]],
[[https://en.wikipedia.org/wiki/Hindley%E2%80%93Milner_type_system#History_of_type_inference][WP2]].

*** Lack of metaprogramming support
    :PROPERTIES:
    :CUSTOM_ID: lack-of-metaprogramming-support
    :END:

Lack of metaprogramming support is a design mistake.

*** Lack of symbol overloading (ad-hoc polymorphism)
    :PROPERTIES:
    :CUSTOM_ID: lack-of-symbol-overloading-ad-hoc-polymorphism
    :END:

Scheme and Haskell lack convenient symbol overloading.
Haskell requires you to make a type class for ad-hoc polymorphism.

Without overloading, clashing names need to be prefixed manually.

*** Mutable by default
    :PROPERTIES:
    :CUSTOM_ID: mutable-by-default
    :END:

Having variables mutable by default is a design mistake.

*** Non-first-class constructs
    :PROPERTIES:
    :CUSTOM_ID: non-first-class-constructs
    :END:

Object-oriented programming is a design mistake.

- =a.b()= should not mean "call method b of object a"
- =a.b()= should mean "get the function a.b, then call it".
- =a.b()= should mean =(a.b)()=.

  - =m = a.b; m();= should mean the same as =a.b()=.
  - Functions should be first-class.
    Methods should not exist.
    Fields are enough (with function types).
    It should be possible to assign to methods.

Statements are a design mistake.
They should not exist.
Only expressions should.
[[https://www.eclipse.org/xtend/documentation/203_xtend_expressions.html][Xtend]]
and
[[https://code.haxe.org/category/principles/everything-is-an-expression.html][Haxe]]
do this right. - Can we replace statements with expressions in existing imperative languages without breaking backward compatibility? - But C has [[https://en.wikipedia.org/wiki/Comma_operator][WP:Comma operator]]? - We can use lambda calculus for imperative programming. - Treat the statement separator (here we use semicolon =;=)
as an operator (function with infix syntax)
that sequences the effects of two expressions. - For example: - Let =a= be an expression. - Let =b= be an expression. - Thus =a;b= is an expression. - The value of =a;b= is the value of =b=. - The effect of =a;b= is the effect of =a= followed by the effect of =b=. - Semicolon is associative: =(a;b);c = a;(b;c)=. This also holds for the effects.

*** Virtual machines
    :PROPERTIES:
    :CUSTOM_ID: virtual-machines
    :END:

Virtual machines are a design mistake.
Instead, do semantic mapping: map a program in language A to an equivalent program in language B while preserving the meaning.

*** More than one way to do something
    :PROPERTIES:
    :CUSTOM_ID: more-than-one-way-to-do-something
    :END:

[[https://en.wikipedia.org/wiki/There%27s_more_than_one_way_to_do_it]["There is more than one way to do it"]] is a design mistake.

*** Disallowing multi-line string literals
    :PROPERTIES:
    :CUSTOM_ID: disallowing-multi-line-string-literals
    :END:

Languages should allow CR/LF in string literals.

** Java
   :PROPERTIES:
   :CUSTOM_ID: java
   :END:

- Checked exceptions don't play nice with java.util.Stream.
  Either checked exception or java.util.Stream is a design mistake.

  - https://en.wikipedia.org/wiki/Effect_system

- What others think Java gets wrong

  - http://tech.jonathangardner.net/wiki/Why_Java_Sucks

*** Overcomplicated Java Virtual Machine
    :PROPERTIES:
    :CUSTOM_ID: overcomplicated-java-virtual-machine
    :END:

JVM does too much.
JVM bytecode verification is the compiler's job, not the VM's.
Does JVM bytecode verification even add any security?
Isn't JNI a bigger security hole?

*** Working against programmers
    :PROPERTIES:
    :CUSTOM_ID: working-against-programmers
    :END:

Java presumes that the programmer is not only untrustworthy but also an idiot.

Programmers make mistakes, but they aren't idiots.

- [[https://www.reddit.com/r/programming/comments/utqb/ask_reddit_why_do_so_many_reddit_users_hate_java/cutv1/][Ask Reddit: Why do so many reddit users hate java? : programming]]

  - "Java's solution to the problem of C++ allowing you to blow your foot off was to chop off your legs."

*** Throwing away the good parts of C++
    :PROPERTIES:
    :CUSTOM_ID: throwing-away-the-good-parts-of-c
    :END:

- Forbidding multiple inheritance is a design mistake.
- Java interfaces are a design mistake.
  See 2015 Robert C. Martin article [[http://blog.cleancoder.com/uncle-bob/2015/01/08/InterfaceConsideredHarmful.html][Java interface considered harmful]].
- Implementing generics too late with type erasure.
  [[https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-version-history][C# 2.0 introduced]]
  generics, without type erasure, while maintaining backward compatibility,
  by duplicating everything in System.Collections to System.Collections.Generic.
  This is ugly, but less ugly than type erasure.

  - [[https://stackoverflow.com/questions/11436802/how-are-c-sharp-generics-implemented][SO:How are C# generics implemented?]]

    - [[https://blogs.msdn.microsoft.com/ericlippert/2009/07/30/whats-the-difference-part-one-generics-are-not-templates/][Generics are not templates]]

*** Weak functional programming (allowing partial functions)
    :PROPERTIES:
    :CUSTOM_ID: weak-functional-programming-allowing-partial-functions
    :END:

Allowing partial functions is a design mistake.

** C and C++
   :PROPERTIES:
   :CUSTOM_ID: c-and-c
   :END:

In the 1970s these were tolerable: memory was limited, tools didn't exist.
In 2018 these aren't tolerable.

- Unattainable standard.
  - [[https://stackoverflow.com/questions/5574469/are-there-any-fully-conforming-c-implementations][SO:Are there any fully conforming C++ implementations?]]
- Pile of workarounds.
- C++ compilation is abysmally slow. =#include <iostream>= expands to 10000 lines.
- C pointer declaration syntax for pointers and arrays is a design mistake.
- Conflating pointers and arrays.
- Leaving a lot of things undefined.
- Zero-terminated string is a design mistake.
- Parsing requires symbol resolution and type checking.
- Header files. They should be automatically generated from C files instead.
- Preprocessor works on text, not on C/C++ AST.
** Haskell
- Template Haskell is a mistake.
  - Instead, we should have a metaprogramming library, and generate hs files.
- Haskell compilation is slow.
- Haskell module system is a design mistake.
- GHC: If A depends on B, and B changes without changing API, then A still requires recompilation.
- Bottom inhabits every type including the supposedly empty type =data Void=.
*** Not leveraging user-defined isomorphisms
    :PROPERTIES:
    :CUSTOM_ID: not-leveraging-user-defined-isomorphisms
    :END:

I want this:

#+BEGIN_EXAMPLE
    data A = A0 | A1
    data B = B0 | B1

    isomorphism "iso" between A and B is
        A0 ~ B0
        A1 ~ B1
#+END_EXAMPLE

instead of this:

#+BEGIN_SRC haskell
    data Iso a b = MkIso {
            fwd :: a -> b
            , rev :: b -> a
        }

    iso :: Iso a b
    iso = MkIso ab ba where

        ab :: A -> B
        ab A0 = B0
        ab A1 = B1

        ba :: B -> A
        ba B0 = A0
        ba B1 = A1
#+END_SRC

Explicit isomorphism may help reduce newtype boilerplate.

** what
A problem with current programming methodologies is that they don't capture the higher-level properties of software, such as the architecture.
For example, how do we write, in a way that the computer can exploit, this statement:
"The fields of class C correspond one-to-one with the columns of database table T."?

- Other people's experiences

  - https://www.quora.com/If-you-were-to-design-a-programming-language-what-other-programming-language-would-it-evolve-from-and-what-aspect-of-that-language-would-you-do-differently
  - [[http://beza1e1.tuxen.de/articles/proglang_mistakes.html][5 Mistakes in Programming Language Design ― Andreas Zwinkau]]

    - [[https://news.ycombinator.com/item?id=1500665][Mistakes in programming language design | Hacker News]]

  - [[https://softwareengineering.stackexchange.com/questions/55047/what-is-the-greatest-design-flaw-you-have-faced-in-any-programming-language][What is the greatest design flaw you have faced in any programming language? - Software Engineering Stack Exchange]]
  - [[http://www.inquisition.ca/en/info/gepsypl/rules.htm][Programming Language Design Rules]]
  - 1999 Steele article "Growing a language" [[http://www.catonmat.net/blog/growing-a-language-by-guy-steele/][html]]

https://www.drmaciver.com/2009/01/criticizing-programming-languages/

Lua design mistakes

Picking different syntax for the sake of being different

for elem in table surprisingly doesn't work, but this is for greater cause; the for syntax is surprisingly consistent (iterators, which are coroutines)

Distinguishing statements and expressions

Why do new language designers still repeat design mistakes?
** Lisp design mistake: having separate data and function cell
* Implementing programming languages
** Choosing an underlying technology: Prolog
We should prototype our language in Prolog.

We should implement our language in Prolog.

- 2004, parsing in Prolog, "Parsing and Semantics in DCGs" http://www.inf.ed.ac.uk/teaching/courses/aipp/lecture_slides/11_PS_DCGs.pdf
- Prolog DCG (definite clause grammar) facilitates writing an attribute grammar.
- https://en.wikipedia.org/wiki/Definite_clause_grammar

Erlang started out as a DSL in Prolog.
See 1992 article "Use of Prolog for developing a new programming language".

<2018-10-20>
Change of opinion:
we should write the language in Prolog instead of Haskell.

- "Ott is a tool for writing definitions of programming languages and calculi.
  It takes as input a definition of a language syntax and semantics,
  in a concise and readable ASCII notation that is close to what one would write in informal mathematics."
  https://www.cl.cam.ac.uk/~pes20/ott/

<2018-12-11>
My current answer: Prolog.

My previous answers:
- Haskell
- Racket
- Scheme
- Java
- C
- C++

Other people?
- https://hackernoon.com/the-programming-language-im-looking-for-948d93f7a396
** Principles
- Fast build time is important.
* Camps in programming language design
** General: bottom-up and top-down
Bottom-up language design:
- Begin with physics.
- Claude Shannon abstracted the underlying physics into bits and boolean algebra.
- Machine code.
- Two's-complement signed integers.
- Variables abstract away finite registers.
- Garbage collection abstracts away finite memory.

Top-down language design:
Begin from logic and mathematics, the internal language of thought.
** Camps in declarative languages
There are at least two camps of the declarative programming languages:
- Start from Prolog, move toward Haskell.
- Start from Haskell, move toward Prolog.
  Example: Curry.
* Meta-programming?
miniKanren, scheme logic programming
http://minikanren.org/
https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer

2000 article "Domain Specific Meta Languages"
https://www-users.cs.umn.edu/~evw/pubs/vanwyk00sac/vanwyk00sac.pdf

1996 book "Advanced programming language design"
2008 article "Position paper: Practical foundations for programming languages"
2012 book "Practical Foundations for Programming Languages" Version 1.32 of 05.15.2012
http://profs.sci.univr.it/~merro/files/harper.pdf

University of Arizona, Spring 2006, CS 520 Principles of Programming Languages - Lecture 04: Types and Polymorphism
https://www2.cs.arizona.edu/classes/cs520/spring06/04types.pdf
from "Lecture 4: higher polymorphism"
https://blog.inf.ed.ac.uk/apl16/archives/178/comment-page-1

Programming Language Foundations in Agda https://plfa.github.io/

2018 article "Logic Programming as a Service" https://arxiv.org/abs/1806.02577

Liber amicorum for Doaitse Swierstra
https://www.reddit.com/r/haskell/comments/1hmc9t/pdf_liber_a_for_doaitse_swierstra_read_free/

1994 article "Efficient Self-Interpretation in Lambda Calculus" http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.56.4382&rep=rep1&type=pdf

Lambda the Ultimate: Meta-programming
http://lambda-the-ultimate.org/taxonomy/term/15

2009 article "Directly Reflective Meta-Programming" http://homepage.divms.uiowa.edu/~astump/papers/archon.pdf
* Enterprise applications model extrinsic properties
Specification language
Attempto Controlled English

Parsing with Prolog DCGs

https://philpapers.org/browse/ontology-of-mathematics

"Advances in a DSL for Application Integration"

https://www.itu.int/ITU-D/tech/OLD_TND_WEBSITE/network-infrastructure_OLD/Bangkok-02/5-5_Demo.pdf
http://www.inquisition.ca/en/info/gepsypl/rules.htm


Enterprise applications model extrinsic properties.
The name of a person is an extrinsic property.

Google search of software modeling language
https://en.wikipedia.org/wiki/Modeling_language
https://en.wikipedia.org/wiki/EXPRESS_(data_modeling_language)
https://www.martinfowler.com/articles/languageWorkbench.html
* Growing a programming language?
2006, "A growable language"
"programming language designers should plan for such growth, along with the growth of a user community"
https://dl.acm.org/citation.cfm?id=1176621
