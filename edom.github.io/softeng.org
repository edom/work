#+TITLE: Standardizing software development?
#+DATE: 2018-04-11 00:00 +0700
#+OPTIONS: ^:nil toc:nil
#+PERMALINK: /softeng.html
#+MATHJAX: t
#+TOC: headlines 1
#+TOC: headlines 3
* Goal
The goal is to make /the/ programming language.

/The/ ultimate best programming language?
** What is programming language research for?
A goal of programming language research is to make a better programming language (if not the best).
Do more with less.
** Jargon is necessary for concision (high information transfer rate)
In different fields of studies, we invent jargons for concision, to speed up information transmission, to convey more meaning in shorter time with less words.
** Envisioned usage? Infrastructure engineers and suprastructure engineers?
- Suprastructure software engineer captures business logic into high-level program.
  - Source code should be human-readable article.
  - This steps focuses on describing what things exist and the relationships between them.
  - This steps focuses on modeling.
- Infrastructure software engineer maps high-level languages to low-level languages.
  - Example of low-level programming language: Java, C#, C++, C, SQL, Scheme, Lisp, Haskell.
  - This steps focuses on the modeling language.
- some mention of "suprastructure" and "infrastructure" https://en.wikipedia.org/wiki/Process_architecture
*** Language-oriented programming, domain-specific languages (DSLs)
The 2010 article "Using DSLs for Developing Enterprise Systems" [[https://research.cyber.ee/simpl/enterprise-dsl.pdf][pdf]]:

- It uses the terms "language engineer", "transformation specialist", and "business engineer".
- It defines several usage scenarios of DSLs.
- It defines five criteria for comparing DSL tools.
- It compares some DSL tools.

That paper should have been a wiki article.
** But software engineers can't just assume that users are going to wait forever, that memory is unlimited, that network is always up and fast, etc.?
* What is software engineering?
** What is software?
** What is engineering?
/Engineering/ is?

Engineering implies design goals, tradeoffs, and decisions.

An engineering activity has a goal.
** Ontology and jargon
A /language/ is something that has syntax (form) and semantics (meaning).

A language enables its users to /communicate/ with each other.

A language is formed by the agreements of its users.

A /formal language/ ...

A /programming language/ is a formal language that is used for programming (a machine).

To program a machine is ...?

A /program/ is a formula/string/term in a programming language?

A machine can be modeled by a formal system.

A program is an executable mathematical object?
* Basics
** Who use programming languages?
A programming language serves as a means of communication in three cases:

- human-to-human:
- human-to-machine:
- machine-to-machine:

We advance technologically when we raise the bar for machines (we expect more from machines), not when we expect more from humans.
(?)

* Unsorted things from softeng.md
** Why is hardware more standardized than software?
Hardware standardization benefits everyone (both its makers and its users).
Hardware unstandardization is more expensive than hardware standardization.

Software standardization is more expensive than software unstandardization.

Is software too malleable?

Hardware engineers have standard nuts, bolts, connectors, and components.

Why standardize?

- standardization reduces cost
- standardization reduces duplicate effort
- standardization improves interoperability

Hypothesis:
Programming language is too free.
If programming language is limited (that is, if there is only one way to do one thing),
then software will standardize itself.

There are some software standards, such as ABIs (Application Binary Interfaces).
C calling convention is a standard.
** How do we write lasting software?
- Clear ontology
- Task-oriented documentation
  - Documentation doesn't have to be separate from code.
- /Capture/ the requirement.
  Translate the requirement into software, instead of making a software system that /satisfies/ the requirement.
  - The program may be rewritten, but the functional requirements, the business logic and the mathematical truths rarely change.
    - In order to make software last, we must /capture/ the requirements, not make a system that satisfies the requirements.
      This requires a change in mindset.
      The software is not something made to some requirements; the software is the requirements itself.
      The software is not the shirt made-to-order; the software is the order itself, from which all satisfying shirts can be generated/derived/produced.
- Think for yourself.
  Don't just follow hypes.
  Always have a reason when doing things.
  Record your reasoning for your forgetful future self.
- Design software to be refactored without surprises.
  - Example: Avoid runtime reflection (unless for the most obvious cases).
    An alternative to that is code generation.
    - Help the compiler help you.
    - Even the most obvious cases aren't obvious to someone who see the code for the first time?
- Shorten the edit-compile-test cycle. Design software so that it compiles fast and it starts up fast.
- What else?
** What we know
Adding people to a late software project makes it later (Fred Brooks, "No silver bullet").
Newcoming programmers, no matter how experienced, need time to onboard; they are not immediately productive.
Existing programmers must spend some time helping the newcoming programmers, temporarily reducing productivity even further.
** Readings?
- 2018, book, "The essence of software engineering", [[https://link.springer.com/book/10.1007/978-3-319-73897-0][description]], [[https://link.springer.com/content/pdf/10.1007%2F978-3-319-73897-0.pdf][pdf]]
  - chapter "Escaping Method Prison -- On the Road to Real Software Engineering"
    - some history of software engineering; method wars;
    - some retrospective
    - [[https://semat.org/][SEMAT (Software Engineering Method And Theory)]]
- [[http://www.icse-conferences.org/mostinfluential.html][ICSE (International Conference on Software Engineering) most influential articles]]
  - "ICSE is the flagship conference of [software engineering] [...]." ([[http://www.gousios.org/blog/Report-from-ICSE-2017.html][Georgios Gousios]])
    - 2008, article, "Debugging Reinvented: Asking and Answering Why and Why Not Questions About Program Behavior ICSE-30"
      - https://www.cs.cmu.edu/~NatProg/whyline.html
      - https://github.com/andyjko/whyline
    - 2012, slides, "Connecting Software Architecture to Implementation: The Next 10 Years", [[http://www.cs.cmu.edu/~aldrich/presentations/aldrich-icse-mip-2012.pdf][pdf]]
      - 2002, article, "ArchJava: Connecting Software Architecture to Implementation", [[https://www.ics.uci.edu/~andre/informatics223s2009/aldrichchambersnotkin.pdf][pdf]]
    - 1997, article, "Software processes are software too, revisited", [[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.148.7620&rep=rep1&type=pdf][pdf]]
      - 1987, article, "Software processes are software too", [[http://laser.cs.umass.edu/techreports/1987-LJO.pdf][pdf]]
- 2018, slides, "What would a science of software engineering look like?", [[http://herbsleb.org/web-pres/slides/crowd-chase-2018-final-dist.pdf][pdf]]
- on complexity
  - [[http://www.computing.dcu.ie/~renaat/ca2/ca214/ca214vii.html][Renaat Verbruggen: Three universal methods of reducing complexity]]: partitioning, hierarchy, independence
    - It also applies to other things, such as organizing this wiki.
  - 2000, article, "How complex systems fail", [[http://web.mit.edu/2.75/resources/random/How%20Complex%20Systems%20Fail.pdf][pdf]]
- Meilir Page Jones, "What every programmer should know about object-oriented design"
- How do you know a software is maintainable?
  - Change all the programmers.
    If the new programmers can handle it,
    it's maintainable.
  - The only way to ensure software maintainability is periodic rotation of programmers?
** Old pages
- Things we use, tools and services
  - vim, text editor
  - Management
  - Other opinions
    - .NET stack
      - http://engineering.gopangea.com/stack
      - http://engineering.gopangea.com/2015/12/10/why-dot-net.html
** Developing software for the Web
- [[https://news.ycombinator.com/item?id=11035143][The sad state of web development]] (not everyone agrees).
- It's time to kill the web https://blog.plan99.net/its-time-to-kill-the-web-974a9fe80c89
  - from https://twitter.com/tehjh Jann Horn's Twitter
    - At that time Jann Horn was a member of Google's Project Zero
      https://blog.plan99.net/what-should-follow-the-web-8dcbbeaccd93
- Why not infinite scrolling?
  - Do you have an alternative to infinite scrolling?
  - Do you handle network interruptions?
    How does the user continue scrolling after network connection is restored?
    Is there an unhandled exception in your script?
** Software development woes
- When we write a program,
  we are actually creating a /mathematical model/ of reality,
  creating an implicit ontology,
  defining what exist,
  making simplifying assumptions,
  discarding irrelevant aspects.
** Most "bugs" are actually "programming errors".
Programmers need to own up their mistakes, and call an error an error, not a bug.
A bug is something the programmer cannot control.
A cosmic ray strike flipping a bit in RAM is a bug.
A typo in the source code is not a bug.
** Coupling
- Coupling is deciding what you can depend on.
  - Big Company X just released this new cool stuff, but will it still be there in 5 years?
** Respect legacy code because it works, but don't get too attached to anything.
It may be ugly, but /it works/.
- Is the code really ugly?
  - Are you refusing to read it because it doesn't fit your taste?
    Indent size?
    Snake case vs camel case?
    - Is the code truly unreadable, or are you just an asshole?
      - How hard have you tried?
** Maintainability
- 2017-05-20
  - What helps writing maintainable software?
    - Minimize duplication? The programming language limits deduplication?
    - Facilitate change, minimize ripple due to change
    - Flexibility of a component is proportional to its risk of changing?
** Undigested
- What is a database that can be scaled up without downtime?
  We are willing to sacrifice consistency for tracking data.
- Are we really doing Scrum? http://www.allaboutagile.com/the-scrumbutt-test/
- BPMN tool: camunda editor (bpmn.io).
- The nature of enterprise application is low-sophistication high-plumbing, so we need to make plumbing easy.
  All our programs read data, do something what that data, and write data.
  The most important things are the data and the business logic.
- How to group code? By feature? By dependency? By author?
  - https://en.wikipedia.org/wiki/Feature-driven_development#Build_by_feature
    - "Any function that is too complex to be implemented within two weeks is
      further decomposed into smaller functions until each sub-problem is small enough to be called a feature."
- Grails vs Spring MVC vs Play Framework?
- distributed systems
  - [[https://martinfowler.com/bliki/FirstLaw.html][Martin Fowler's First Law of Distributed Object Design]]: "Don't distribute your objects."
  - http://www.drdobbs.com/errant-architectures/184414966
- Eta is GHC ported to JVM.
  - 2017-01-13: Haskell (~ GHC 7.10.3) on JVM: http://eta-lang.org/docs/html/
- https://blog.codinghorror.com/discipline-makes-strong-developers/
  - Good code is more because of programmer discipline than because of the framework or language.
- Emphasize maintainability, readability, understandability, changeability?
- React reinvents Windows 1.0 (1985) https://bitquabit.com/post/the-more-things-change/
- Ramble
  - Writing software?
    - Minimize build time.
    - Minimize the time from program startup to program ready.
      Otherwise you won't test the program.
    - Understand which parts of the code have more risk.
      Risk is caused by something you don't understand. (Warren Buffett)
    - Minimize the way things can go wrong.
      If you make a variable immutable,
      there are less ways it can go wrong. (?)
    - Explicit is better than implicit?
      Prefer writing boilerplates to magical reflection stuff.
      Let the compiler help you.
      Let compilation error guide refactoring.
    - Minimize duplication?
      Minimize duplication of constants, literals, fragments?
    - Data is more important than code?
      The shape of the data is important?
    - Make every part understandable in isolation?
    - Avoid nulls? If you must use null, document it.
- 2018-05-30
  - Enterprise application stack?
    - Java 8
    - Jetty 9.4 (Servlet API 3.1.0)
    - JPA API 1.0.2 (annotations only)
    - J2HTML
    - PostgreSQL 9.5
    - J2HTML-like for C#
      - https://github.com/HtmlTags/htmltags
    - Java: Install OpenJDK 8, install IntelliJ IDEA, you're all set.
      - IntelliJ IDEA comes with Maven.
    - .NET: Install Mono, install Monodevelop 5.
      - Monodevelop 5 comes with Nuget.
    - Database should be a library, not a stand-alone server.
- software legality?
  - Harmony CLA (Contributor License Agreement)?
- What cause software errors?
  - Programming error: what the programmers think are not what they write.
    Difference between their thought and the computer's actual rules.
    Silent wrong assumption.
  - Contributing factors: bad languages, bad tools.
    - Bad languages make writing correct programs difficult.
  - Errors outside programmer control: cosmic rays, hardware problems
- What is software engineering?
  - Engineering is the application of science.
  - Civil engineering is the application of natural science.
  - Software engineering is the application of computer science.
  - What is science?
    - Science is the application of the scientific method.
    - Science is a mixture of philosophy, mathematics, and experiments.
  - What is software?
    - chapter, "What is software?: The role of empirical methods in answering the question", [[https://link.springer.com/chapter/10.1007/978-3-319-73897-0_4][description]], [[https://link.springer.com/content/pdf/10.1007%2F978-3-319-73897-0_4.pdf][pdf]]
      - "Legislation is (like?) software development."
      - "[Cooking] Recipes are software."
    - The ideal software is easy to change but doesn't change.
      The ideal software captures the essence of the problem.
      The essence of a problem is mathematical definitions.
      Mathematical definitions aren't supposed to change.
    - Software is a model of reality.
    - Software is law?
      Law is software?
      - Similarity between software and law
        - Bad software and bad law both result in unnecessarily slow system.
        - Both are based on logic.
        - Both have an ontology.
        - The law of a country is a big (possibly inconsistent) logic program.
          - The law in writing vs the law in practice
            - I think it is too much for anyone to know all laws that are in effect in a country.
      - Difference between software and law
        - A judge cares about both the letter of the law and the spirit of the law.
        - A computer cares only about the letter of the software.
          There is no such thing as the spirit of the software.
          - A computer does what we write, not what we mean.
            - The programmer follows the computer's rules. Not the other way around.
        - [[https://en.wikipedia.org/wiki/Letter_and_spirit_of_the_law][WP:Letter and spirit of the law]]
    - Software is executable theory of nature.
    - Software is like physics but executable.
    - https://queue.acm.org/detail.cfm?id=2693160
    - https://www.cs.umn.edu/research/research_areas/software-engineering-and-programming-languages
      - "Software is a solution to a computational problem using a formal programming language."
- 2010, article, "We show how symbolic execution and Satisfiability Modulo Theories (SMT) solvers can be gainfully employed to greatly automate software debugging of evolving programs.", [[https://www.sciencedirect.com/science/article/pii/S1571066110001246][downloadable as pdf]]
  - confusing title: "Debugging as a Science, that too, when your Program is Changing"
- Distilling the best practices and standardizing the tools and processes
  - API (application programming interface) information systems, REST clients, REST API debuggers
    - https://insomnia.rest/
      - source code https://github.com/getinsomnia/insomnia
    - https://www.getpostman.com/
      - not open source https://stackoverflow.com/questions/43380313/postman-main-source-code-repository
  - JOOQ
  - https://zachholman.com/posts/deploying-software
  - IDE (integrated development environment)
    - How do we make an IDE?
      Can we generate an IDE from grammar?
  - How do we put academic research into practice?
    - 1995, article, "Deriving specifications from requirements: an example", [[https://dl.acm.org/citation.cfm?id=225016][paywall]]
    - 1998, article, "Architecture-based runtime software evolution", [[https://dl.acm.org/citation.cfm?id=302181][paywall]]
    - 2000, article, "Bandera: extracting finite-state models from Java source code", [[https://dl.acm.org/citation.cfm?id=337234][paywall]]
      - Is this related with C#'s async-await?
  - metaprogramming
    - "Spoon is a library to analyze, transform, rewrite, transpile Java source code (incl Java 9 & Java 10)." [[https://github.com/INRIA/spoon][source]]
- unread
  - long text: [[http://organizationalphysics.com/2016/10/13/top-down-vs-bottom-up-hierarchy-or-how-to-build-a-self-managed-organization/][Top-down vs. Bottom-up Hierarchy: Or, How to Design a Self-Managed Organization]]
- 2014, article, "Bidirectionally tolerating inconsistency: partial transformations", [[http://groups.inf.ed.ac.uk/bx/fase14.pdf][pdf]]
  - 1990, article, "Tolerating inconsistency", Robert Balzer, [[http://gssi.det.uvigo.es/users/jgd/public_html/doctorado_01-02/p158-balzer.pdf][pdf]]
- Don't use GitFlow.
  Use continuous integration and continuous deployment instead.
  - The =master= branch always builds, always runs, and is always releasable.
  - Everything goes to =master=. Sketches, hotfixes, everything.
  - Avoid non-master long-lived branches.
  - It is OK to introduce half-baked code into =master= as long as it doesn't introduce errors.
    - Use feature switch/toggle.
      - Just because code is in =master= doesn't mean it will be run on production.
    - Work-in-progress doesn't have to be full of errors.
  - Discipline yourself to make small commits and avoid big merges.
  - Discipline yourself to make backward-compatible changes, and deprecate things slowly.
    - Give your users time to migrate.
    - If your changes are always backward-compatible, you will never break someone else's code.
  - You can rebase/tidy up commits that you haven't pushed.
  - Merges and rebases produce the same working tree but have different uses.
    - The computer doesn't care whether you merge or rebase.
    - Merges and rebases exist for the humans.
  - 2017, article, [[https://www.gamasutra.com/blogs/NiklasGray/20170927/306445/Moving_away_from_GitFlow.php][Moving away from GitFlow]]
- Comparing build systems?
  - Haskell Shake
  - F# FAKE
  - Apache Buildr
- Does putting on a headphone enhance your focus, even if it isn't playing any sound?
  - How about putting a motorcycle helmet?
- 1999, article, "How enterprises use functional languages, and why they don't", Philip Wadler, [[http://homepages.inf.ed.ac.uk/wadler/papers/how-and-why/how-and-why.pdf][pdf]]
- Optimizing enterprise application development
  - Low-code application development
    - G Suite low-code https://developers.google.com/appmaker/
    - competitor https://www.outsystems.com/platform/#low-code
      - "OutSystems is an open, standards-based platform with no lock-in, no proprietary data models, or proprietary run-time"
- software engineering research, advances in software engineering
  - http://www.sigsoft.org/events.html
  - http://homepage.divms.uiowa.edu/~slonnegr/plf/Book/Chapter7.pdf
- https://blog.codinghorror.com/why-cant-database-tables-index-themselves/
- 2015, PhD thesis, Bergersen, "Measuring Programming Skill: Construction and Validation of an Instrument for Evaluating Java Developers"
  - [[http://folk.uio.no/gunnab/publications/Bergersen2015_PhD_thesis.pdf][pdf]]
  - It's a collection of 4 articles.
  - https://www.duo.uio.no/handle/10852/48583
- 2005, article, "Practical Ontology Systems for Enterprise Application", [[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.622.6490&rep=rep1&type=pdf][pdf]]
- 2006, article, "Applications of Ontologies in Software Engineering", [[https://km.aifb.kit.edu/ws/swese2006/final/happel_full.pdf][pdf]]
- dependency management
  - npm dependency hell, how npm2 works, how npm3 works
    - http://npm.github.io/how-npm-works-docs/theory-and-design/dependency-hell.html
- How do we develop enterprise software with less effort?
  - CRUD should be generated.
    - https://news.ycombinator.com/item?id=15429616
    - http://isis.apache.org/
    - other tools?
  - feature-oriented software development
    - https://en.wikipedia.org/wiki/FOSD_program_cubes
** Amount of testing should be proportional to risk.
- How do we make code testable?
  - Minimize its dependencies.
  - Minimize the number of things that you must set up before you can run it.
  - Why?
    - If you don't satisfy all its dependencies, you can't run it.
    - If you can't run it, you can't test it.
    - If your business logic depends on the database, you'll have to set up a database to test your business logic.
- What do we need to test?
  - Testing is proportional to risk.
    - Riskier code should be tested more.
      - "Risk comes from not knowing what you're doing." (Warren Buffett)
        - Buffett said that for investing, but it also applies to programming.
  - If it's obvious, don't test it. (Getters, setters, and DAOs without fancy logic)
  - If you can prove it, don't test it.
* Functional programming

Every functional programming language is lambda calculus plus plus.

Functional programming is lambda calculus plus plus.

* Beginning programming language research
- [[https://blog.acolyer.org/2018/01/26/a-practitioners-guide-to-reading-programming-languages-papers/][A practitioner's guide to reading programming languages papers]]
  - from [[https://www.reddit.com/r/ProgrammingLanguages/top/][top scoring links : ProgrammingLanguages]]
- https://waleedkhan.name/blog/getting-a-job-in-pl/
  - https://www.reddit.com/r/ProgrammingLanguages/comments/9ffiky/how_to_get_a_job_in_programming_languages/
* 2018-09-12 question for Abdullah
Do you know of anything that computes (generates code for) the products/sums of data-types?
Do you know of any libraries that enable us to describe how to transform a data type to a related data type?
Do you know of anything resembling template metaprogramming for Haskell that is not Template Haskell?
For example:

#+BEGIN_EXAMPLE
    data A = A1 | A2
    data B = B1 | B2

    -- <input>
    generate data P = A * B
    generate data S = A + B
    -- </input>

    -- <output>
    data P  = P_A1_B1
            | P_A1_B2
            | P_A2_B1
            | P_A2_B2

    data S  = S_A1 | S_A2
            | S_B1 | S_B2
    -- </output>
#+END_EXAMPLE
* TODO Compare programming language research journals and conferences
Which ones should we care about?
Which ones are the real deal?
** Conferences
- ICFP: The ACM SIGPLAN International Conference on Functional Programming
- OOPSLA: ACM SIGPLAN Object-Oriented Programming, Systems, Languages & Applications
https://en.wikipedia.org/wiki/OOPSLA
- PLDI: ACM SIGPLAN Programming Language Design and Implementation
http://www.sigplan.org/Conferences/PLDI/
- POPL: ACM SIGPLAN Principles of Programming Languages
http://www.sigplan.org/Conferences/POPL/
** Proceedings
- PACMPL: Proceedings of the ACM on Programming Languages
** DBLP vs Semantic Scholar?
https://dblp.uni-trier.de/
* Intersection between programming language search and software engineering: The effect of programming language on software quality
- https://developers.slashdot.org/story/14/11/05/0530228/the-effect-of-programming-language-on-software-quality
  - 2014 article "A Large Scale Study of Programming Languages and Code Quality in Github" [[http://web.cs.ucdavis.edu/~filkov/papers/lang_github.pdf][pdf]]
    - I don't know enough to determine whether the methodology is valid.
* Measuring programming language quality by how easy is it to do the right thing
What is the right thing?
** What is an error?
Unintended behavior?
How do we measure intention?
** By probability of error of random programs?
How do we measure the probability that a program, uniformly randomly taken from the set of all legal programs in language L, contains an error?
* Other people with related goals
- <2018-10-04> [[http://www.cs.umd.edu/~dvanhorn/][David Van Horn]] "I work toward making the construction of reusable, trusted software components possible and effective"
* Designing the programming language
** <2018-10-20> Change of opinion; We should write the language in Prolog instead of Haskell.
- 2004, parsing in Prolog, "Parsing and Semantics in DCGs" http://www.inf.ed.ac.uk/teaching/courses/aipp/lecture_slides/11_PS_DCGs.pdf
- Prolog DCG (definite clause grammar) facilitates writing an attribute grammar.
- https://en.wikipedia.org/wiki/Definite_clause_grammar
** Programming Languages Zoo
"The Programming Languages Zoo is a collection of miniature programming languages which demonstrates various concepts and techniques used in programming language design and implementation. It is a good starting point for those who would like to implement their own programming language, or just learn how it is done."
http://plzoo.andrej.com/
** Introduction
*** Goal
The goal is to build a usable formal language up from lambda calculus.

A /formal human language/ is a formal language that humans use to precisely (unambiguously) communicate technicalities to other humans
in a way that is also feasible to machine translation using classical compiler techniques.
*** Examples of extending lambda calculus
- [[https://sites.ualberta.ca/~jhoover/325/CourseNotes/section/UntypedLambda.htm][Functional Programming - 12. The Extended Untyped lambda Calculus]]
- STLC = simply-typed lambda calculus
- [[https://softwarefoundations.cis.upenn.edu/plf-current/MoreStlc.html][Extending STLC]]
- 1982 article "A consistent extension of the lambda-calculus as a base for functional programming languages", https://www.sciencedirect.com/science/article/pii/S0019995882904582
- "Extending the Lambda Calculus: An Eager Functional Language", [[http://www.cs.yale.edu/homes/hudak/CS430F07/LectureSlides/Reynolds-ch11.pdf][pdf slides]]
**** TODO Study OCaml
Caml begets Caml Light begets OCaml.
- https://ocaml.org/
- [[https://caml.inria.fr/pub/docs/manual-ocaml/coreexamples.html]]
- https://caml.inria.fr/resources/doc/faq/core.en.html
*** Alternative titles
- "How far can we push Scheme/Lisp?"
*** Principles
**** Refer to mathematics, logic, and English.
**** Solve the root cause; don't hack.
**** Interoperate with existing systems. Improve existing systems. Enable replacement, but don't require it.
*** Other people's opinions about designing programming languages
- http://www.inquisition.ca/en/info/gepsypl/rules.htm
- 2015 dissertation "Evidence-based programming language design: a philosophical and methodological exploration",
  [[https://jyx.jyu.fi/handle/123456789/47698][abstract]],
  [[https://jyx.jyu.fi/bitstream/handle/123456789/47698/978-951-39-6388-0_vaitos04122015.pdf][pdf]]
  - It's mostly philosophy of what "evidence-based" means.
  - It doesn't design a programming language.
  - It could have been shorter.
- https://www.reddit.com/r/ProgrammingLanguages/comments/9ep9xq/what_i_did_not_steal_from_perl_6/
  - "What's a character?" https://www.perlmonks.org/?node_id=1214956
- https://www.reddit.com/r/ProgrammingLanguages/comments/9eqrfy/what_are_the_biggest_problems_with_programming/
- 2017 article "The End of History? Using a Proof Assistant to Replace Language Design with Library Design" [[https://www.cs.purdue.edu/homes/bendy/Fiat/fiat-snapl.pdf][pdf]]
- [[http://purduepl.github.io/index.html][Purdue university programming languages group]]
*** Shopping for ideas
- [[https://www.reddit.com/r/ProgrammingLanguages/comments/8vcrzb/what_are_some_interesting_language_features_that/][What are some interesting language features that may not be well known? : ProgrammingLanguages]]
- https://softwareengineering.stackexchange.com/questions/55047/what-is-the-greatest-design-flaw-you-have-faced-in-any-programming-language
- https://www.reddit.com/r/ProgrammingLanguages/comments/9erq87/languages_with_separate_types_for_pointers_to_the/
- http://math.andrej.com/2009/05/29/mathematically-structured-but-not-necessarily-functional-programming/
- read, "true sums of products" http://hackage.haskell.org/package/generics-sop
** Lambda calculus
Lambda calculus formalizes binding and substitution.

Follow [[https://crypto.stanford.edu/~blynn/lambda/][Ben Lynn's lambda-calculus tutorial]]:

- why use lambda calculus as theoretical basis (cool reasons!)
*** Beta-reduction
- reduce : E -> E
- reduce ((\ x -> y) p) = reduce (y[x:=p])
  - y[x:=p] means y but with every bound occurence of x replaced with p)
- reduce x = x otherwise
** Strings, especially of characters
A /string/ is a homogenous sequence.

A string has a beginning, and may have an ending.
A string may be finite.

A /byte string/ is a sequence of bytes.

An /ASCII string/ is a byte string.

A /character string/ is a sequence of characters.

Unqualified "string" usually means "character string".

A /character string literal/ is surrounded with quotes.
*** Escape sequences
*** Characters
What is Unicode's definition of "character"?
Is that definition sane?

Should Unicode normalization/canonicalization be built into the programming language?

Issues: ordering/collation, capitalization, combination, halfwidthization, ligature, etc.

- https://en.wikipedia.org/wiki/String_(computer_science)
- https://en.wikipedia.org/wiki/Character_(computing)
** Macro, reflection, reification, quoting
The language should be a model of itself.

The language should be able to describe itself.

Does that cause a paradox?
** What program, execution, and termination mean in declarative paradigms

In functional paradigm:

- The program is a big lambda expression.
- Execution is beta-reduction / term-rewriting.
- Execution terminates when the program reaches normal form (is no longer beta-reducible).

In satisfying-logic paradigm:

- The program is a big logic formula.
- Execution is trying to satisfy the formula.
- Execution terminates when satisfiability is determined.

In theorem-proving paradigm:

- The program is a big logic formula, presumably in conjunctive-normal form.
- Execution is trying to prove the main(world) goal.
- Execution terminates when the goal is proved or disproved.

** Records, also for namespaces and modules

We want records because /records obviate namespaces and modules/.

We want namespaces and modules because they are necessary for humans to manage large programs.

*** We don't want to represent records as functions.

We can describe the semantics of a record r as a function r : string -> expression.

There are several options to pretty-print a record:

- Define a =show-record= function that is different from =show=.
- But we want polymorphic =show=. We want one =show= function to work for all things.
- If a record is represented by a lambda abstraction, then pretty-printing the record will pretty-print a lambda abstraction.
  We don't want that.
  We want pretty-printed records to look like how we write records.

*** We want records to be applicable like lambda; we add a new beta-reduction rule for "applying" records.

Record access is function application.
To get the field =fld= or record =rec=, evaluate =rec fld=.

The record =rec= with the the field =fld= updated to =new= is the expression =\ name -> IF name = fld THEN new ELSE rec fld=.

We add this beta-reduction rule:

- If X is a record, and Y is a string, then =X Y= reduces to =get X Y=.

We want to pretend that records are functions.
We want to use records as if they were functions.
But we don't want records to be functions; we want to pretty-print records as records, not as lambda abstractions.

*** Modules as record functions

A module is a function taking a record and giving a record.
The input is called /imports/ or /dependencies/.
The output is called /exports/.

Example:

#+BEGIN_EXAMPLE
\ { add; } -> { add_one: \ x -> add x 1; }
#+END_EXAMPLE

*** Record expressions

We add these expression syntax rules:

- If each of x1,...,xn is a label and each of e1,...,en is an expression, then ={x1:e1; ...; xn:en;}= is a /record expression/.
- =union R S= is a /record union expression/.
- record update expression (should be polymorphic)
- record filtering/selection/intersection expression

An example of a record expression is ={id: \ x -> x; app: \ f x -> f x;}=.

*** Labels

A /label/ is a string.
If the label doesn't contain funny characters, it doesn't have to be quoted.
For example, ={"a":1;}= and ={a:1;}= are the same thing.

Should we generalize label to expression?

** Annotations: user-defined metadata attached to concrete syntax tree nodes

We add these expression syntax rules:

- If M is an expression and E is an expression, then =E : M= (read: data E annotated with metadata M) is an /annotated expression/.
  - Alternative syntax: =E : M= can also be written =meta M E=.

This generalizes type systems.
With type systems, you annotate an expression with a type expression.
With general annotations, you annotate an expression with another expression (some of which are type expressions).

We assume that the outermost metadata update wins:

- meta M (meta N E) = meta M E

We add metadata extraction function symbol =meta-of=.

We add these beta-reduction rules:

- reduce (meta M E) = reduce E
- reduce (meta-of (meta M E)) = reduce M
- reduce (meta-of E) = #<empty-record> (for expressions without metadata)

This is like Java/C# annotation but more principled?

*** Annotation is not type

This is an example of type annotation that our annotation above can't handle: =\ (x : T) -> y=,
because =x= is not an expression.

** Let-expressions

The /let-expression/ =let x1 = y1; ...; xn = yn; in z;= desugars to =(\ x1 ... xn -> z) y1 ... yn=.

Let-expressions is for readability by humans.

Do we still need let-expressions if our program is well-factored?

*** let-expressions may recur

I think letrec is ugly.
All let-expression should allow recursion, like Haskell's.

https://stackoverflow.com/questions/28796904/whats-the-reason-of-let-rec-for-impure-functional-language-ocaml/28798040

** Sharing, laziness, full laziness, complete laziness, and optimal reduction

- https://www.reddit.com/r/haskell/comments/3pa5ii/are_optimal_evaluators_actually_optimal/
  - https://cstheory.stackexchange.com/questions/32850/are-optimal-evaluators-actually-optimal

*** Sharing

- Should the programmer care about sharing?
- sigma-calculus?
- Should the programmer decide whether to share or not?
- Is there a best sharing strategy?
- Should the machine guess by heuristics?

Sharing affects performance, but does not change the result.
Should we care?

*** Example of sharing

Consider the expression letexp defined as =let x = y in z;=.

We want x to be shared iff doing so speeds up the reduction of letexp.

This is always the case:

- If x occurs /at most once/ in z, we always want x not shared.

These depend on circumstances:

- If y is expensive, we want x shared.
- If y is cheap, we want x not shared.

How do we define "expensive"?

*** Lazy accumulation problem

#+BEGIN_EXAMPLE
sum a 0 = a
sum a

sum 0 = 0
sum n = n + sum (n - 1)
#+END_EXAMPLE

** Currying is not compatible with vararg and named parameters?

Vararg stands for "variable-length arguments".

Do we want currying?

Currying simplifies language user but complicates compiler writer.

The problems:

- https://softwareengineering.stackexchange.com/questions/286231/is-it-possible-to-have-currying-and-variadic-function-at-the-same-time
- http://tolmasky.com/2016/03/24/generalizing-jsx/

** Modeling all data

*** Hypothesis: data = ADTs + records + row polymorphism

Hypothesis: All data can be modeled by a combination of these:

- product (tuple)
- sum (alternative, union)
- record (tuple with named components)
- row polymorphism

Can we use web standards to define an ontology (so we can use Protege to edit it)?
https://protege.stanford.edu/

- Does Eclipse EMF have textual representation?

*** Church-representation of products, sums, and algebraic data types in general

https://en.wikipedia.org/wiki/Lambda_calculus#Pairs

Let [x] mean the /representation/ of x.

A /product/ (a,b) can be represented as [(a,b)] = \ f -> f [a] [b].

The left projection p1 is represented as [p1] = \ p -> p (\ a b -> a).

If we assume the sum type A + B, then:

- The choice inl a can be represented as [inl a] = \ f g -> f [a].
- The choice inr b can be represented as [inr b] = \ f g -> g [b].

A recursive data type such as "stream a = (a, stream a)" can be represented as:

- [cons h t] = \ f -> f [h] [t].

Thus [a : b : c : ...] = \ f -> f [a] (\ f -> f [b] (\ f -> f [c] ...)).

A recursive data type such as "list a = nil | cons a (list a)" can be represented as:

- [nil] = \ f g -> f.
- [cons x y] = \ f g -> g [x] [y].

Natural numbers "nat = z | s nat":

- [z] = \ f g -> f.
- [s x] = \ f g -> g [x].

Thus:

- [s z] = \ f g -> g (\ f g -> f)

*** Reverse semantics

Semantics maps syntax to mathematical object.

Reverse semantics maps mathematical object to syntax.
Reverse semantics is representation.
Reverse semantics is realization.

Example of reverse semantics is representing the tuple =(x,y)= with the lambda abstraction =\ f -> f [x] [y]= where =[x]= denotes the representation of x.

https://en.wikipedia.org/wiki/Realizability

*** Self-interpreter

1994 article "Efficient Self-Interpretation in Lambda Calculus"

** Representing knowledge; logic programming; symbolic AI
- https://en.wikipedia.org/wiki/Logic_programming#Knowledge_representation
- https://en.wikipedia.org/wiki/Knowledge_representation_and_reasoning

Example: We encode "a todo item has an int64 id" as

#+BEGIN_EXAMPLE
IF entity todo_app todo E THEN property E int64 id.
#+END_EXAMPLE
** Dynamic binding, contextual holes

- 1996 article "Enriching the lambda calculus with contexts: toward a theory of incremental program construction" https://dl.acm.org/citation.cfm?id=232652
- 1998 article "A lambda-calculus for dynamic binding" https://core.ac.uk/download/pdf/82810390.pdf
- 1998 article "Computing with Contexts: A simple approach" https://core.ac.uk/download/pdf/82065430.pdf
- 2009 article "Two-level Lambda-calculus" https://www.sciencedirect.com/science/article/pii/S1571066109002400

** Working with existing systems
*** Working with Java
** Semantics (should we worry about this earlier?)

*** Cost model

- "Cost models based on the lambda-calculus", [[http://www.cs.cmu.edu/~guyb/papers/lambdaInria.pdf][pdf slides]], from http://www.cs.cmu.edu/~guyb/

*** Denotational semantics

**** Intro to denotational semantics

- 1971, monograph, Dana Scott and Christopher Strachey, "Toward a mathematical semantics for computer languages", [[https://www.cs.ox.ac.uk/files/3228/PRG06.pdf][pdf]]
- [[https://pdfs.semanticscholar.org/presentation/76cd/955ec6dafde3699d64e50882ec7fb4384803.pdf][pdf slides]]
- [[https://www.seas.harvard.edu/courses/cs152/2016sp/sections/sec-2016-02-18-soln.pdf][Exercises]] about denotational semantics and lambda calculus
- 1997, book, "Denotational semantics: a methodology for language development", [[http://www.bcl.hamilton.ie/~barak/teach/F2008/NUIM/CS424/texts/ds.pdf][pdf]]
- 1989, PhD thesis, Frank Steven Kent Silbermann, "A Denotational Semantics Approach to Functional and Logic Programming", chapter 3, [[http://www.cs.unc.edu/techreports/89-030.pdf][pdf]]
  - "A novel approach is taken in constructing an operational semantics directly from the denotational description."

**** TODO Does lambda calculus have a semantics that doesn't depend on reduction strategy?

*** Operational semantics and evaluation/reduction strategy

Which one should we choose, and why?

- call-by-name
- call-by-value
- call-by-need
- what else?

<2018-09-29> Wikipedia needs cleanup:

- https://en.wikipedia.org/wiki/Reduction_strategy_(lambda_calculus)
- https://en.wikipedia.org/wiki/Lambda_calculus#Reduction_strategies
- https://en.wikipedia.org/wiki/Evaluation_strategy

** Overloadable function application?

** Interpreters: Giving different meanings to the same syntax

Sometimes we want to interpret the same syntax (appearance, source code, text) differently.

** System F, System F with subtyping, System F-omega

https://en.wikipedia.org/wiki/System_F

"System F is rich enough that the self-application =\x.x x= is typable." https://crypto.stanford.edu/~blynn/lambda/systemf.html

Brown and Palsberg, "Breaking Through the Normalization Barrier: A Self-Interpreter for F-omega"

** Imperative subset

Haskell's ST monad enables us to embed a local imperative program in a functional program.

** Introduction?

- unknown-year lecture notes "Lambda Calculus as a Programming Language" [[http://andrei.clubcisco.ro/cursuri/2pp/01.Lambda_prog.pdf][pdf]]

I thought lambda calculus could be summarized in one page, but Henk Barendregt wrote hundreds of pages about it. Is there more to lambda calculus than it seems?

- 1994, 50 pages, [[http://www.nyu.edu/projects/barker/Lambda/barendregt.94.pdf][pdf]]
- 1991, 190 pages, [[https://people.mpi-sws.org/~dreyer/tor/papers/barendregt.pdf][pdf]]

** Extending lambda-calculus with various bells and whistles

- Vectorial lambda-calculus

  - The 2013 article "The Vectorial Lambda-Calculus" [[https://who.rocq.inria.fr/Alejandro.Diaz-Caro/TheVectorialCalculus.pdf][pdf]] adds vectors and matrices and their types to lambda calculus.
  - The 2010 article "Semantics of a Typed Algebraic Lambda-Calculus" [[https://arxiv.org/abs/1006.1433][pdf available]] also mentions "vectorial".

- 2016 article "System F-omega with Equirecursive Types for Datatype-Generic Programming" [[http://ps.informatik.uni-tuebingen.de/research/functors/equirecursion-fomega-popl16.pdf][pdf]]

** Lambda calculus semantics?

- https://en.wikipedia.org/wiki/Lambda_calculus#Semantics

  - "In the 1970s, Dana Scott showed that, if only continuous functions were considered,
    a set or domain D with the required property could be found, thus providing a model for the lambda calculus."

    - 1982, [[https://www.sciencedirect.com/science/article/pii/S0019995882800879]["What is a model of lambda calculus?"]]
    - 2008, PhD thesis, [[https://tel.archives-ouvertes.fr/tel-00715207/document]["Models and theories of lambda calculus"]]

      - 2009, [[https://arxiv.org/abs/0904.4756][summary]]

- Paul Hudak, lecture notes, [[http://www.cs.yale.edu/homes/hudak/CS430F07/LectureSlides/Reynolds-ch10.pdf][The Lambda Calculus]]

  - "The Greatest Thing Since Sliced Bread™, or maybe even before it"

- The operational semantics of lambda calculus depends on the evaluation strategy?

  - What-reduction?

    - Normal-order reduction
    - Applicative-order reduction

  - Call-by-what?

    - Call-by-value
    - Call-by-name

** When should we introduce a type system?

- 2005 article "Introduction to Type Theory" [[http://www.cs.ru.nl/~erikb/onderwijs/sl2/materiaal/tt-sl2.pdf][pdf]]

** Optimizing lambda calculus?

- http://thyer.name/lambda-animator/
- http://thyer.name/phd-thesis/
- http://hackage.haskell.org/package/graph-rewriting-lambdascope
- partial evaluation

  - 2010, slides, "O, partial evaluator, where art thou?", Lennart Augustsson, [[http://www.cse.chalmers.se/~palka/Lennarts_talk/PEPM-2010.pdf][pdf]]

    - https://en.wikipedia.org/wiki/Partial_evaluation

      - Futamura projection

  - 1997, article, "Distributed partial evaluation", [[http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.134.1238][citeseerx]]

- Lambda calculus

  - might be related to bottom-up beta substitution

    - Abdullah hinted that BUBS (bottom-up beta-substitution [Shivers2004])
      might be used to make a garbage-free or a fast interpreter.
    - https://en.wikipedia.org/wiki/Strict_programming_language
    - https://en.wikipedia.org/wiki/Lazy_evaluation
    - [[https://memo.barrucadu.co.uk/strict-vs-lazy.html][Strict-by-default vs Lazy-by-default]]
    - https://en.wikipedia.org/wiki/Applicative_computing_systems
    - non-strict, beta reduction, normal order, applicative order
    - The terms "lazy" and "strict" imply operational semantics.
      They are two strategies for beta-reduction.
      "Lazy" is normal-order.
      "Strict" is applicative-order.
    - [[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.90.2386&rep=rep1&type=pdf][An Algorithm for Optimal Lambda Calculus Reduction, John Lamping]]
    - [[http://www.lsv.fr/Publis/PAPERS/PDF/sinot-wrs07.pdf][Complete Laziness: a Natural Semantics, François-Régis Sinot]]
    - http://rochel.info/ graph-rewriting-lambdascope (screenshot): An implementation of an optimal evaluator for the λ-calculus, PDFLambdascope

  - How is lambda calculus algebraic?

    - [[https://www.mscs.dal.ca/~selinger/papers/combinatory.pdf]["The lambda calculus is algebraic", Peter Selinger]]

      - "We argue that free variables should not be interpreted as elements in a model, as is usually done, but as indeterminates."

    - [[https://pdfs.semanticscholar.org/055d/69ee4dc95fbf6457419c90338493667478b1.pdf]["On the algebraic models of lambda calculus", Antonino Salibra]]

      - "The variety (equational class) of lambda abstraction algebras was introduced
        to algebraize the untyped lambda calculus in the same way Boolean algebras algebraize the classical propositional calculus."
        Propositional logic is modeled by Boolean algebra.
        First-order logic is modeled by cylindric algebra?
        Lambda calculus is modeled by lambda abstraction algebra.
        Why algebra? Because it is equational?

    - [[https://en.wikipedia.org/wiki/Algebraic_logic][Wikipedia "algebraic logic"]]
    - [[https://pdfs.semanticscholar.org/7596/19f05a42ff3045bcf87fcaa3edbff01e1130.pdf]["The algebraic lambda-calculus", Lionel Vaux]]
    - [[https://pdfs.semanticscholar.org/44c9/2ad00b8ceba78319005db048b24d61a80748.pdf]["Lambda abstraction algebras: representation theorems", Don Pigozzi, Antonino Salibra]]
    - [[http://www.dsi.unive.it/~salibra/mainfinale.pdf]["Applying Universal Algebra to Lambda Calculus", Giulio Manzonetto, Antonino Salibra]]

  - Dana Scott's PCF; also search the Internet for "the language pcf"
    [[http://www.cs.bham.ac.uk/~mhe/papers/RNC3.pdf]["Introduction to Real PCF (Notes)", Mart'in H"otzel Escard'o]]
  - 1993 John Launchbury [[https://pdfs.semanticscholar.org/492b/200419199892857faa6a6956614641ae9464.pdf][Lazy imperative programming]]

- lambda calculus

  - Church-encoding enables lambda calculus to represent conditionals and algebraic data types.
  - Fixed-point combinators enables recursion and looping.
  - https://en.wikipedia.org/wiki/Lambda_cube
  - https://en.wikipedia.org/wiki/Calculus_of_constructions
  - https://en.wikipedia.org/wiki/Simply_typed_lambda_calculus

    - "The simply typed lambda calculus [...], a form of type theory,
      is a typed interpretation of the lambda calculus with only one type constructor: [...] that builds function types."

      - What is an "interpretation of the lambda calculus"?
      - What is "the lambda calculus"? Is there only one lambda calculus?

  - https://www.reddit.com/r/haskell/comments/8els6f/why_are_combinators_as_powerful_as_full/
  - https://math.stackexchange.com/questions/5639/the-power-of-lambda-calculi
  - Implement lambda calculus.

    - Without dynamic allocation / garbage collection.
    - Translate lambda calculus to assembly

      - Basic idea:

        - Every expression translates to a subroutine.
        - Calling the subroutine ~ evaluating the expression.
        - Subroutine return value ~ value obtained by evaluating the expression.

      - A lambda abstraction translates to a subroutine that accepts one parameter.
      - An application translates to a subroutine call.
      - An int value translates to what? Choice:

        - itself
        - a subroutine that returns the int

    - 2012, article, [[https://arxiv.org/abs/1202.2924]["From Mathematics to Abstract Machine: A formal derivation of an executable Krivine machine"]]

      - https://en.wikipedia.org/wiki/Krivine_machine

** Begin with an interpreter, not a compiler

- Don't make a compiler?
  Make an interpreter instead, and stage it?
  Turn an interpreter into a compiler for free?
- "To stage an interpreter" is to add staging annotations to the code of the interpreter.
- Staging is similar to quoting in Lisp/Scheme.
- 2004 article "A Gentle Introduction to Multi-stage Programming" [[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.103.2543&rep=rep1&type=pdf][pdf]]
  - Basic Problems in Building Program Generators
  - part 2 https://pdfs.semanticscholar.org/aa3c/d4233f7c0db95e5c38d5b8fc1d199df21857.pdf
- multi-stage programming for Scala https://scala-lms.github.io/
- 2006 article "A Verified Staged Interpreter is a Verified Compiler" [[https://www.researchgate.net/profile/Kevin_Hammond/publication/221108683_A_verified_staged_interpreter_is_a_verified_compiler/links/00b7d517ede725c057000000.pdf][pdf]]

** Foreign function interface: working with C

** Ocaml

- https://ocaml.org/learn/

** Reconciling functional and logic programming into declarative programming?

1996 publication "A Note on Declarative Programming Paradigms and the Future of Definitional Programming" [[http://www.cse.chalmers.se/~oloft/Papers/wm96/wm96.html][html]]

*** Example: Representing a predicate in lambda calculus

Lambda calculus with boolean logic extensions:

#+BEGIN_EXAMPLE
p = \ x -> x = "a" OR x = "b"
#+END_EXAMPLE

Prolog:

#+BEGIN_EXAMPLE
p(a).
p(b).
#+END_EXAMPLE

*** Example: Representing a function in logic programming

#+BEGIN_EXAMPLE
inc(X, Y) :- X = Y + 1.
#+END_EXAMPLE

*** The "satisfy" function

The expression "satisfy f" finds all x : a that satisfies f : a -> bool.
Thus the type of "satisfy" is "(a -> bool) -> list a".

It is in principle possible to write such "satisfy" builtin for some lambda expressions.

#+BEGIN_EXAMPLE
satisfy (\ x -> x = "a" OR x = "b")
=> ["a","b"]

satisfy (\ (x : int) -> x >= 10)
=> [10,11,12,...] -- an infinite list

satisfy (\ (x : bool) -> true)
=> [false,true]
#+END_EXAMPLE

*** A function is a relation, a relation is a function, so what?

A function \( (A,B,F) \) is trivially a relation.

A relation \( (A,B,R) \) is a function \( (A,2^B,F) \) where \( F(x) = \{ y ~|~ (x,y) \in R \} \).

** Precise memory accounting

We want precise memory accounting to enable the runtime to limit memory usage.

** Execution state reification, save states, saving and loading states, pausing and resuming computations

We want execution state reification so that we can do live process migration.

** Haskell woes

- [[https://news.ycombinator.com/item?id=5893442][Ask HN: Any downsides of programming in Haskell? | Hacker News]]
- [[https://www.reddit.com/r/haskell/comments/1gknfs/ask_hn_any_downsides_of_programming_in_haskell/][Ask HN: Any downsides of programming in Haskell? : haskell]]

*** Can't import type class instances explicitly

[[https://stackoverflow.com/questions/8728596/explicitly-import-instances][There is a reason]].

** Monads, and Haskell type system limitations

- A monad is a way of /conservatively extending/ all categories. (Abdullah, private correspondence)
- https://www.reddit.com/r/haskell/comments/3h2aqg/can_someone_explain_the_monads_are_generalised/

*** Should Nat (the natural numbers) be a subtype of Int (the integers)?

Intuitively, yes.

*** <2018-10-01> @abdullah Signedness is a monad: conservatively extending naturals to integers

I think this is what we mean when we say "integer is a monad".
I think what we are really trying to say is "signedness is a monad", that is, "we can conservatively extend the naturals to the integers by using the Signed monad".

We can write that in Haskell as follows (with some problems described later).

#+BEGIN_EXAMPLE
data Nat = Zero | Succ Nat
type Int = Signed Nat
data Signed a = Positive a | Negative a

instance Functor Signed ...
instance Applicative Signed ...

instance Monad Signed where
    return = Positive
    m >>= k = join_signed (fmap k m)

join_signed :: Signed (Signed a) -> Signed a
join_signed mm = case mm of
    Positive x -> x
    Negative x -> negate_signed x

negate_signed :: Signed a -> Signed a
negate_signed (Positive x) = Negative x
negate_signed (Negative x) = Positive x

f :: Nat -> Nat
f = ...

f_int :: Int -> Int
f_int = fmap f
#+END_EXAMPLE

We can have Signed Char, Signed String, etc., but those may not make sense.

The problem:
Nat should be a subtype of Int, because everyone who knows arithmetics seems to think that way.
We want f and f_int to be the /same/ function.
We don't want to type fmap, liftM2, and their ilk.
** Abdullah's dream language: Extending System F application beta-reduction rules to automate fmap and extend?
Add these inference rules?
- If =f : a -> b=, and =x : m a=, and =m= is an instance of =Functor=, then =f x= beta-reduces to =fmap f x=.
- If =k : a -> m b=, and =x : m a=, and =m= is an instance of =Monad=, then =k x= beta-reduces to =k =<< x=.

\[
f : a \to b , ~ x : m~a , ~ Functor~m \vdash (f~x \to_\beta fmap~f~x)
\]

Suppose =f : a -> b=, and =x : m (p a)=, and =m= is an instance of =Functor=, and =p= is an instance of =Functor=.

- The rule beta-reduces =f x= to =fmap f x=.
- Problem: The rule interferes with the =Functor= instance of =(->)=.
** Increasing language adoption
*** What
In order for a language to be adopted, people must perceive its risk as low.

The language must work with existing codebases.

The language designer must think from the language user's point of view.
Let's say I have 100,000 lines of Java that I've been writing and testing for the past 5 years.
Are you expecting me throw away all of them?

Thus the language must work with C, C++, C#, Java, Go, JavaScript, Python, Ruby, and everything else.
This should be possible because the essence of all programming languages is the same: every programming language is a formal system.
It should be possible to translate a program P1 in language L1 to program P2 in language L2 with the same semantics.

Improve/enhance, not supersede.

Mixing languages should be easy.

2013, article, "Empirical analysis of programming language adoption", [[http://sns.cs.princeton.edu/docs/asr-oopsla13.pdf][pdf]]

The language must be suitable for systems programming. - System programming is hardware-aware programming.
Application programming assumes abstract machine, infinite memory, and all convenience provided by the operating system. - Why do we make this distinction?

The language must facilitate metaprogramming.
Everything must be a first-class citizen.
It has to have EVAL.
The language must provide a way for interpreting/compiling/loading a program at runtime.
The compiler becomes a part of every program.

What is the reason for the name "metacircular evaluator"?
What is circular?
What is metacircular?

To make syntax first-class, we need QUOTE and UNQUOTE (such as in Lisp/Scheme)?

To prevent syntax flamewar, we should define the canonical linearization of the abstract syntax tree.
Go does this with =go fmt=.
I think that is wise.

- Basic assumptions
  - Computer (machine) is embodied formal system.
    - Assume no hardware fault.
  - Software is executable mathematics.
*** Other people's opinions
- 2012 article "Socio-PLT: Principles for Programming Language Adoption" [[https://lmeyerov.github.io/projects/socioplt/paper0413.pdf][pdf]]
** Finding giants whose shoulders we want to stand on
   :PROPERTIES:
   :CUSTOM_ID: finding-giants-whose-shoulders-we-want-to-stand-on
   :END:

- These languages are interesting starting points:

  - [[https://github.com/ollef/sixten][Sixten]]
  - Dhall
  - [[http://www.haskellforall.com/2014/09/morte-intermediate-language-for-super.html][Morte: an intermediate language for super-optimizing functional programs]]
  - [[https://www.reddit.com/r/haskell/comments/27z7yw/is_there_such_a_thing_as_a_lowlevel_functional/][Is there such a thing as a low-level functional language? : haskell]]
    - ATS and Rust
  - [[https://www.quora.com/What-are-some-of-the-most-abstract-programming-languages-in-2015][What are some of the most abstract programming languages in 2015? - Quora]]
  - Midori
  - Mercury
  - Perl 6?

- Designing programming languages:

  - 2018 article "Interdisciplinary Programming Language Design" [[http://www.cs.cmu.edu/~mcoblenz/HCPLD-preprint.pdf][pdf]]
  - 2018 article "A Programmable Programming Language" [[http://silo.cs.indiana.edu:8346/c211/impatient/cacm-draft.pdf][pdf]]
  - 2018 article "Combining Model Checking and Testing" [[https://www.cis.upenn.edu/~alur/CIS673/testing.pdf][pdf]]
  - 2013 article "Idris, a General Purpose Dependently Typed Programming Language: Design and Implementation" [[https://eb.host.cs.st-andrews.ac.uk/drafts/impldtp.pdf][pdf]]
  - 2007 article "Position Paper: Thoughts on Programming with Proof Assistants" [[https://ac.els-cdn.com/S1571066107002502/1-s2.0-S1571066107002502-main.pdf?_tid=19c6192b-ca57-4ef0-9403-1cfb624c817c&acdnat=1535488824_78a2c31f390f3a1fb72f0c31024f2495][pdf]]
  - 1996 article "Seven Deadly Sins of Introductory Programming Language Design" [[https://pdfs.semanticscholar.org/d314/78c5b95c399b6418b41011debefbc699c633.pdf][pdf]]
  - 1996 book "Advanced programming language design" [[https://www.researchgate.net/profile/Raphael_Finkel/publication/220692467_Advanced_programming_language_design/links/0c96052af3e324bf31000000/Advanced-programming-language-design.pdf][pdf]]
  - 1973 article "Hints on Programming Language Design" [[http://www.dtic.mil/dtic/tr/fulltext/u2/773391.pdf][pdf]]

- Finding recent programming language research:

  - meetings, conferences, symposiums

    - [[https://twitter.com/poplconf?lang=en][POPL on Twitter]].
      Its full name is "ACM SIGPLAN Symposium on Principles of Programming Languages".

  - collections, links, aggregators

    - https://www.cs.cmu.edu/~mleone/language-research.html

- What already exists?

  - [[https://tomassetti.me/resources-create-programming-languages/][68 Resources on creating programming languages]]
  - 2004, book, "Programming language design concepts"
  - https://en.wikipedia.org/wiki/Expression_problem
  - don't repeat yourself

    - https://en.wikipedia.org/wiki/Generic_programming

      - parametric polymorphism

  - Safely Composable Type-Specific Languages https://www.cs.cmu.edu/~aldrich/papers/ecoop14-tsls.pdf

- books

  - books recommended by courses related to programming language research

    - http://plus.kaist.ac.kr/~han/courses/cs520/
    - https://www.cl.cam.ac.uk/teaching/1516/ConceptsPL/
    - https://en.wikipedia.org/wiki/Programming_language_theory#Further_reading

  - 1995, book, "Syntax and semantics of programming languages", Slonneger & Kurtz http://homepage.divms.uiowa.edu/~slonnegr/plf/Book/

- 2017, PhD thesis, [[http://tomasp.net/academic/theses/coeffects/]["Context-aware programming languages"]]

  - [[http://tomasp.net/coeffects/][amazingly empathic considerate presentation that has the audience in mind]]

    - if only all PhD theses are presented that way

      - if only everybody writes that way

- 2014, book, Odersky, "Scala by example"

  - perhaps the best way to learn Scala for non-Scala programmers

- https://en.wikipedia.org/wiki/John_C._Reynolds

  - 2014, [[http://www.cs.bham.ac.uk/~udr/papers/EssenceOfReynolds.pdf][The essence of Reynolds]]

    - 1998, Reynolds, "Theories of programming languages"

- a list of people http://www.angelfire.com/tx4/cus/people/index.html
- other people's collections

  - https://github.com/steshaw/plt

- google search for "haskell code generation"

  - [[https://www.joachim-breitner.de/blog/719-veggies__Haskell_code_generation_from_scratch][veggies: Haskell code generation from scratch -- Blog -- Joachim Breitner's Homepage]]

    - [[https://www.reddit.com/r/haskell/comments/66q87y/veggies_haskell_code_generation_from_scratch/][veggies: Haskell code generation from scratch : haskell]]

  - [[https://www.bytelabs.org/project/haskell-bottom-up-rewrite-generator/][HBURG - Haskell Bottom Up Rewrite Generator | ByteLabs]]

- software development is software too

  - meta-language

    - 2016, "JunGL: a Scripting Language for Refactoring", [[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.94.859&rep=rep1&type=pdf][pdf]]

*** People who share the vision for /the/ programming language

- [[https://brianmckenna.org/blog/polymorphic_programming][Polymorphic Programming - BAM Weblog]]

  - has some links
  - 2017, article, "Compiling to Categories", Conal Elliott, [[http://conal.net/papers/compiling-to-categories/compiling-to-categories.pdf][pdf]]
  - Is this 1969 article related? Can't be found online.

    - https://en.wikipedia.org/wiki/Polymorphic_Programming_Language

  - Are these related?

    - 1989, article, "Database Programming in Machiavelli -- a Polymorphic Language with Static Type Inference", [[http://homepages.inf.ed.ac.uk/opb/papers/SIGMOD89.pdf][pdf]]

- Can we use Description Logic (the theoretical foundations of Web Ontology Language OWL) to generate software, especially enterprise applications?

  - 2015, article, [[https://arxiv.org/abs/1503.01723][[1503.01723] Modelling the Semantic Web using a Type System]]
  - 2005, article, "Software engineering ontologies and their implementation", [[https://espace.curtin.edu.au/bitstream/handle/20.500.11937/9549/19598_downloaded_stream_116.pdf][pdf]], [[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.86.5585&rep=rep1&type=pdf][pdf copy]]

*** People who share some of the vision but don't go far enough

- XForms

  - 2016, article, [[https://link.springer.com/article/10.1007/s11280-015-0339-z][Leveraging declarative languages in web application development - SpringerLink]]
  - 2014, slides, advocacy, [[https://homepages.cwi.nl/~steven/Talks/2014/01-31-declarative/][Declarative Web Applications]]

- 2007, workshop, [[https://www.w3.org/2007/02/dmdwa-ws/][Declarative Models of Distributed Web Applications]]
- [[http://www.proglangdesign.net/][#proglangdesign]]
- IDE (integrated development environment), editor

  - Given a grammar, the computer should generate an IDE for us.
    Syntax highlighting.
    Refactoring.
  - https://hackage.haskell.org/package/treersec "Build a structure editor for a programming language from combinators following the grammar."
  - http://www.lamdu.org/
  - cirru https://news.ycombinator.com/item?id=13773813

    - lots of similar things https://news.ycombinator.com/item?id=13774864

  - isomorf: find code fragment popularity by structure (not-only-text) comparison https://isomorf.io/#!/tours/of/overview/7/haskell

- supercompilation, specialization, partial evaluation

  - Haskell supercompilation?

    - GHC
    - Supero
    - Morte

      - https://github.com/Gabriel439/Haskell-Morte-Library

        - "Morte is a super-optimizing intermediate language for functional languages."

      - http://www.haskellforall.com/2014/09/morte-intermediate-language-for-super.html

  - [[http://thyer.name/phd-thesis/thesis-thyer.pdf][Thyer's PhD thesis "Lazy specialization"]] has an accessible introduction to lambda calculus in Chapter 2.

    - "Tower of interpreters" test
    - 2018, "Collapsing towers of interpreters" http://lampwww.epfl.ch/~amin/pub/collapsing-towers.pdf

      - "It is well known that /staging/ an interpreter -- making it generate code whenever it would normally interpret an expression -- yields a compiler [...]"

  - 1991, "A partial evaluator for the untyped lambda-calculus", [[https://www.cambridge.org/core/journals/journal-of-functional-programming/article/a-partial-evaluator-for-the-untyped-lambda-calculus/EE324F936F0A009B6766B13FF6755DFC][paywall]]

    - related: semantic-directed code generation?

  - Gabriel Gonzales stuff: Morte, Dhall.
  - [[http://lambda-the-ultimate.org/node/2739][LTU: Ongoing work on Supercompilation of Java code (or supercompilation in general)?]]

- [[https://medium.com/@McCosmos/a-treatise-on-cosmos-the-new-programming-language-905be69eb4af][A Treatise on Cosmos ---the New Programming Language]]

  - procedural-looking logic programming language

- syntax

  - [[https://en.wikipedia.org/wiki/Off-side_rule][WP:Off-side rule]], indentation as block delimiter

- [[http://wiki.c2.com/?QuestForThePerfectLanguage][Quest For The Perfect Language]]

** What are some interesting programming languages?
   :PROPERTIES:
   :CUSTOM_ID: what-are-some-interesting-programming-languages
   :END:

- Interesting functional programming languages tailored for web programming.
  Perhaps related to data modeling.

  - Ur/Web

    - [[http://www.impredicative.com/ur/faq.html][FAQ]]

      - "Why would I prefer to use Ur/Web over OPA?"

    - [[http://www.impredicative.com/ur/resources.html][How to Get Started Learning Ur/Web]]

  - [[http://links-lang.org/][The Links Programming Language]]
  - [[http://opalang.org/][The Opa Language]]

- Moving logic into SQL stored procedures

  - [[https://sivers.org/pg][Simplify: move code into database functions | Derek Sivers]]

    - A legitimate concern: How do we version-control (and release, and rollback) stored procedures, triggers, and other database logics?

  - [[https://news.ycombinator.com/item?id=11802917][Andl, a relational language that is not SQL, is coming to Postgres | Hacker News]]

- https://www.microsoft.com/en-us/research/publication/convenient-explicit-effects-using-type-inference-with-subeffects/
- [[https://nikita-volkov.github.io/if-haskell-were-strict/][If Haskell were strict, what would the laziness be like?]]
- http://homepages.inf.ed.ac.uk/wadler/papers/free-rectypes/free-rectypes.txt

*** Do we really have to read these fragmented sources?
    :PROPERTIES:
    :CUSTOM_ID: do-we-really-have-to-read-these-fragmented-sources
    :END:

- [[http://www.cse.chalmers.se/edu/year/2015/course/DAT150/lectures/proglang-12.html][Lecture 12: Design and Evolution of Programming Languages]]

** Making compilers?
   :PROPERTIES:
   :CUSTOM_ID: making-compilers
   :END:

Every compiler does name resolution / symbol table.
Is there a compiler that doesn't do that?
[[https://www.reddit.com/r/Forth/comments/695oik/advances_in_forth_language_design/dh454oq/][Forth?]]

- https://www.reddit.com/r/haskell/comments/4jhhrj/anders_hejlsberg_on_modern_compiler_construction/
- https://cs.stackexchange.com/questions/63018/visual-programming-tools-why-don-t-they-work-with-the-ast-directly
- compiling with continuations

  - Why use CPS (continuation passing style) as intermediate form?

    - http://matt.might.net/articles/cps-conversion/
    - https://www.microsoft.com/en-us/research/publication/compiling-with-continuations-continued/
    - https://news.ycombinator.com/item?id=7150095

  - 2003, retrospective: the essence of compiling with continuations https://users.soe.ucsc.edu/~cormac/papers/best-pldi.pdf

    - https://en.wikipedia.org/wiki/A-normal_form

** After-2018 programming language requirements

*** Ergonomic error handling

- http://joeduffyblog.com/2015/11/03/blogging-about-midori/
  - http://joeduffyblog.com/2016/02/07/the-error-model/

*** REPL (read-eval-print loop)

The language must not preclude making a REPL for it.

REPL is important for immediate feedback, experimentation, exploration, and playing around.

*** Example of mixing nominal and structural subtyping

https://www.eclipse.org/n4js/features/nominal-and-structural-typing.html

*** Programming language should separate modeling and binding. Can we combine dynamic binding and static typing?

Example of binding is =import= statement.

*** Paradigm, approach, viewpoint, worldview?

- graph programming languages

  - https://cstheory.stackexchange.com/questions/3906/what-are-theoretically-sound-programming-languages-for-graph-problems

    - https://www.cs.york.ac.uk/plasma/wiki/index.php?title=GP_%28Graph_Programs%29
    - 2007, PhD thesis, Steinert, [[https://www.cs.york.ac.uk/ftpdir/reports/2007/YCST/15/YCST-2007-15.pdf]["The graph programming language GP"]]
    - a short visual example of "conditional rule schemata"

      - 2010, article, [[https://www.cs.york.ac.uk/plasma/publications/pdf/PoskittPlump.VS-Theory.10.pdf]["Hoare Logic for Graph Programs"]]

    - https://markorodriguez.com/2013/01/09/on-graph-computing/
    - https://en.wikipedia.org/wiki/Gremlin_(programming_language)

- equational programming?

  - 2017-2018, https://www.cs.vu.nl/~tcs/ep/
  - term-rewriting

    - retired, [[http://q-lang.sourceforge.net/][Q language]]

      - http://q-lang.sourceforge.net/examples.html
      - superseded by Pure

        - https://agraef.github.io/pure-lang/
        - https://en.wikipedia.org/wiki/Pure_(programming_language)
        - https://github.com/agraef/pure-lang/wiki/Rewriting

    - Joy

- 2002, article, [[http://www.cs.tufts.edu/comp/150PP/archive/norman-ramsey/pmonad.pdf]["Stochastic Lambda Calculus and Monads of Probability Distributions"]]
- "Purely functional lazy nondeterministic programming", [[https://www.cambridge.org/core/journals/journal-of-functional-programming/article/purely-functional-lazy-nondeterministic-programming/1E8BA117E549A9612BC4AF9804E5507A][paywall]]
- relational programming (pure logic programming?)

  - miniKanren

    - Byrd PhD thesis https://scholarworks.iu.edu/dspace/bitstream/handle/2022/8777/Byrd_indiana_0093A_10344.pdf

      - mentions other programming languages: Prolog, Mercury, Curry

- https://en.wikipedia.org/wiki/Multi-adjoint_logic_programming
- ramble

  - https://www.researchgate.net/project/Ontology-oriented-programming
  - http://www.doc.ic.ac.uk/~klc/OntProg.html

*** Low-code? Programming for the masses?

Limited programming?

What can we assume about the user's skill/knowledge/background?

- https://en.wikipedia.org/wiki/End-user_development
- https://en.wikipedia.org/wiki/Low-code_development_platforms
** Implementing programming languages
- "Ott is a tool for writing definitions of programming languages and calculi.
  It takes as input a definition of a language syntax and semantics,
  in a concise and readable ASCII notation that is close to what one would write in informal mathematics."
  https://www.cl.cam.ac.uk/~pes20/ott/
** Toward a language with first-class syntax?
   :PROPERTIES:
   :CUSTOM_ID: toward-a-language-with-first-class-syntax
   :END:

- composable grammars?

  - 2013, article, Viera & Swierstra, "First Class Syntax, Semantics, and Their Composition" http://www.cs.ru.nl/P.Achten/IFL2013/symposium_proceedings_IFL2013/ifl2013_submission_21.pdf

    - 2013, PhD thesis, Viera, "First Class Syntax, Semantics, and Their Composition" file:///home/erik/Downloads/viera.pdf

  - 1990, [[https://authors.library.caltech.edu/26726/]["A Primer for Program Composition Notation"]]
  - https://stackoverflow.com/questions/953185/composable-grammars
  - OMeta
  - Programming languages with programmable syntax

    - [[http://chrisseaton.com/katahdin/][Katahdin]]

  - parsing expression grammar, packrat

    - "Parsing ought to be easier"

      - https://news.ycombinator.com/item?id=2330830

        - "PEGs are one class of cleanly composable grammars."?

  - http://www.cs.cmu.edu/~Compose/
  - cryptographic protocol analysis

    - https://en.wikipedia.org/wiki/Universal_composability

- Programming languages with macros

  - Common Lisp
  - Scheme
  - Kotlin?
  - Clojure?
  - Scala? https://www.scala-lang.org/blog/2017/11/27/macros.html

** Enabling metaprogramming
   :PROPERTIES:
   :CUSTOM_ID: enabling-metaprogramming
   :END:

- [[https://stackoverflow.com/questions/50490883/why-is-ml-called-meta-language][metaprogramming - Why is ML called Meta-Language? - Stack Overflow]]
- related?

  - https://github.com/PostgREST/postgrest
  - http://rosecompiler.org/

- Metaprogramming

  - http://kaitai.io/

    - from description, generate parsers for binary data (as opposed to text data)

- Aspect-oriented programming is a restricted form of metaprogramming.

  - relationship between Aspect-Oriented Programming and Functional Programming

    - 2009, article, "What Does Aspect-Oriented Programming Mean for Functional Programmers?", [[https://www.cs.ox.ac.uk/files/2282/wgp14-wang.pdf][pdf]]
    - 2008, article, "On Feature Orientation and Functional Programming", [[https://pdfs.semanticscholar.org/522e/b6c2ea910ed074a13fe21767c9fa070fb685.pdf][pdf]]
    - 2016, article, "Realtime collaborative editor. Algebraic properties of the problem.", [[http://blog.haskell-exists.com/yuras/posts/realtime-collaborative-editor.html][html]]

      - see also Darcs patch theory

    - 2008, PhD thesis, "An Integrated System to Manage Crosscutting Concerns in Source Code", [[http://wwwtmp.st.ewi.tudelft.nl/arie/phds/Marin.pdf][pdf]]
    - 2003, article, "Language-independent aspect-oriented programming", [[http://www.tara.tcd.ie/handle/2262/32627][pdf available]]

- Java metaprogramming

  - Similar products

    - libraries

      - [[https://github.com/INRIA/spoon][INRIA Spoon]]
      - The =javax.lang.model= package of the Java standard library, but it does not model method bodies.

    - environments

      - [[http://www.eclipse.org/modeling/emf/][Eclipse Modeling Framework (EMF)]]
      - [[https://www.jetbrains.com/mps/][JetBrains MPS (Meta Programming System)]]
      - [[http://strategoxt.org/][Stratego/XT]]
      - TXL
      - [[http://www.eclipse.org/Xtext/][Eclipse Xtext]] and [[http://www.eclipse.org/xtend/][Eclipse Xtend]]

    - programming languages

      - Eclipse Xtend

    - parser generators

      - [[https://en.wikipedia.org/wiki/Compiler-compiler][WP:Compiler-compiler]]
      - [[https://en.wikipedia.org/wiki/Comparison_of_parser_generators][WP:Comparison of parser generators]]
      - [[http://www.antlr.org/][ANTLR (Another Tool for Language Recognition)]]
      - [[https://javacc.org/][JavaCC]]
      - YACC, Bison; with Lex, Flex

  - Related concepts

    - Model-driven development
    - Model-driven architecture

** Automatic (program) differentiation
   :PROPERTIES:
   :CUSTOM_ID: automatic-program-differentiation
   :END:

- What is the relationship between incremental lambda-calculus and automatic differentiation of programs (or of algebraic data types)?

** Extending functions
   :PROPERTIES:
   :CUSTOM_ID: extending-functions
   :END:

Not only classes, but also functions, should be extensible.

"To extend the function \( f : A \to B \) to the function \( f' : A' \to B' \)" means:

- For every \( x \in A \), we have \( f(x) = f'(x) \).
- \( A \subseteq A' \).
- \( B \subseteq B' \).

A consequence:
Every occurrence of \( f \) can be replaced with \( f' \) while preserving the meaning of the containing expression.

** Is inheritance subtyping?
   :PROPERTIES:
   :CUSTOM_ID: is-inheritance-subtyping
   :END:

The short article [2] basically tells the user to read AbdelGawad's other works.

- [1] 1989, "Inheritance is not subtyping", [[https://www.cs.utexas.edu/users/wcook/papers/InheritanceSubtyping90/CookPOPL90.pdf][pdf]]
- [2] 2013, "Inheritance is subtyping", [[https://pdfs.semanticscholar.org/569c/9b35375144756761167fd4a2571b1d97f0e8.pdf][pdf]]
- [[https://www.cmi.ac.in/~madhavan/courses/pl2009/lecturenotes/lecture-notes/node28.html][Subtyping vs inheritance]]

  - Subtyping and inheritance are orthogonal concepts.

A language should provide both nominal and structural subtyping.

- 2008, "Integrating Nominal and Structural Subtyping", [[http://www.cs.cmu.edu/~aldrich/papers/ecoop08.pdf][pdf]]

We can define structural subtyping for C structs.

We can define layout types (almost like ASN.1):

#+BEGIN_EXAMPLE
    layout {
        at byte 0;
        def var0 : little_endian int32;
        at byte 4;
        def var1 : big_endian int32;
        reserve 8 byte;
        skip 4 byte; -- synonym for reserve
        def var2 : int8;
        def var3 : array of 4 int8;
        align 16;
        def var4 : layout {
            reserve 16 byte;
            def var1 : int8;
            align 32;
        };
    }
#+END_EXAMPLE

We can define intersection, union, concatenation, and composition/nesting of two layout types.

Why don't we just build ASN.1 into the language?

- [[http://whiley.org/2010/12/13/why-not-use-structural-subtyping/][Why not use Structural Subtyping?]]

  - What is it trying to say?

** Maximum polymorphism?
   :PROPERTIES:
   :CUSTOM_ID: maximum-polymorphism
   :END:

- Read this: [[https://blog.inf.ed.ac.uk/apl16/archives/178/comment-page-1][Lecture 4: Higher Polymorphism | Advances in Programming Languages]]
- [[https://github.com/lampepfl/dotty/issues/1886][Rethink Structural Types · Issue #1886 · lampepfl/dotty]]

  - "However, there is another area where statically-typed languages are often more awkward than dynamically-typed ones: database access."
  - Keynote - What's Different In Dotty by Martin Odersky https://www.youtube.com/watch?v=9lWrt6H6UdE

** Typing records
   :PROPERTIES:
   :CUSTOM_ID: typing-records
   :END:

A record type can be thought as a product type whose components are named.

If each value =valN= has type =typN=, then the record ={key1=val1; key2=val2; ...;}= has type ={key1:typ1; key2:typ2; ...;}=.
For example, the record ={name="John"; age=20}= has type ={name:String; age:Int;}=.

** Polymorphism is code generation
   :PROPERTIES:
   :CUSTOM_ID: polymorphism-is-code-generation
   :END:

- Consider translating =id : a -> a= to assembly.

  - If types define memory layout (bit representation), then the compiler must generate an =id= function for every =a=.
  - If the language uses runtime type tagging, then there doesn't have to be more than one=id= functions.

** Fixed points and recursive types
   :PROPERTIES:
   :CUSTOM_ID: fixed-points-and-recursive-types
   :END:

A thing \( x \) is a /fixed point/ of function \( f \) iff \( f(x) = x \).

A function may have zero, one, or many fixed points.

A thing \( x : A \) is a /least fixed point/ of function \( f : A \to A \) iff
\( x \) is a minimum of the set of the fixed points of \( f \).
The words "least" and "minimum" assume an ordering \( \le \).
This ordering should be clear from context.

If \( f \) has exactly one least fixed point \( x \) with respect to ordering \( \le \), then we write \( \mu_\le(f) = x \).

The syntax \( \mu a. b \) means \( \mu_\le(\lambda a. b) \).
The syntax \( \mu a. b \) is analogous to lambda expression syntax \( \lambda a. b \).

What is the ordering used in formulating the least fixed point of a recursive algebraic data type?

todo: equirecursive types and isorecursive types

** A sketch about reusable language-oriented programming: CommonMark, Liquid, and Jekyll, reusable grammar?
   :PROPERTIES:
   :CUSTOM_ID: case-study-commonmark-liquid-and-jekyll-reusable-grammar
   :END:

I want something like this:

#+BEGIN_EXAMPLE
    data CommonMark = ... -- CommonMark AST
    data Liquid = ... -- Liquid AST
    type Jekyll = CommonMark + Liquid

    parse_cm : String -> Parser CommonMark
    parse_lq : String -> Parser Liquid
    parse_jk : String -> Parser Jekyll
    parse_jk = parse_cm + parse_lq
#+END_EXAMPLE

- [[https://stackoverflow.com/questions/953185/composable-grammars][design - Composable Grammars - Stack Overflow]]
- [[https://jeffreykegler.github.io/Ocean-of-Awareness-blog/individual/2015/12/composable.html][Grammar reuse]]
- [[https://github.com/melt-umn/silver][melt-umn/silver: An attribute grammar-based programming language for composable language extensions]]
- OMeta, Katahdin
** Some tentative plans: Create a language that compiles to Haskell?
- [[https://github.com/bennofs/haskell-generate][bennofs/haskell-generate: Type-safe library for generating haskell source code]]
** Whole-program optimization?
   :PROPERTIES:
   :CUSTOM_ID: whole-program-optimization
   :END:

- https://stackoverflow.com/questions/3416980/why-arent-whole-program-optimizations-more-prevalent-now/27757382

** TODO <2018-09-15> Make the programming language
- cite:DBLP:conf/popl/CookHC90
- cite:cartwright2013inheritance
** TODO <2018-09-15> Find out how type systems may guarantee pointer safety
Is escape analysis the only way?
*** TODO <2018-09-15> Study Sixten type system
*** TODO <2018-09-15> Study Rust type system
See [[https://doc.rust-lang.org/reference/type-system.html][Rust type system reference]].
** Combine things and let the programmer choose?
*** Combine nominal subtyping and structural subtyping
** from module.md (Designing module systems)
What is a module?
Or, should we be asking these questions instead?

- How do we decompose a program? (I think David Parnas has answered this.)
- Why do we need modules?
- How do we organize programs?

Modules reduce complexity by partitioning and independence.
See [[http://www.computing.dcu.ie/~renaat/ca2/ca214/ca214vii.html][Three Universal methods of reducing complexity]]
from the course [[http://www.computing.dcu.ie/~renaat/ca2/ca214over.html][CA214 Systems Analysis and Design Page]].

What do others say?

- [[https://en.wikipedia.org/wiki/Module][Wikipedia]]
- According to [[https://en.wiktionary.org/wiki/module][Wiktionary]]:

  - The word "module" is from Latin "modulus" that means "a small measure".
  - A module is "a self-contained component of a system, often interchangeable, which has a well-defined interface to the other components".

- [[https://www.dictionary.com/browse/module][dictionary.com]]

What do we infer?

- We can develop different modules at the same time.

*** Philosophical investigation
   :PROPERTIES:
   :CUSTOM_ID: philosophical-investigation
   :END:

- What are the properties of a module?
- What are its relationships with other things?

  - interchangeability

- A module groups things.

  - Is this essential or accidental?
    Is it made for grouping?
    Is grouping only a side-effect?

- What can we do with modules?

  - We can combine modules.
  - We can shadow modules.
  - We can link modules.
  - We can embed/inline modules.

- A module is an incomplete/dependent piece of functionality/code.

  - A module may have unresolved symbols?

- A module is a decomposition of a program?
- Module is about reusability?
- A program is a module and a starting point.
- A module specifies a contract.
  A module can be swapped with another module that satisfies the same contract without changing the correctness of the program.
- A module is a bunch of imports and exports?
- A module is smallest unit of reuse? Isn't that function?
- A module is smallest unit of compilation? Isn't that function?

*** Modules are for humans
   :PROPERTIES:
   :CUSTOM_ID: modules-are-for-humans
   :END:

Computers don't need modules.
All it needs is a sequence of machine codes.

A program is a lambda expression.
A big program is a big lambda expression.
Given enough memory, a computer can handle arbitrarily big lambda expressions.

Human uses modules for organizing things.
Human uses modules to make machines separate compilation, speed up recompilation, and recompile a part of the program.

- Does a module have to coincide with a compilation unit?
- Basic module functions?

  - How does a code describe its dependencies?
  - How does the machine disambiguate names?
  - Functions should be versioned. Not module. Not package.
    Version describes semantics.

Module is second-order logic programming?
Note below, that the same =Plus= is used as both a variable and a predicate.

#+BEGIN_EXAMPLE
    export(module_name, type, name, value).

    export(prelude, int, plus, Plus) |- export(my_module, int, three, Plus(1, 2)).
#+END_EXAMPLE

- The smallest unit for this discussion is a machine instruction.
- A subroutine is a collection of instructions.
- A library is a collection of subroutines.
- A program is a collection of libraries and an entry point.
- History

  - The initial motivation was to reuse.

    - Reduce development cost.

      - Humans have always been looking for easier ways to live.
        This "laziness" (the ability to get bored repeating something) is the source of all human technology.

  - The next motivation was to reduce disk and memory usage.

- The essence of programming-in-the-large is Don't Repeat Yourself?

*** Comparing existing module systems
   :PROPERTIES:
   :CUSTOM_ID: comparing-existing-module-systems
   :END:

How do programming languages deal with modules?

- [[https://github.com/dhall-lang/dhall-lang/issues/182][dhall modules · Issue #182 · dhall-lang/dhall-lang]]
- [[https://futhark-lang.org/blog/2017-01-25-futhark-module-system.html][Futhark]]
- [[https://elixir-lang.org/getting-started/modules-and-functions.html][Elixir]]

  - [[https://hexdocs.pm/elixir/Module.html][Module -- Elixir v1.7.2]]

- Racket

  - 2011, article, "Languages as Libraries", [[http://www.cs.utah.edu/plt/publications/pldi11-tscff.pdf][pdf]]

- Scheme R7RS, Common Lisp, Clojure
- Java, Scala, Kotlin, Go, C, C++

  - C ABI

    - A module is an ELF shared object file (SO file).

- Pascal, Ada, Oberon, Algol, Fortran
- JavaScript, TypeScript, ECMAScript
- Standard ML, Caml, OCaml, MLTON, SML/NJ, F#

  - 2000, "A modular module system", [[https://hal.inria.fr/hal-01499946/document][pdf]]

    - "Harper-Lillibridge-Leroy module system"
    - "applicability of that module system to a wide range of programming languages"

- Haskell has underpowered module system.
- book, "Advanced topics in types and programming languages", part IV, programming in the large, [[http://camlunity.ru/swap/Functional%20Programming/Type%20Systems/Pierce/Advanced%20Topics%20in%20Types%20and%20Programming%20Languages.pdf][pdf]]

  - book, "Types and programming languages", [[https://www.asc.ohio-state.edu/pollard.4/type/books/pierce-tpl.pdf][pdf]]

- [[https://en.wikipedia.org/wiki/Modular_programming][WP:Modular programming]]

*** Key idea: Module = Dictionary -> Dictionary
   :PROPERTIES:
   :CUSTOM_ID: key-idea-module-dictionary---dictionary
   :END:

Assume a dependently-typed language.

Recall some terminologies:

- A record is a tuple whose components are named.
- A dictionary is also known as key-value map or look-up table.

Then a module is a lambda abstraction that takes a record and gives a record.

A module is a lambda abstraction.

This idea is similar to Nix and JavaScript modules.

=type Module = Map Name Decl -> Map Name Decl=

A module translates into a lambda-calculus expression.
An import translates to an entry in the input dictionary.
An export translates to an entry in the output dictionary.
Example:

#+BEGIN_EXAMPLE
    module {
        import add mul Int32;
        export f g T;
        f = add;
        g = mul;
        T = Int32;
    };

    -- The expression above translates to:

    \ {add; mul; Int32; ...} -> {
        f = add;
        g = mul;
        T = Int32;
    };
#+END_EXAMPLE

- Key ideas of that example:

  - Dictionary pattern matching simulates row polymorphism.
  - ={a;b;c;}= is shorthand for ={a:a; b:b; c:c;}=.
  - [[https://blog.robphoenix.com/elixir/notes-on-elixir-pattern-matching-maps/][Notes on Elixir: Pattern-Matching Maps · Rob Phoenix]]

What we are doing here is also known as "blurring the phase distinction".
See [[https://futhark-lang.org/blog/2017-01-25-futhark-module-system.html#modules-versus-higher-order-functions]["Modules versus Higher-Order Functions" in Futhark blog post]]:
"A module can be viewed as nothing but a record containing types and values."

A problem: compilation may fail to terminate.
No big deal.
Set a time-out.

*** what
   :PROPERTIES:
   :CUSTOM_ID: what
   :END:

- Hypothesis: Lazy evaluation solves the partial query problem elegantly.
- What are some cool ideas?

  - Dhall can import from IPFS.

    - http://www.haskellforall.com/2016/12/dhall-non-turing-complete-configuration.html

  - Elixir can pattern-match maps (dictionaries).

- What is a module in an untyped functional programming language such as Tulip?
- Finding a programming language for programming in the large

  - Ecosystem, libraries, tools, and communities.
  - The most important thing in programming in the large is name management.
    Namespaces.

    - C has two namespaces: type namespace and value namespace.
    - Haskell has two namespaces: type namespace and value namespace.
    - Java has better namespacing than C.
    - Enable the same name to be used in different context, so that you can write =get_name employee= and =get_name company= instead of =employee_get_name employee= or =company_get_name company=.

      - Ad-hoc polymorphism.

  - Which one has the biggest community?
  - Which one has a decent IDE?
  - Which community puts their money on where their mouth is?
  - Comparing type systems

    - [[https://docs.racket-lang.org/ts-guide/][The Typed Racket Guide]]
    - F#
    - SML
    - Caml
    - OCaml
    - Idris, Agda
    - Coq, Lean
    - Haskell
    - 2004, chapter, "Type systems", Luca Cardelli, [[http://lucacardelli.name/Papers/TypeSystems.pdf][pdf]]

      - from https://www.artima.com/forums/flat.jsp?forum=106&thread=185420
      - 2005, book, "Advanced topics in types and programming languages", Benjamin C. Pierce (editor)

        - Part IV, "Types for Programming in the Large"

      - 2002, book, "Types and programming languages", Benjamin C. Pierce

    - Java, Kotlin, Scala
    - Things that annoy me

      - ML, SML, Caml, OCaml: ='a tf= is somewhat annoying. It should have been =tf a=.

        - F# uses =tf<'a>=.
        - Haskell uses =Tf a=.

      - Would you rather type ='a list= (F#) or deal with an inadequate record/module system (Haskell)?
      - Haskell doesn't have =instance Read (->)= and =instance Show (->)=.

        - Haskell expressions are not first-class citizen in the language.

          - Unlike Lisp/Scheme.

        - Encumbers metaprogramming.

    - OCaml labels and polymorphic variants?

      - http://caml.inria.fr/pub/docs/manual-ocaml-400/manual006.html
      - OCaml labels are somewhat similar to Scheme keyword arguments.

    - F# quotations is important for metaprogramming.
    - F# doesn't do ad-hoc polymorphism well?

      - [[https://withouttheloop.com/articles/2014-10-21-fsharp-adhoc-polymorphism/][Ad-hoc Polymorphism in F# (how to survive without Type Classes) - Without the loop]]
      - [[https://sidburn.github.io/blog/2016/03/24/higher-kinded-polymorphism][Higher-kinded Polymorphism: What is it, why you want it · David Raab]]

    - https://cstheory.stackexchange.com/questions/40705/why-did-caml-become-ocaml-or-why-use-objects-in-f
    - ML begat Caml. Caml begat Caml Light? Caml Light begat OCaml?
    - [[https://www.quora.com/How-does-F-compare-to-OCaml-in-regard-to-major-syntactic-differences-paradigm-shifts-and-interoperability-with-Windows-What-about-its-numeric-capabilities][How does F# compare to OCaml, in regard to major syntactic differences, paradigm shifts, and interoperability with Windows? What about its numeric capabilities? - Quora]]

      - Jon Harrop claims. More sources needed. Take it with a grain of salt.

        - "OCaml has an integrated full-blown macro system in the form of Camlp4 whereas F# does not have macros and, in fact, has been deliberately closed off in order to discourage people from creating products that compete with Visual Studio."

          - "deliberately closed off [...]" is a bold claim.

  - [[https://softwareengineering.stackexchange.com/questions/155239/are-all-languages-basically-the-same/155243][Are all languages basically the same? - Software Engineering Stack Exchange]]

- package/dependency management tools

  - Java: Maven, Gradle
  - OCaml: OPAM
  - Haskell: Cabal, Stack
  - F#: Paket? NuGet?
  - C/C++: conan? chocolate? vcpkg?

- Formally adding modules to lambda calculus

  - What is module calculus?

    - 2017 article "Modules, Abstraction, and Parametric Polymorphism" [[https://www.cs.cmu.edu/~crary/papers/2017/mapp.pdf][pdf]]
    - 2003 article "A Type System for Higher-Order Modules" [[http://www.cs.cmu.edu/~rwh/papers/thoms/tr2.pdf][pdf]]
    - 2001 article "A Calculus of Module Systems" [[http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.22.5407][pdf available]]
    - 2012 course notes "Types for Module Systems" [[http://www.ccs.neu.edu/home/amal/course/7480-s12/modules-notes.pdf][pdf]]
      from [[http://www.ccs.neu.edu/home/amal/course/7480-s12/][CS7480 Type Systems (Spring 2012)]]

- Ignored undocumented code sketches

  - [[https://github.com/jordanlewis/simple-module-system][jordanlewis/simple-module-system: Adding modules to a polymorphic lambda calculus]], code in SML/NJ.
** Effects?
- Reddit post "Try/Catch and Async/Await are just a specialized form of Algebraic Effects!" https://www.reddit.com/r/ProgrammingLanguages/comments/9kzcz6/trycatch_and_asyncawait_are_just_a_specialized/
  - 2016 article "Algebraic Effects for Functional Programming" https://www.microsoft.com/en-us/research/wp-content/uploads/2016/08/algeff-tr-2016-v2.pdf
    - "we show how algebraic effects generalize over common constructs like exception handling, state, iterators and async-await"
  - <2018-10-08> not yet performant
** Abdullah research roadmap
- Abbreviations:

  - CCC: Cartesian closed category ([[https://en.wikipedia.org/wiki/Cartesian_closed_category][Wikipedia]])

- Abdullah wants to make a monad-aware programming language.

  - Categories enable us to organize a hierarchy of effects?

    - effectful over category \( C \) = extends category \( C \)?

- The plan is to research two related things in parallel:

  - using algebraic subtyping to mix parametric subtyping and inheritance subtyping

    - [[https://www.cl.cam.ac.uk/~sd601/thesis.pdf][Stephen Dolan's Ph.D. thesis "Algebraic subtyping"]]

      - "Type systems which support subtyping care about the direction of data flow."
      - "Find the /simplest/ algebra of types, and /some/ syntax for them"

    - [[https://en.wikipedia.org/wiki/Subtyping][Wikipedia: Subtyping]]
    - Scala already tries to join parametric subtyping and inheritance subtyping.
      What is the problem with Scala?

- Related: [[file:%7B%%20link%20functional_programming.md %}][functional programming research]].
- Who is Abdullah?

  - Abdullah a.k.a. Kim-Ee Yeoh is [[https://www.atamo.com/][atamo.com]].

*** Research questions
   :PROPERTIES:
   :CUSTOM_ID: research-questions
   :END:

**** Possible questions
    :PROPERTIES:
    :CUSTOM_ID: possible-questions
    :END:

- What is the result of CPS-transforming a recursive function?

#+BEGIN_SRC haskell
    fac 0 = 1
    fac n = n * fac (n - 1)

    fac 0 k = k 1
    fac n k = fac (n - 1) $ \ x -> k (n * x)
#+END_SRC

Conjecture:
Every recursive function can be transformed to a tail-recursive function with a helper function \( f(x) = f(g(x)) \).

#+BEGIN_SRC haskell
    fac 0 = 1
    fac n = n * fac (n - 1)

    fach (a, 0) = (a, 0)
    fach (a, n) = fach (a * n, n - 1)

    fac n = fach (1, n)
#+END_SRC

How do we enable the caller to step the recursion?

#+BEGIN_SRC haskell
    fac n = \ k -> k (\ x -> x * fac (n - 1) k) n
    fac n (\ f x -> f x)

    tri 0 = 0
    tri n = n + tri (n - 1)

    tri :: Nat -> ((x -> c -> Nat) -> Nat -> Nat)
    tri 0 = \ k -> 0
    tri n = \ k -> k (\ x c -> x + tri (n - 1) c) n

    inc x = inc (x + 1)

    inc x = \ k -> k (\ ) (x + 1)
#+END_SRC

- [[https://github.com/dorchard/unfix][github: dorchard/unfix: Takes a recursive function and syntactically unties the recursive knot]]

**** What is the relationship between self-reference, recursion, and fixed points?
    :PROPERTIES:
    :CUSTOM_ID: what-is-the-relationship-between-self-reference-recursion-and-fixed-points
    :END:

We say that \( x \) is a /fixed point/ of \( f \) iff \( f(x) = x \).

[[https://mathoverflow.net/questions/126513/categories-of-recursive-functions][MO 126513: categories of recursive functions]]

- What is the essence of self-recursion?

  - =fix= does not exist in a strict language.

    - "The Z combinator will work in strict languages [...]" [[https://en.wikipedia.org/wiki/Fixed-point_combinator#Strict_fixed_point_combinator][WP: Fixed-point combinator]]

      - The Z combinator is obtained by eta-expanding the Y combinator.

**** What is the formal definition of strict, non-strict, eager, and lazy?
    :PROPERTIES:
    :CUSTOM_ID: what-is-the-formal-definition-of-strict-non-strict-eager-and-lazy
    :END:

The difference is explained by luqui on [[https://stackoverflow.com/questions/7140978/haskell-how-does-non-strict-and-lazy-differ][SO 7140978]]. - Strict and non-strict are about meaning (denotational semantics?).
Eager and lazy are about operation (operational semantics?). - Strictness is a domain-theoretic concept.
Laziness is a computer implementation detail. - This uses Haskell to introduce domain theory: [[https://en.wikibooks.org/wiki/Haskell/Denotational_semantics][Wikibooks: Haskell: Denotational semantics]]. - In Haskell, the least fixed point operator can be defined as =fix f = f (fix f)=. - Why is bottom the /least/ fixed point of =id=?
Every \( x \) is a fixed point of an identity function \( x \mapsto x \), isn't it? - What is the ordering? - "Semantic approximation order" - [[https://wiki.haskell.org/Lazy_vs._non-strict][Haskell wiki]] is wrong?
It conflates non-strictness with normal-order reduction strategy? - [[http://pages.cs.wisc.edu/~horwitz/CS704-NOTES/6.DENOTATIONAL-SEMANTICS.html#simple][A simple example of denotational semantics using a language of binary numerals]] - [[https://en.wikipedia.org/wiki/Binary_combinatory_logic][WP: Binary combinatory logic]].
Its semantics is SK calculus (SKI calculus without the redundant I combinator) which is equivalent to lambda calculus. - we can execute non-strict functions eagerly,
for example by strictness analysis or speculative execution.

People are often sloppy with these terms. Redditors. Experts. Researchers. Academics.
It is true that Haskell is non-strict.
It is true that Haskell (as implemented by GHC) is lazy.

We can infer these formal definitions: - A function \( f \) is /strict/ iff \( f(\bot) = \bot \). - "a strict function must map bottom to bottom" (from the SO answer)

**** How do we represent general recursion by a monad? How do we add general recursion to TFP? How do we do it with monads?
    :PROPERTIES:
    :CUSTOM_ID: how-do-we-represent-general-recursion-by-a-monad-how-do-we-add-general-recursion-to-tfp-how-do-we-do-it-with-monads
    :END:

Here we try to salvage [McBride2015].

TODO write the problem: how McBride's General doesn't compose

- Is McBride's General really a monad?
- Is Abdullah's M really a monad?
- Did Abdullah mistranslate McBride's General?
- Is there a way to transform begin-step-end to McBride's General or Abdullah's M?
- Start with axioms, then infer the data types.

These are the axioms that we want M to satisfy. - =rec f . rec g = rec (ext f . g)= - =rec f . rec g = rec (f <=< g)= - =rec pure = id=

How do we translate a recursive function =f : a -> b=
to an explicitly recursive function =f : a -> m b=?

#+BEGIN_SRC haskell
    -- Abdullah's M, obtained by translating
    -- the General in [McBride2015] from Agda to Haskell
    data M s t a
        = Em a
        | Ap (t -> M s t a) s

    cata :: (a -> r) -> ((t -> r) -> s -> r) -> r
    cata ar xrxr m = fix $ \ self m -> case m of
        Em a -> ar a
        Ap xma x -> xrxr (self . xma) x
#+END_SRC

- Why do we want to add general recursion to TFP?

  - Adding general recursion to a TFPL
    makes programming in that language more practical.

- There are several attempts to add general recursion to TFP.

  - [Nordstrom1988] (terminating general recursion)
  - [Bove2001] (simple general recursion in type theory)
  - [Capretta2005] (general recursion via coinductive types)
  - [McBride2015] (Turing-completeness totally free)
  - me on 2018-04-07: [[file:{% link tfp_gen_rec.md %}][Approximating general recursion in TFP]]
  - [[http://adam.chlipala.net/cpdt/html/GeneralRec.html][A non-termination monad inspired by domain theory]],
    part of the documentation of Coq's GeneralRec library

- How are monads useful in FP?

  - Monads allow embedding a strict language in a lazy language [Wadler1996].
  - "Monads may be regarded as a mild generalization of continuation-passing style." [Wadler1996]

- [[http://homepages.inf.ed.ac.uk/wadler/topics/monads.html][Philip Wadler's research on monads]]
- Reading triage:

  - Moggi 1991: Notions of computation and monads

    - Programs should form a category.

      - Every type becomes an object in the category.
      - Every (one-parameter) function becomes a morphism in the category.

    - "Kleisli triples are just an alternative description for monads. Although
      the former are easy to justify from a computational perspective, the latter
      are more widely used in the literature on category theory and have the
      advantage of being defined only in terms of functors and natural transformations,
      which make them more suitable for abstract manipulation."
    - Moggi's most cited paper, according to Google Scholar
    - [[https://www.disi.unige.it/person/MoggiE/][Moggi's home page]]

      - [[https://www.disi.unige.it/person/MoggiE/publications.html][Moggi's list of his publications]]

        - recent paper: 2010 "Monad Transformers as Monoid Transformers". Theoretical Computer Science, TCS vol.411

  - [[https://www.irif.fr/~mellies/mpri/mpri-ens/articles/moggi-computational-lambda-calculus-and-monads.pdf][Moggi 1989: Computational lambda-calculus and monads]]
  - 2017 Uustalu [[https://www.semanticscholar.org/paper/Partiality-and-Container-Monads-Uustalu-Veltri/a45cabd8696232a985368e5b7f138fd21a7bff9f][Partiality and container monads]]
  - [Sheard2003] (a pure language with default strict evaluation order and explicit laziness)
  - [Wadler1998] (how to add laziness to a strict language without even being odd)
  - [Wadler1992] "explores the use of monads to structure functional programs"
  - [[https://srfi.schemers.org/srfi-40/mail-archive/msg00059.html][Monad for lazy evaluation]],
    Scheme, SRFI-40 mail archive, Andre van Tonder
  - [[http://math.andrej.com/2008/11/17/not-all-computational-effects-are-monads/][Not all computational effects are monads]]
  - 2018 Tomas Petricek [[https://arxiv.org/pdf/1803.10195.pdf][What we talk about when we talk about monads]]

*** Result of meeting on 2018-04-21
   :PROPERTIES:
   :CUSTOM_ID: result-of-meeting-on-2018-04-21
   :END:

- https://mvanier.livejournal.com/2897.html
- Applicative Functor is a homomorphism over CCC (Cartesian closed category)?
- We can use a category as the denotation of a functional programming language.

  - An example of a category:

    - One object: Unit
    - One morphism:
    - Two functions:

      - =f0 x = Unit=
      - =f1 x = x=

- What is a CCC? It is a category that satisfies the axioms in [[https://en.wikipedia.org/wiki/Cartesian_closed_category][WP: CCC]].

*** Agenda for 2018-04-21
   :PROPERTIES:
   :CUSTOM_ID: agenda-for-2018-04-21
   :END:

**** Totality is not about termination
    :PROPERTIES:
    :CUSTOM_ID: totality-is-not-about-termination
    :END:

Consider this example.
This recursion is not structural.
However, it terminates under normal-order beta-reduction strategy.

#+BEGIN_SRC haskell
    -- Constant function.
    f : Nat -> Nat
    f _ = 0

    main : Nat
    main = f main
#+END_SRC

Is =main= a total function?
Does that question make sense?
Note that =main= is not a mathematical function.
The denotation of =main= might be a mathematical function.

Does totality depend on the reduction strategy?
Does that question make sense?

I conjecture that every general recursive function can be transformed into its begin-step-end form.
See [[file:{% link tfp_gen_rec.md %}][Approximating general recursion in TFP]].

**** I think we can't add a Lazy Monad instance to Strict Haskell without changing the language semantics
    :PROPERTIES:
    :CUSTOM_ID: i-think-we-cant-add-a-lazy-monad-instance-to-strict-haskell-without-changing-the-language-semantics
    :END:

Here I try to (and fail to) add a Lazy monad to an imaginary language Strict Haskell (SH).

Imagine SH, a language with Haskell syntax
but with Scheme's applicative-order beta reduction (AOBR) instead of Haskell's normal-order beta reduction.
AOBR means: to evaluate =f x=, first evaluate =x=, and then evaluate =f x=.
SH is strict, and Haskell is lazy.

An inhabitant of the type =Lazy a= can be thought as a thunk that will return an inhabitant of =a=.

To construct an expression of type =Lazy a=, combine these: - The expression =bottom= constructs a thunk will fail. - The expression =pure x= constructs a thunk that will return =x=.
Note that =x= is evaluated before the thunk is constructed. - The expression =delay f= constructs a thunk that will return the result of evaluating =f Unit=.
The type of =f= is =Unit -> a=.
Note that =f unit= is not evaluated when the thunk is constructed,
unlike =pure=. - The expression =eval t= evaluates or forces the thunk =t=.
The type of =eval= is =Lazy a -> Maybe a=.

We want to embed laziness into SH.
Formally, this means that we want this equation to hold

#+BEGIN_EXAMPLE
    eval (bottom >>= \ x -> pure c) = Just c
#+END_EXAMPLE

but this is impossible in SH because the =>>== is strict.

However, if the type of =>>== were this

#+BEGIN_EXAMPLE
    (Monad m) => m (Lazy a) -> (Lazy a -> m (Lazy b)) -> m (Lazy b)
#+END_EXAMPLE

then it would be possible to embed laziness into SH.

Thus =Lazy= cannot be a =Monad= instance in SH.

Monads allow embedding a strict language in a lazy language [Wadler1996].
We are trying the reverse (embedding a lazy language in a strict language).
We have just tried the most naive way.
It failed.

**** Does TFP really sacrifice Turing-completeness?
    :PROPERTIES:
    :CUSTOM_ID: does-tfp-really-sacrifice-turing-completeness
    :END:

- What is a rigorous definition of Turing-completeness?

  - [[https://en.wikipedia.org/wiki/Turing_completeness][Wikipedia]]:
    "a system of data-manipulation rules (such as a computer's instruction set, a programming language, or a cellular automaton)
    is said to be Turing complete or computationally universal if it can be used to simulate any Turing machine"

    - What does "simulate" mean?

  - What is the relationship among total Turing machine, partial Turing machine, total function, and partial function?
    See [[https://en.wikipedia.org/wiki/Machine_that_always_halts][Wikipedia: Machine that always halts]].

- Why do you ask this?

  - We've been thinking that totality precludes Turing-completeness, but Conor McBride disagrees in [McBride2015].

*** Results
   :PROPERTIES:
   :CUSTOM_ID: results
   :END:

**** Is continuation the mother of all monads?
    :PROPERTIES:
    :CUSTOM_ID: is-continuation-the-mother-of-all-monads
    :END:

Abdullah wants to prove that continuation is the mother of all monads.

I think I have a partial proof of that for all Haskell-98 type endofunctions.

The folder [[https://github.com/Lambda-Jakarta/research/tree/master/abdullah-conjecture][abdullah-conjecture]]
contains a proposed partial proof of the Abdullah conjecture for all Haskell 98 type endofunctions.
The proof can be checked by the Lean theorem prover version 3.
See also the [[https://leanprover.github.io/][Lean prover home page]].
To edit Lean source files, use Visual Studio Code and its Lean plugin.

*** Reading triage
   :PROPERTIES:
   :CUSTOM_ID: reading-triage
   :END:

[[https://pdfs.semanticscholar.org/b60b/1c2e49ec6f574f220f162c8fdc81b2831830.pdf][1995, D. A. Turner, Elementary Strong Functional Programming]]

[[https://nms.kcl.ac.uk/maribel.fernandez/papers/TCS10.pdf][Godel's System T revisited]]

[[http://semantic-domain.blogspot.co.id/2012/12/total-functional-programming-in-partial.html][Total Functional Programming in a Partial Impure Language]]

[[http://www.cse.chalmers.se/~coquand/bengt.pdf][Type theory and functional programming]]:
Can we see type theory as a functional programming language?

[[http://www.cse.chalmers.se/~coquand/][Thierry Coquand page at Chalmers]]

[[https://mathoverflow.net/questions/126513/categories-of-recursive-functions][MO 126513: Categories of recursive functions]]

[[https://www.researchgate.net/publication/234808984_Denotational_semantics_and_rewrite_rules_for_FP][Denotational semantics and rewrite rules for FP]]:
"We consider languages whose operational semantics is given by a set of rewrite rules."

[[http://www.allisons.org/ll/Semantics/][allisons.org: Denotational Semantics]]

The Y-combinator is \( \lambda f. (\lambda x. f ~ (x ~ x)) ~ (\lambda x. f ~ (x ~ x)) \).
[[https://en.wikipedia.org/wiki/Fixed-point_combinator][WP: Fixed-point combinator]]

[[http://siek.blogspot.co.id/2016/12/simple-denotational-semantics-for.html][Simple Denotational Semantics for the Lambda Calculus, Pω Revisited?]]

*** Undigested information fragments
   :PROPERTIES:
   :CUSTOM_ID: undigested-information-fragments
   :END:

- "Partiality is an effect"
  https://www.cs.ox.ac.uk/ralf.hinze/WG2.8/22/slides/tarmo.pdf
- "Partiality Monad Transformer"
  https://stackoverflow.com/questions/15192897/partiality-monad-transformer
- http://www.cse.chalmers.se/~nad/publications/danielsson-semantics-partiality-monad.pdf
- categorical programming language

  - http://web.sfc.keio.ac.jp/~hagino/thesis.pdf
  - https://mathoverflow.net/questions/3721/programming-languages-based-on-category-theory
  - https://softwareengineering.stackexchange.com/questions/216635/category-theory-based-language

- "Kleisli triple over a category"
- "Category formed by the Kleisli triples over a category"
- Moggi 1991:

  - "Kleisli triples are just an alternative description for monads. Although
    the former are easy to justify from a computational perspective, the latter
    are more widely used in the literature on category theory and have the
    advantage of being defined only in terms of functors and natural transformations, which make them more suitable for abstract manipulation."

- Where does monad come from? Who invented it? Why was it invented?
- What is the relationship among monad, natural transformation, Kleisli category of a monad, Eilenberg-Moore what, adjunction?
- Has some semantics link
  http://math.andrej.com/2016/08/06/hask-is-not-a-category/comment-page-1/
- [[ftp://nozdr.ru/biblio/kolxo3/Cs/CsLn/Mathematics%20of%20program%20construction..%2010%20conf.,%20MPC%202010%20(LNCS6120,%20Springer,%202010)(ISBN%203642133207)(O)(435s)_CsLn_.pdf#page=109][2010, "Subtyping, Declaratively: An Exercise in Mixed Induction and Coinduction", Nils Anders Danielsson and Thorsten Altenkirch]]
** Language design
- https://github.com/mjambon/ocaml-wishlist
** ML/OCaml records vs modules: Why do we have modules if records suffice? An Ocaml "functor" would then simply be a function from records to records.
** Type systems
*** What is a type? Understanding what a type is from how it is used
Mathematically, A type is a set whose membership is syntactically decidable.

Engineeringly, A type gives meaning to bit patterns.

A type encodes meaning into bit patterns.
    - For example, consider the bit pattern 11111111.
        - It means -1 as an int8.
        - It means 127 as an uint8.
    - Types help translate programs.

Type system helps machines help us.
We shouldn't focus on type systems.
We should focus on logic.
We should focus on making machines help us.
The question is not how to make a good type system.
The question is how to offload the job as much as possible from humans to machines.

A programming language is a formal system.
A type system is a formal system.
Therefore a type system is a formal system embedded in a bigger formal system that is a programming language.

Programming languages have semantics, even if it is implicit.

A type defines the memory layout (bit pattern) of its values.

A type constrains values and expressions.

A type determines what values a function can take/give.

There are also other uses of types.

The question is: What is a type?
What principles should we follow when we design a language?

- https://news.ycombinator.com/item?id=8045115
    - [[https://existentialtype.wordpress.com/2011/03/19/dynamic-languages-are-static-languages/][Dynamic Languages are Static Languages | Existential Type]]
*** Church types and Curry types
- https://lispcast.com/church-vs-curry-types/
- [[https://www.reddit.com/r/programming/comments/2cavea/church_vs_curry_types_two_conflicting_perspectives/][Church vs Curry Types -- Two conflicting perspectives : programming]]
*** Row polymorphism
Why is it called row polymorphism?
Where is the row?
See "Objects and Aspects: Row Polymorphism", Neel Krishnaswami [[https://www.cs.cmu.edu/~neelk/rows.pdf][pdf]]

In the following, the function =set_name_r=  is row-polymorphic.
The function =set_name_n= is not row-polymorphic.
#+BEGIN_EXAMPLE
type Person = { name : String; age : Int; };
type Company = { name : String; location : String; };

set_name_r : String -> {name:String; r;} -> {name:String; r;};
set_name_r new_name {name=n; r;} = {name=new_name; r;};

set_name_n : String -> {name:String;} -> {name:String;};
set_name_n new_name {name=n;} = {name=new_name;};

john : Person;
john = { name="John"; age = 20; }

joe : Person;
joe = set_name_r "Joe" john;

not_person : {name:String};
not_person = set_name_n "What" john;

abc = { name="ABC"; location="1 ABC Way"; };
def = set_name_r "DEF" abc;
#+END_EXAMPLE
Without row polymorphism, we would have to write set_name twice: once for each type.
**** Row polymorphism vs subtyping
https://cs.stackexchange.com/questions/53998/what-are-the-major-differences-between-row-polymorphism-and-subtyping
**** Row polymorphism vs structural subtyping
https://news.ycombinator.com/item?id=13047934
*** what

- Liquid Haskell https://ucsd-progsys.github.io/liquidhaskell-blog/
- [[https://brianmckenna.org/blog/row_polymorphism_isnt_subtyping][Row Polymorphism Isn't Subtyping - BAM Weblog]]
- recursive types http://ecee.colorado.edu/~siek/ecen5013/spring10/lecture15.pdf
- http://tomasp.net/coeffects/
- 2008, article, "Church and Curry: Combining Intrinsic and Extrinsic Typing", Frank Pfenning https://www.cs.cmu.edu/~fp/papers/andrews08.pdf
- From Wadler home page
  - [[http://groups.inf.ed.ac.uk/abcd/][From Data Types to Session Types: A Basis for Concurrency and Distribution]]
- [[https://www.reddit.com/r/dependent_types/comments/8qig0u/vectors_are_records_too_pdf/][Vectors are records, too (pdf) : dependent_types]]
- https://wiki.haskell.org/Untypechecking is "converting from a type to a term".
- NOOL 2016 article "Static Typing Without Static Types — Typing Inheritance from the Bottom Up" [[http://www.it.uu.se/workshop/nool16/nool16-paper4.pdf][pdf]]
- https://en.wikipedia.org/wiki/Literate_programming

*** Parametricity
- Every recursive type can be written as `mu a. F a` where F is the associated free functor?
    - Example: `List a = Fix (F a)` where `F a b = 1 + a * b`.
    - `Fix F = F (Fix F)` is the least fixed point of F.
- Why should we care about parametricity?
    - [[https://bartoszmilewski.com/2014/09/22/parametricity-money-for-nothing-and-theorems-for-free/][Parametricity: Money for Nothing and Theorems for Free - Bartosz Milewski's Programming Cafe]]
*** Subtyping
A subtyping relation is an ordering of types.

So what? That is technically correct but that doesn't give any insights.

A subtype is an ordering that follows the Liskov substitution principle?

*** Type-checking
- Every type checking algorithm is unification (logic programming).
    - If the programmer annotates a term, use that annotation.
    - If the a term is not annotated, annotate that term with a freshly generated variable.
    - Unify everything according to the typing rules.
    - See Algorithm W in [[https://en.wikipedia.org/wiki/Hindley%E2%80%93Milner_type_system][WP:Hindley–Milner type system]].
*** Algebraic subtyping?
- subtyping
    - algebraic subtyping
        - 2016, PhD thesis, "Algebraic subtyping", Stephen Dolan https://www.cl.cam.ac.uk/~sd601/thesis.pdf
        - "Polymorphism, subtyping and type inference in MLsub" http://www.cl.cam.ac.uk/~sd601/papers/mlsub-preprint.pdf
            - from http://lambda-the-ultimate.org/node/5393
                    - from https://contributors.scala-lang.org/t/algebraic-subtyping/577
- http://www.cl.cam.ac.uk/~sd601/papers/mlsub-preprint.pdf
- https://www.cl.cam.ac.uk/~sd601/thesis.pdf
- https://cs.stackexchange.com/questions/53998/what-are-the-major-differences-between-row-polymorphism-and-subtyping
- https://www.cl.cam.ac.uk/teaching/1415/L28/rows.pdf
- 2017, "Introduction to homotopy type theory", http://www.cs.nott.ac.uk/~psztxa/ss-types-17/notes-summer17.pdf
- http://www.cs.nott.ac.uk/~psztxa/ss-types-17/
- https://homotopytypetheory.org/book/
- https://en.wikipedia.org/wiki/Subtyping
- https://en.wikipedia.org/wiki/Circle-ellipse_problem
- What does "X is a Y" mean?
It means P(X) => P(Y) for every predicate P.
Liskov substitution principle.
Does it mean "X is a subclass of Y" or "X is an instance of Y"?

** Interoperability between programming languages
- <2018-10-04> https://www.thestrangeloop.com/2018/all-the-languages-together.html
  - "Unfortunately, most current languages and toolchains were designed with language interoperability as an afterthought [...]"
  - "This talk is about how to change the status quo to make it easier to build multi-language software."
* Communities
- #proglangdesign community
  - their wiki https://github.com/proglangdesign/proglangdesign-wiki/wiki
  - their reddit https://www.reddit.com/r/ProgrammingLanguages/
  - their website https://www.proglangdesign.net/
* Web application frameworks?
http://zotonic.com/
* Solving the expression problem
* Solving the AST decoration problem / AST typing problem
- Other names of this problem:
  - [[https://www.reddit.com/r/haskell/comments/1f91w3/the_ast_typing_problem/][AST typing problem]]
  - "Trees that grow" problem
- common problem in parsing: how to decorate AST in a functional language
  - 2013, article, [[http://blog.ezyang.com/2013/05/the-ast-typing-problem/][The AST typing problem]], Edward Z. Yang
    - 2010, discussion, "The AST typing problem", [[http://lambda-the-ultimate.org/node/4170][LTU]]
  - Embracing the Any type
    - [[http://javaparser.org/][JavaParser]] added an =Object data= field to the AST Node base class, but they changed their minds.
      - https://github.com/javaparser/javaparser/issues/456
      - https://github.com/javaparser/javaparser/pull/472
  - Structural typing
    - TypeScript (JavaScript) is ideal for AST decoration problem?
      You just add a key to the AST node object you want to decorate.
      - Any language with structural typing is ideal?
      #+BEGIN_EXAMPLE
          interface Node {
          }

          interface Node_parse extends Node {
          }

          interface Node_desugar extends Node_parse {
          }
      #+END_EXAMPLE
  - Loosely-typed Haskell?
    - This is basically the JavaScript way.
    #+BEGIN_SRC haskell
        type Key = String
        data Value
            = VNum Double
            | VStr String
            | VObj Object
        type Object = [(Key, Value)]
        type Node = Object
    #+END_SRC
  - 2017, article, "Trees that grow", https://www.microsoft.com/en-us/research/uploads/prod/2016/11/trees-that-grow.pdf
    - "The compiler writer is then faced with two unpalatable choices.
      She can define a new data type representing the output decorated tree, at the cost of much duplication.
      Or she can write a single data type with all the necessary fields and constructors, at the cost of having many unused fields and constructors at different stages of compilation."
    - However, we can fake extensible ADTs with pattern synonyms, with Fix, and without type families.
      - Similar endeavors
        - https://wiki.haskell.org/Type_composition
      - Haskell doesn't beta-reduce types.
      - This is an example code:
      #+BEGIN_SRC haskell
          data Exp_ name exp
              = Var name
              | Add exp exp
              | ...

          data Locd a
              = MkLocd Loc a

          data Typed t a = MkTyped t a

          newtype Compose f g a = MkCompose { unCompose :: f (g a) }

          type PsExp name = Fix (Compose Locd (Exp_ name))
          type TcExp name = Fix (Compose Locd (Compose Typed (Exp_ name)))

          -- To ameliorate the verbosity:

          class Exp name exp where
              var :: name -> exp
              add :: exp -> exp -> exp
              ...

          instance Exp (PsExp name) where ...
          instance Exp (TcExp name) where ...
      #+END_SRC
  - What if GHC can "inline" data types at compile time?
    What if GHC can "inline" A and B in =data A = MA Int; data B = MB Int String; data E = EA A | EB B;=,
    producing =data E = EA Int | EB Int String=?
    Implementing this with Haskell 98 types should be straightforward.
  - related - "Data types a la carte" - http://hackage.haskell.org/package/compdata - Haskell type composition - https://wiki.haskell.org/Extensible_datatypes
- Other people's efforts
  - https://brianmckenna.org/blog/type_annotation_cofree
- https://discuss.ocaml.org/t/is-it-feasible-to-write-parsers-without-using-polymorphic-variants-for-ast-representation/1906
** Other solutions to the AST typing problem / trees-that-grow problem; using recursion schemes for separation of concern in functional programming
- "Program Reduction: A Win for Recursion Schemes" http://www.newartisans.com/2018/04/win-for-recursion-schemes/
  - Annotated expression trees
    - "The first moment when this recursion scheme went from an interesting idea to a good design decision was when someone created an issue on GitHub, asking to add location information to the expression tree."
  - Abstract Definitional Interpreters?
    - 2017 article "Abstracting Definitional Interpreters" https://arxiv.org/abs/1707.04755
  - boilerplate
  - recommends using recursion schemes

That is an interesting idea, but some important questions remain:

- How do we do that without boilerplate (for the library writer)?
- How do we do that without performance penalty?
* Too speculative? Unclear goal/reason? Condemned to oblivion?
** Category theory and programming languages?
The section title needs a verb.
- Category-theoretic model of functional programming languages
  - Every functional programming language L can be modeled by a category C(L) whose objects are the types of L and arrows are the function expressions of L.
- categorical programming (what is this?)
  - 2000, PhD thesis, "Categorical programming with inductive and coinductive types" https://kodu.ut.ee/~varmo/papers/thesis.pdf
  - categorical programming language
    - 1993, article, "Comparing Hagino's categorical programming language and typed lambda-calculi" https://www.sciencedirect.com/science/article/pii/030439759390186W
    - 1987, PhD thesis, "Categorical programming language" http://web.sfc.keio.ac.jp/~hagino/thesis.pdf
      - "An interpreter of Hagino's Categorical Programming Language (CPL)." https://github.com/msakai/cpl
    - aggregators
      - 2009, https://mathoverflow.net/questions/3721/programming-languages-based-on-category-theory
      - https://softwareengineering.stackexchange.com/questions/216635/category-theory-based-language
- category theory applied to programming language theory
  - 2012, "Generic Programming with Adjunctions" http://www.cs.ox.ac.uk/ralf.hinze/LN.pdf
** Foundation of mathematics especially for programming?
- set theories, such as ZF, ZFC, NBG, etc.
  - https://math.stackexchange.com/questions/136215/difference-between-zfc-nbg
- type theories, such as Martin-Löf type theory
- logic?
- category theory?
- lambda calculus?
- https://cstheory.stackexchange.com/questions/27217/are-there-presentations-of-set-theory-in-terms-of-lambda-calculus
  - Grue's map theory, 1992
    - http://hjemmesider.diku.dk/~grue/
      - 1992, Grue, PhD thesis, [[http://hjemmesider.diku.dk/~grue/papers/Grue92/Grue92.pdf]["Map theory"]]
        - p. 130: "Equality is better than truth [...]" (How do we explain the context?)
          - https://en.wikipedia.org/wiki/Equational_logic
    - related?
      - equational programming
    - 2016 reformulation article "A synthetic axiomatization of Map Theory" [[https://hal.archives-ouvertes.fr/hal-00678410v3][pdf available]]
Can we formalize "a program is an executable formal system" using Grue's map theory?
- How is "false" represented?
- How is "true" represented?
- How is "conjunction" represented?
** Probably irrelevant to our goal
   :PROPERTIES:
   :CUSTOM_ID: probably-irrelevant-to-our-goal
   :END:

- [[https://en.wikipedia.org/wiki/Non-English-based_programming_languages][WP:Non-English-based programming languages]]
- Obscure things. Much marketing, little technical detail.

  - VPRI, Alan Kay et al., archived (stopped operating in 2018), computing for the masses?

    - "Improve 'powerful ideas education' for the world's children and to advance the state of systems research and personal computing"

      - https://harc.ycr.org/

        - https://www.ycr.org/

    - https://en.wikipedia.org/wiki/Viewpoints_Research_Institute
    - https://en.wikipedia.org/wiki/COLA_(software_architecture)
    - https://news.ycombinator.com/item?id=11686325
    - FONC = fundamentals of new computing
    - http://www.vpri.org/index.html

  - YCR

    - visual programming language

      - blocks language

        - https://harc.ycr.org/project/gp/

- Functional Payout Framework http://lambda-the-ultimate.org/node/3331
** Automatic deglobalization of C programs?
** Who reads SWEBOK? How can we read SWEBOK? Who reads all of it? Why does anyone bother writing it?
- https://en.wikipedia.org/wiki/Software_Engineering_Body_of_Knowledge
- http://www.sebokwiki.org/wiki/An_Overview_of_the_SWEBOK_Guide
  - <2017-04-27>
    Someone claims to have read it.
    Holy shit.
    https://www.quora.com/Do-you-use-SWEBOK-Is-it-helpful
- Is the knowledge applicable?
  Knowledge that can't be applied is useless.
* Information that is looking for a place where they can be most useful
** Software engineer associations
   :PROPERTIES:
   :CUSTOM_ID: software-engineer-associations
   :END:

- Indonesia

  - [[http://sarccom.org/][SARCCOM Software architect Indonesia community]]
  - [[http://www.aspiluki.or.id/][ASPILUKI Asosiasi Piranti Lunak Telematika Indonesia]]

- International?
** Garbage collection
- [[https://www.reddit.com/r/programming/comments/7zfbs5/conservative_gc_is_it_really_that_bad_xpost_rjava/][Conservative GC: Is It Really That Bad? (X-post /r/java) : programming]] (summary)
  - [[https://www.excelsiorjet.com/blog/articles/conservative-gc-is-it-really-that-bad/][Conservative GC: Is It Really That Bad? -- Excelsior JET Team Blog]]
- [[https://news.ycombinator.com/item?id=16436574][Conservative GC: Is It Really That Bad? | Hacker News]]
- Real-time garbage collection
  - http://michaelrbernste.in/2013/06/03/real-time-garbage-collection-is-real.html
- Why GC only memory?
  Why not also GC file handles?
  Why not GC all resources?
  - [[https://cs.stackexchange.com/questions/52735/why-does-garbage-collection-extend-only-to-memory-and-not-other-resource-types][Why does garbage collection extend only to memory and not other resource types? - Computer Science Stack Exchange]]
** 2017 article "What Is the Best Way For Developers to Learn New Software Tools? An Empirical Comparison Between a Text and a Video Tutorial"
- http://programming-journal.org/2017/1/17/
** Common Lisp advocacy?
- 2018, article, [[https://academic.oup.com/bib/article/19/3/537/2769437][How the strengths of Lisp-family languages facilitate building complex and flexible bioinformatics applications | Briefings in Bioinformatics | Oxford Academic]]
*** Common Lisp Object System

- [[http://www.aiai.ed.ac.uk/~jeff/clos-guide.html][A Brief Guide to CLOS]]

** Why people don't adopt metaprogramming tools
I fear that the tool doesn't perfectly fit my use case.
When that happens, I want to drop down to the lower layer.
Generated code is usually inflexible.
I could maintain a patch, but isn't it (patching generated code) rather hacky and brittle?
The right way is to design the metalanguage so that it can express such transformation.

https://www.eclipse.org/epsilon/doc/articles/eugenia-patching/
** TODO How do we develop enterprise web applications efficiently?
*** <2018-09-27> Enterprise application development is like three blind people describing an elephant.
Every team is a blind people.

The company's actual ontology is the elephant.

How do we unify enterprise systems?
Should we combine subsystem ontologies to produce the actual ontology,
or should we derive subsystem ontologies from the actual ontology?
*** The ontology of enterprise web applications
**** Entities
An /entity/ is something that has identity.
Every entity is distinguishable from other entities.
**** Properties (extrinsic properties)
A /property/ of an entity is something that makes the entity what it is.

In software modeling, properties are usually extrinsic properties.

An extrinsic property of an entity is something we give to the entity, not something that comes with the entity.

Examples of properties:

- The name of a person is an extrinsic property.
  Changing his name doesn't change what I think of him.
- The name of a hotel is an extrinsic property.
  Changing the hotel's name does not change my willingness to stay in it.

A /property/ is a function from entity E to value V.

https://en.wikipedia.org/wiki/Intrinsic_and_extrinsic_properties
**** Combining entities
**** Mapping entities to storages
** TODO Process these informations

- Composition, composable systems

  - https://en.wikipedia.org/wiki/Software_transactional_memory#Composable_operations

- https://en.wikipedia.org/wiki/Programming_language_theory
- refactoring

  - [[https://github.com/PyCQA/baron][github.com/PyCQA/baron]]: "IDE allow you to refactor code, Baron allows you to write refactoring code."
  - HaRe Haskell refactoring tool https://github.com/alanz/HaRe

- ungrouped

  - https://medium.com/generative-design/introduction-to-computational-design-6c0fdfb3f1
  - magic?

    - http://conal.net/blog/posts/semantic-editor-combinators

  - [[https://2017.programmingconference.org/track/refuses-2017][Salon des Refusés 2017]]

- 2002, article collection, "Recent advances in Java technology: theory, application, implementation" http://www.cs.nuim.ie/~jpower/Research/Papers/2002/power-raijt-toc.pdf
- 1985, article, "Automatic synthesis of typed Λ-programs on term algebras" https://www.sciencedirect.com/science/article/pii/0304397585901355
- 2015, article, "Dynamically Composing Languages in a Modular Way: Supporting C Extensions for Dynamic Languages", [[https://chrisseaton.com/rubytruffle/modularity15/rubyextensions.pdf][pdf]]
- https://github.com/nim-lang/Nim
- 2016, article, "Towards Ontology-Based Program Analysis", [[http://drops.dagstuhl.de/opus/volltexte/2016/6120/pdf/LIPIcs-ECOOP-2016-26.pdf][pdf]]

  - Interesting conference title: "Conference on very important topics (CVIT)"

    - Is it real?
      Is it a secret society?
      Google doesn't seem to know about it.

- functional languages with explicit memory layout?
  functional languages for systems programming?

  - [[https://github.com/ollef/sixten][Sixten: Functional programming with fewer indirections]]

    - It also deals with representing algebraic data type inhabitants as bit patterns.
    - "Sixten is very related to other functional languages such as Haskell, Agda, and Idris.
      The biggest difference between other languages and Sixten is the way that Sixten allows us to control the memory layout of data."
    - [[https://gitter.im/sixten-lang/General?source=orgpage][Sixten, "General", Gitter, community chat]]

- What are Prolog alternatives?

  - 2011, article, [[https://arxiv.org/abs/1107.5408][[1107.5408] A structured alternative to Prolog with simple compositional semantics]]

- 2017, article, [[https://arxiv.org/abs/1707.00024][[1707.00024] A Formalized General Theory of Syntax with Bindings]]
- [[https://www.cs.cmu.edu/~mleone/language/projects.html][Programming Language and Compiler Research Groups]]
- [[http://www.pl-enthusiast.net/2014/07/10/ieee-posts-its-top-list-of-languages/][IEEE posts its top list of languages - The PL Enthusiast]]
- [[http://www.pl-enthusiast.net/2015/05/27/what-is-pl-research-and-how-is-it-useful/][What is PL research and how is it useful? - The PL Enthusiast]]
- 2014, article, [[https://arxiv.org/abs/1410.1776][Ontology-based Representation and Reasoning on Process Models: A Logic Programming Approach]]
- 1994, article, "Formalizing architectural connection", [[http://web.cs.wpi.edu/~cs562/s98/pdf/wright-icse16.pdf][pdf]]
- [[https://2015.splashcon.org/track/nool2015#event-overview][NOOL 2015 accepted papers - SPLASH 2015]] ("New Object Oriented Languages")

  - "Classes Considered Harmful", [[http://web.cecs.pdx.edu/~black/publications/ClassesHarmful.pdf][pdf]]
  - "Ubiquitous Object Orientation to Foster the Advancement of Programming Languages", [[http://www.cs.cmu.edu/~dkurilov/papers/nool15.pdf][pdf]]

- NOOL 2016 articles

  - "Nomen: A Dynamically Typed OO Programming Language, Transpiled to Java", [[http://www.it.uu.se/workshop/nool16/nool16-paper9.pdf][pdf]]

    - "Nomen is an experimental, dynamically typed OO programming language which compiles to Java source code."
    - "Nomen is designed as a language for experimenting with IDE support generation using the Rascal language workbench."

  - "The essence of subclassing", [[http://www.it.uu.se/workshop/nool16/nool16-paper5.pdf][pdf]]
  - "Towards Automatic Decoration", [[http://www.it.uu.se/workshop/nool16/nool16-paper2.pdf][pdf]]
  - syntax

    - "Polite Programmers, Use Spaces in Identifiers When Needed", [[http://www.it.uu.se/workshop/nool16/nool16-paper10.pdf][pdf]]

- [[https://en.wikipedia.org/wiki/Comparison_of_functional_programming_languages][WP:Comparison of functional programming languages]]
- Designing APIs

  - [[http://blog.steveklabnik.com/posts/2012-02-13-an-api-ontology][An API Ontology - Literate Programming]]

- Tools

  - Golang
  - Ruby gem and bundler
  - Python pip

- Great Works in Programming Languages, Collected by Benjamin C. Pierce http://www.cis.upenn.edu/~bcpierce/courses/670Fall04/GreatWorksInPL.shtml
- to read? "theories of programming languages reynolds"
- 2017, book, "Principles of Programming Languages" https://www.cs.bgu.ac.il/~mira/ppl-book-full.pdf
- 2003, article, "Composing Programming Languages by Combining Action-Semantics Modules" http://www.brics.dk/RS/03/53/BRICS-RS-03-53.pdf
- 2001, position paper, "Composition Languages for Black-Box Components" http://scg.unibe.ch/archive/papers/Wuyt01c.pdf
- glue: Make better services. (deprecated) https://hackage.haskell.org/package/glue
- yet another music programming language https://github.com/alda-lang/alda
- linearscan: Linear scan register allocator, formally verified in Coq; 2004, master thesis, https://hackage.haskell.org/package/linearscan
- Lastik: A library for compiling programs in a variety of languages (Java, Scala, C#) https://hackage.haskell.org/package/Lastik
- risc386: Reduced instruction set i386 simulator https://hackage.haskell.org/package/risc386
- 2017, "Theorems for Free for Free", Wadler http://homepages.inf.ed.ac.uk/wadler/topics/blame.html

  - What is "polymorphic blame calculus"?

- https://idris.readthedocs.io/en/v1.3.0/faq/faq.html#what-are-the-differences-between-agda-and-idris

  - "Why does Idris use eager evaluation rather than lazy?"

    - "What is the representation of =thing= at run-time? Is it a bit pattern representing an integer, or is it a pointer to some code which will compute an integer? In Idris, we have decided that we would like to make this distinction precise [...]"
    - Idris has laziness, but you have to be explicit.

- https://en.wikipedia.org/wiki/Automatic_programming
- https://en.wikipedia.org/wiki/Program_synthesis
- https://www.cs.cmu.edu/~mleone/language-research.html
- "Confessions Of A Used Programming Language Salesman: Getting The Masses Hooked On Haskell", Erik Meijer, [[https://pdfs.semanticscholar.org/233a/932b3e94f1f117655e4862995b32f33754be.pdf][pdf]]

  - What are the key points?

- 1966, article, P. J. Landin, "The next 700 programming languages", [[https://www.cs.cmu.edu/~crary/819-f09/Landin66.pdf][pdf]]

  - https://en.wikipedia.org/wiki/Off-side_rule

- http://matt.might.net/articles/best-programming-languages/
- [[http://www.cs.utexas.edu/users/EWD/ewd06xx/EWD641.PDF][EWD641: On the interplay between mathematics and programming]]
- http://hackage.haskell.org/package/Workflow
- https://pchiusano.github.io/2017-01-20/why-not-haskell.html
- http://unisonweb.org/2015-05-07/about.html#post-start
- [[https://github.com/facebook/duckling][facebook/duckling: Language, engine, and tooling for expressing, testing, and evaluating composable language rules on input strings.]]
- [[https://github.com/GaloisInc/crucible][GaloisInc/crucible: Crucible is a library for symbolic simulation of imperative programs]]
- 2009, "Domain-Specific Languages for Composable Editor Plugins"

  - [[https://pdfs.semanticscholar.org/presentation/85d8/bc42122ff5175be1ebc3c7b91e4abff55d22.pdf][2009 slides pdf]]
  - [[http://bora.uib.no/bitstream/handle/1956/9721/1-s2.0-S1571066110001179-main.pdf?sequence=1][2010 article pdf]]

- why not PEG parsing

  - http://jeffreykegler.github.io/Ocean-of-Awareness-blog/individual/2015/03/peg.html

- answer set programming

  - [[http://cs.aalto.fi/en/current/news/2018-07-18/][News: Speed up solving complex problems: be lazy and only work crucial tasks - Aalto University]]

    - 2018, article, "Exploiting Justifications for Lazy Grounding of Answer Set Programs", [[https://www.ijcai.org/proceedings/2018/0240.pdf][pdf]]

- [[https://brianmckenna.org/blog/idris_library][Idris as a Library - BAM Weblog]]

  - Idris as compiler backend

- Prolog ontology?

  - What is the relationship between Prolog, logic programming, ontology, and relational databases?

    - [[https://stackoverflow.com/questions/29062541/what-are-ontology-can-do-but-relational-database-can-not][What are ontology can do, but relational database can not? - Stack Overflow]]

      - [[https://www.slideshare.net/UscholdM/ontologies-and-db-schema-whats-the-difference][Ontologies and DB Schema: What's the Difference?]]
      - 2011, article, "Ontologies versus relational databases: Are they so different? A comparison", [[https://www.researchgate.net/publication/251332115_Ontologies_versus_relational_databases_Are_they_so_different_A_comparison][pdf available]]
      - 2010, article, "Mapping between Relational Databases and OWL Ontologies: an example", [[https://www.lu.lv/materiali/apgads/raksti/756_pp_99-117.pdf][pdf]]

  - [[http://sujitpal.blogspot.com/2009/06/ontology-rules-with-prolog.html][Salmon Run: Ontology Rules with Prolog]]
  - [[http://www.swi-prolog.org/web/][SWI-Prolog for the (semantic) web]]

- [[https://pchiusano.github.io/2017-01-20/why-not-haskell.html][Paul Chiusano: If Haskell is so great, why hasn't it taken over the world? And the curious case of Go.]]

  - Unison programming language

- Elixir has gradual static typing via Erlang Dialyzer.

  - [[https://elixir-lang.org/getting-started/typespecs-and-behaviours.html][Typespecs and behaviours - Elixir]]
  - [Understanding Elixir Types - via @codeship](https://blog.codeship.com/understanding-elixir-types/)

    - "Elixir functions are set up so that they can transparently be called across processes, heaps, or even machines in a cluster."
    - Can BEAM/Erlang/Elixir do live process migration?

  - The catch?

    - [[https://elixirforum.com/t/typed-elixir/1388][Typed Elixir - Elixir Chat - Elixir Forum]]

      - Is Dialyzer slow?

        - "My motivation for this is 95% of my bugs in Elixir/Erlang are due to using types wrong, like I may slightly change a tuple format somewhere but do not update it elsewhere and dialyzer does not catch it because the prior library state was in its cache that I then need to rebuild, in addition to dialyzer can take a long time to run."

- John Hughes, "Deriving combinator implementations", lecture 4, "Designing and using combinators" http://www.cse.chalmers.se/~rjmh/Combinators/DerivingCombinators/sld001.htm
- http://matt.might.net/articles/best-programming-languages/
- http://matt.might.net/articles/compiling-to-java/
- other programming languages

  - https://en.wikipedia.org/wiki/Curry_(programming_language)
  - http://fsl.cs.illinois.edu/images/5/5e/Cayenne.pdf

- [[https://github.com/edom/work/blob/master/meta/doc/extension.md][Extension programming language?]]
- https://en.wikipedia.org/wiki/Higher-order_abstract_syntax
- http://www.stephendiehl.com/posts/haskell_2017.html
- Haskell library: yaml vs HsYaml

  - https://twitter.com/hvrgnu/status/1004136566984503297

    - HsYaml is pure Haskell (doesn't use external libraries)

- [[https://www.cl.cam.ac.uk/~jrh13/slides/manchester-12sep01/slides.pdf][LCF key ideas]]
- closed source?

  - given SQL database, generate HTML user interface http://datanovata.com/

- http://libcello.org
- C HTTP server library?

  - https://kore.io
  - http://facil.io

- Possible user questions

  - How do I write software with this?
  - What are the important types?

- Don't format source code manually.

  - https://github.com/google/google-java-format

- related software

  - refactoring tools

    - https://github.com/RefactoringTools/HaRe
    - https://hackage.haskell.org/package/haskell-tools-refactor

  - parsing without symbol solving

    - Haskell and GHC extensions

      - http://hackage.haskell.org/package/haskell-src-exts

    - Haskell 98 only

      - https://hackage.haskell.org/package/haskell-src

    - Java

      - http://hackage.haskell.org/package/language-java

  - unknown

    - http://hackage.haskell.org/package/haskell-tools-ast

  - multi-database/cross-database query

    - http://www.unityjdbc.com/doc/multiple/multiplequery.php
    - https://www.red-gate.com/simple-talk/dotnet/net-tools/a-unified-approach-to-multi-database-query-templates/

  - similar systems

    - ERP libraries?

      - Meta is similar to Apache Ofbiz.

        - Some differences:

          - To define entities, Meta uses Haskell, Ofbiz uses XML.
          - Meta is written in Haskell, Ofbiz is written in Java.

        - https://cwiki.apache.org/confluence/display/OFBIZ/OFBiz+Tutorial+-+A+Beginners+Development+Guide

    - Web frameworks? Scaffolders?

      - Meta is similar to Laravel.

        - https://www.quora.com/Is-Laravel-a-good-framewok-really

      - Meta is similar to Ruby on Rails.

    - PhD theses

      - [[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.422.5683&rep=rep1&type=pdf]["Programming Language Features for Web Application Development", Ezra Cooper]]

        - "Links" programming language

- For JDBC URL see

  - https://jdbc.postgresql.org/documentation/80/connect.html

- similar

  - https://medium.com/airbnb-engineering/react-native-at-airbnb-f95aa460be1c

- some requirement?

  - https://en.wikipedia.org/wiki/Multitenancy

- Name?

  - HUMPS Haskell Universal Meta Programming System ?
  - Hemps: Haskell Meta Programming System
  - EAG: Enterprise Application Generator
  - HAG: Haskell Application Generator

- https://en.wikipedia.org/wiki/Language-independent_specification
- http://referaat.cs.utwente.nl/conference/12/paper/7000/expressing-ontologies-using-a-functional-language.pdf

  - "there are some proposals for implementing subtyping [in Haskell] [11, 12]"
  - open ADT makes exhaustive case impossible

- sublanguages?

  - Ontology definition language
  - Data definition language
  - Web application description language

    - View description language

- software design

  - functional programming software design

    - designing combinators

      - Hughes 1995 doc [[http://belle.sourceforge.net/doc/hughes95design.pdf][The design of a pretty-printing library]]

- [[http://lambda-the-ultimate.org/node/5292][LTU:progress on gradual typing]]
- [[https://en.wikipedia.org/wiki/%CE%9BProlog][WP:lambda-prolog]]
- Should we use Haskell or TypeScript for this project? Both? Neither?

  - Killer features

    - IDE: TypeScript wins (VS Code).
    - custom infix operators: Haskell wins.

      - We can go even wilder with Agda, Coq, Idris, Lean, etc.

    - untagged unions: TypeScript wins.
    - software diversity: TypeScript wins.

      - TypeScript works with nodejs and npm. Boatloads of software.
      - I think TypeScript has more developers.

    - laziness

      - Haskell wins.

  - Both have

    - ADTs.

** TODO Measuring things
*** TODO Measuring programming language quality
- https://en.wikipedia.org/wiki/Goodhart%27s_law
**** Minimum IQ required to understand the language
**** Development cost
***** Length of program
***** Development effort; number of people; amount of time
**** Developer feeling/enjoyment
**** Maintenance cost
***** Cost due to runtime defects (defects discovered while the program is running in production environment)
**** Rosetta Stone: comparing programs that do the same thing in different languages
https://medium.com/concerning-pharo/elegant-pharo-code-bb590f0856d0
**** Learnability, masterability, usability
*** TODO Measuring developer productivity
- 2004 article "Defining and measuring the productivity of programming languages" [[https://pdfs.semanticscholar.org/1852/9ff58460b6238f5095af073d8505d79d3264.pdf][pdf]]:
  - It defines these metrics:
    - "the time and effort required to write, debug, and tune the code"
    - "the performance of the code that results"
  - power-efficiency graph (human efficiency and machine efficiency)
  - what else?
- 2008 https://ifs.host.cs.st-andrews.ac.uk/Books/SE9/Web/Planning/productivity.html
  - https://ifs.host.cs.st-andrews.ac.uk/Books/SE9/
- 1992 article https://www.andrews.edu/~vyhmeisr/papers/progprod.html
- 2012 article http://www.drdobbs.com/jvm/the-comparative-productivity-of-programm/240005881
  - "A database comparing 6,000 projects shows that the choice of programming language has a significant impact on project schedule."
*** TODO Measuring software complexity

* Sayings
- Writing an enterprise application in Java is like teaching graduate physics using only the 100 most common English words.
* Relational programming / logic programming with SWI-Prolog
** Woes
*** <2018-10-24> There is no standard date/time/calendar library
- Java 8 has "java.util.time"; previous Java versions can use "Joda Time".
- Haskell has the "time" package ("Data.Time" module).
** Functional/expression style sometimes beats relational/unification style
#+BEGIN_EXAMPLE
-- Functional/expression style
g (f0 x0) (f1 x1) (f2 x2)

% Relational/unification style
f0(X0, Y0), f1(X1, Y1), f2(X2, Y2), g(Y0, Y1, Y2, Z).
#+END_EXAMPLE
Example where functional style wins:
- string formatting
- number crunching

If backtracking isn't involved, functional style wins (is more concise than relational style).

If computation is reversible, relational style wins (half the amount of code of functional style).

We should use both styles depending on circumstances.

We can define a functional/expression/applicative/evaluative sublanguage in Prolog, roughly like this:

#+BEGIN_SRC prolog
eval((A = B), Val) :- A = B, eval(B, Val), !.
eval(F, Val) :- callable(F), call(F, Val), !. % lots of hand-waving here
% etc.
#+END_SRC

Haskell is weak against the AST decoration problem.
Dynamic languages (Scheme, JavaScript, Prolog) / gradual-typed languages (TypeScript) beat static languages (Haskell) on the AST decoration problem.
How about Ocaml polymorphic variants?

- 1999 article "Embedding Prolog in Haskell" https://pdfs.semanticscholar.org/7c46/5d25205830735d0a034532746b7243221eca.pdf
  - "We propose an embedding of logic programming into lazy functional programming
    in which each predicate in a Prolog program becomes a Haskell function,
    in such a way that both the declarative and the procedural reading of the Prolog predicate are preserved."
- 1988 article "Towards functional programming in Prolog" ftp://obaluae.inf.puc-rio.br/pub/docs/Publications/88_AI_Furtado_SINPLAN.Not.pdf

Should we move from Prolog to Scheme/miniKanren or Mercury?
** Prolog needs static checking like Erlang Dialyzer
** Installing SWI-Prolog
*** Principles
- If your Linux distro has a packaged SWI Prolog 7, use it.
  - Otherwise build from source.
*** <2018-10-20> Installing SWI-Prolog 7.6.4 on Ubuntu 14.04
- Uninstall existing SWI prolog installations.
- Download the [[http://www.swi-prolog.org/download/stable][source]].
- Check the checksum using sha256sum.
- Follow the [[http://www.swi-prolog.org/build/unix.html][build instructions]].
  - Install dependencies, but replace =libunwind-dev= with =libunwind8-dev=.
    - Don't install the documentation dependencies; it's too big.
  - =cp -p build.templ build=.
  - Edit =build=:
    - Set =PREFIX= to =$HOME/.local=.
    - Uncomment the =--link= option in =EXTRACFG= variable.
  - Run =./build=.
- Ensure that =$HOME/.local= is in your =PATH=.
- Tell SWI-Prolog to use readline.
  - Set it in the user init file.
    - Create a FILE containing this line: =:- set_prolog_flag(readline, readline).=
      - Add =-f FILE= switch to the command line you use to start =swipl=.
- Related GitHub issue https://github.com/SWI-Prolog/issues/issues/72.
** Loading files
- =:- [foo].= is shorthand for =:- consult(foo).=.
  - http://www.swi-prolog.org/pldoc/man?predicate=consult/1
** Interacting with SWI-Prolog
- To show the canonical representation of a term, query =write_canonical(Term)=.
- To show the source of a predicate, query =listing(Module:Name)= or =listing(Name)=.
** Operator
- =:- op(Precedence, Type, Name)=
** Meta-programming
- To define 'macros', use =term_expansion= or =goal_expansion=.
** How do I use SWI-Prolog?
- Write a =load.pro= script that loads your files.
- To start a query interpreter, =swipl -l load.pro=.
- You write /rules/ in files.
  You write /queries/ in the query interpreter.
  - Pasting a file into the interpreter does /not/ load the file.
    - This is contrary to Lisp/Python/Ruby interpreters.
** Which string representation should I use?
*** The answer: Dedicated double-quoted string type (SWI-Prolog 7)
- "Strings are distinct from lists" http://www.swi-prolog.org/pldoc/man?section=strings
- "Why has the representation of double quoted text changed?" http://www.swi-prolog.org/pldoc/man?section=ext-dquotes-motivation
- 2013 article "Strings in ECLiPSe 6.2, SWI-7 and YAP" http://eclipseclp.org/wiki/Prolog/Strings
  - "With SWI-7 and ECLiPSe 6.2 string support has been harmonized, and YAP is expected to agree as well."
  - "Agreed Common Functionality"
  - "Situation before December 2013"
*** Non-answers
**** Edinburgh style: Double-quoted string as list of integer codes (default mode of SWI-Prolog 6.6.4 on Ubuntu 14.04)
- A Unicode character is represented as an integer that is the code of that character.
- A string is represented as a list of codes.
  Example: ="aaa" = [97,97,97]=.
- Inconvenient to debug.
- This behavior changes in SWI-Prolog 7.
- This was in 1993 ISO standard draft. http://fsl.cs.illinois.edu/images/9/9c/PrologStandard.pdf
  - This wasn't in the final version?
**** Double-quoted string as list of one-character atoms
- A Unicode character is represented as a one-character atom.
- A string is represented as a list of one-character atoms.
  Example: ="aaa" = [a,a,a]=.
- This assumes that the Prolog implementation garbage-collects atoms.
- More convenient to debug.
** Use clpfd #=/2 instead of is/2
** Fixing programming errors
- https://www.cs.ucsb.edu/~kyledewey/cs162w15/debugging_prolog.html
- http://www.swi-prolog.org/pldoc/man?section=debugoverview
  - Type =/f= in the tracer prompt to run to the next failure.
** Comparison between what is difficult in various programming languages
- 2014 presentation "That scripting language called Prolog" https://www.slideshare.net/SergeiWinitzki/prolog-talk
  - It compares what is difficult in various programming languages.
  - It defines "declarative": 'Programming is "declarative" when /specifications are programs/.'
    - Slide 29: "declarative programming = creating a good DSL for your domain"
  - Slide 24 compares SQL, Datalog, and Prolog.
** Difference lists
- Who invented difference lists when?

A "difference list" is a term of the form =A - B= where =A= is a list and =B= is a list.

A difference list represents a list.

The difference list =A - []= represents the list =A=.

- https://en.wikipedia.org/wiki/Difference_list
- https://en.wikibooks.org/wiki/Prolog/Difference_Lists
  - Difference list has constant-time append.
    Ordinary list has linear-time append.
- https://wiki.haskell.org/Difference_list
  - "Whether this kind of difference list is more efficient than another list representations depends on usage patterns."
- http://homepages.inf.ed.ac.uk/pbrna/prologbook/node180.html
** Prolog procedural semantics
*** Swapped phrases
There is only a small syntactic difference between =dfs= and =bfs= (it's just flipped order).

Which one exploits tail call optimization (last call optimization)?
#+BEGIN_SRC prolog
bit(0).
bit(1).

dfs([]).
dfs([H|T]) :- bit(H), dfs(T).

bfs([]).
bfs([H|T]) :- bfs(T), bit(H).
#+END_SRC
*** Understanding depth-first search, backtracking, choice points, performance, and cuts
Save this knowledge base into a file, and load it into Prolog.
#+BEGIN_SRC prolog
a(0).
a(1).

b(0).
b(1).
#+END_SRC

Run the query =a(A), b(B).= and press =;= until Prolog fails.

This is what Prolog finds (we remove the newlines to make it more readable):
#+BEGIN_EXAMPLE
A = B, B = 0 ;
A = 0, B = 1 ;
A = 1, B = 0 ;
A = B, B = 1.
#+END_eXAMPLE

This is the search space (search tree) of that query.
#+BEGIN_EXAMPLE
       ?- a(A), b(B).
      /              \
    A = 0           A = 1
   /     \         /     \
B = 0   B = 1   B = 0   B = 1
#+END_EXAMPLE

Prolog traverses that tree in depth-first order as follows:
#+BEGIN_EXAMPLE
- ?- a(A), b(B).
  - A = 0
    - B = 0
    - B = 1
  - A = 1
    - B = 0
    - B = 1
#+END_EXAMPLE

The important things to infer from this experiment are:
- Prolog repeats the work on =b= as many times as the number of ways of satisfying =a=.
  If =a= can be satisfied in N ways, and satisfying =b= is a lot of work,
  then Prolog may do that work N times,
  although the work produces the same result.
- Everything to the right of an infinite branch will never be visited.

What is a choice point?

A cut makes =a(A), b(B)= and =b(B), a(A)= return different results.

How far does a cut cut?

"The craft of Prolog" defines three kinds of cuts: red, green, and blue.
- A red cut destroys the logical meaning of a program.
  Green and blue cuts don't.
** Profiling in SWI-Prolog; find where your program spends time; find where it is slow; diagnose slowness
To run your =Goal= with profiling, simply query =profile(Goal)=.

Profiling couldn't be any simpler than this.
** Relational parsing; parsing with Prolog; my train of thought
Parsing is turning a list into a tree.
*** Approaches
- 2002 course notes http://www.cs.sfu.ca/~cameron/Teaching/383/DCG.html
- 1987 article "Parsing and compiling using Prolog" http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.101.9739&rep=rep1&type=pdf
- relational approach
  - recognizer: =digit(Input)=
    - recognizer with explicit search strategy
  - prefix remover: =digit(Input, Unparsed_suffix)=
    - This is the approach used by Prolog DCG (definite clause grammar).
  - prefix extractor: =digit(Input, Parsed_prefix, Unparsed_suffix)=
    - This enables us to get the parsed input without =append/3=.
  - concrete syntax tree parser: =digit(Input, Parsed, Unparsed)= where =Parsed = number(Children)=.
    - An example of =Parsed= is =number(digit(1), number(digit(2)))=.
  - interpreter
- functional approach
  - parser combinator
- generator approach
  - parser generator
  - parsing expression grammar
- procedural approach
  - recursive-descent
- https://en.wikipedia.org/wiki/Garden-path_sentence
*** Determining the groundness of the length of the lists involved in append/3 and append/2
**** Why do we care?
Because we want to write naive parsers that terminate.
**** What?
From the source code of SWI-Prolog, with some modifications:
- http://www.swi-prolog.org/pldoc/doc/_SWI_/library/lists.pl?show=src#append/3

"Ground" here is an adjective, not a noun.
A term is /ground/ iff it has no variables.
A term is non-ground otherwise.

#+BEGIN_SRC prolog
append([], L, L).
append([H|T], L, [H|R]) :-
    append(T, L, R).

append([], []).
append([L|Ls], As) :-
    append(L, Ws, As),
    append(Ls, Ws).
#+END_SRC

We say that a list is /length-ground/ iff its length is ground, and /length-unground/ otherwise.
The elements don't have to be ground.
- The empty list is length-ground.
- A list [_|T] is length-ground iff T is length-ground.
- If a variable gets unified with a length-ground list, then the variable is length-ground.

To analyze length-groundedness, we "reverse" the program.

#+BEGIN_EXAMPLE
% append(T, L, R)
append([], L, L).
append(T, L, R) => append([H|T], L, [H|R]).
#+END_EXAMPLE

(Length-ground = proper list?)

Now we can infer these about append(T, L, R):
- If T = [], then L and R have the same length-groundness.
- The recursive case:
  - Iff T is length-ground, then [H|T] is length-ground.
  - Iff R is length-ground, then [H|R] is length-ground.
- If we want L to be length-ground, then R has to be length-ground.
- Thus we can infer that L and R have the same length-groundness regardless of the length-groundness of T.

If append(A, B, C) succeeds, then:
- If A = [], then B and C have the same length-groundness.
- If two of A, B, C are length-ground, then the other one is length-ground?
- If two of A, B, C are length-unground, then the other one is length-unground?

What?
- 2002 article "Efficient Groundness Analysis in Prolog" https://arxiv.org/abs/cs/0201012
  - https://github.com/pschachte/groundness
**** How do we generate a long list in Prolog, for testing?
***** How do we say "A is a list of 100 equal elements" in Prolog?
** What?
- 99 Prolog problems http://www.ic.unicamp.br/~meidanis/courses/problemas-prolog/
*** Naive approach with recognizer / membership predicate
A /recognizer/ is a unary predicate that takes a list of character codes.

Another possible names for recognizer are /acceptor/, /determiner/, /decider/, /membership predicate/.

Example: The following =digit= predicate recognizes ASCII decimal digits.
#+BEGIN_SRC prolog
digit([D]) :- code_type(D, digit).
#+END_SRC

We can build recognizers on other recognizers.
For example, here we use =digit= to define =number_=:
#+BEGIN_SRC prolog
% We append underscore because =number= is a reserved Prolog predicate.
number_([H]) :- digit([H]).
number_([H|T]) :- digit([H]), number_(T).
#+END_SRC

That Prolog knowledge base corresponds to this context-free grammar:
#+BEGIN_SRC
digit ::= <a digit character as defined by Unicode>
number ::= digit | digit number
#+END_SRC

Exercise:
- Here you will compare depth-first search and iterative deepening search, and understand search completeness.
- Try the query =number_(S)=.
- Try the query =length(S,_), number_(S)=.
- If you keep pressing semicolon in the first query, will you ever encounter =S = [48,49]=?
**** A cool thing: recognizers are generators.
The predicate =number_= can be used not only to recognize strings, but also to /generate/ all such strings.
#+BEGIN_SRC prolog
% Press ; to generate the next possibility.
% Press . to stop.
?- length(S,_), number_(S).
#+END_SRC

To understand how that works, we have to understand Prolog backtracking.
**** Left recursion thwarts the naive approach.
Problem:
The following =expression= doesn't terminate.
#+BEGIN_SRC prolog
operator([A]) :- string_codes("+", Ops), member(A, Ops).

expression(E) :- number_(E).
expression(E) :- true
    , append([A, B, C], E)
    , expression(A)
    , operator(B)
    , expression(C)
    .
#+END_SRC

The corresponding context-free grammar is left-recursive:
#+BEGIN_SRC
expression ::= number | expression operator expression
#+END_SRC

We don't want to sacrifice the elegance of the description.
**** Can memoization (tabling) help speed up the naive approach?
No.
**** Another naive approach that works.
This one works.

The key is:
- Put grounding goals first.
  A grounding goal is a goal that grounds its variables.
- Be careful with the pattern =g, u= where =g= generates ungrounded terms and =u= fails,
  because it may cause infinite loop when Prolog backtracks,
  because Prolog continues to generate fresh variables.
  For example, this doesn't terminate:
  #+BEGIN_SRC prolog
  ?- length(L, N), fail.
  #+END_SRC
  - If =p= may generate infinite choice points, then =p, fail= doesn't terminate.

#+BEGIN_SRC prolog
digit([C]) :- code_type(C, digit).

number_([H]) :- digit([H]).
number_([H|T]) :- digit([H]), number_(T).

operator([0'+]).

% expression(Meaning,Codes) may not work if Codes is ungrounded.
expression(number(E), E) :- number_(E).
expression(plus(MA,MC), E) :- true
    , operator(EB) % Put grounding goals first.
    , append([EA,EB,EC], E) % Thus B is grounded.
    , expression(MA,EA)
    , expression(MC,EC)
    .
#+END_SRC
*** Prefix remover / difference-list recognizer / list partitioner
We can turn the naive recognizer =digit/1= into difference-list recognizer =digit/2=.
#+BEGIN_SRC prolog
digit([D]) :- code_type(D, digit).
#+END_SRC

- The first parameter is the input string, say Input.
- The second parameter is the recognized prefix of Input.
- The third parameter is the unrecognized suffix of Input.

In the following, P stands for Parsed, and U stands for Unparsed.

We can turn the recognizer into:
#+BEGIN_SRC prolog
% Prefix remover.
digit([P|U], U) :- code_type(P, digit).

% List partitioner.
digit([P|U], [P], U) :- code_type(P, digit).

% The list partitioner can be derived from the prefix remover:
% digit(U0, P0, U1) :- digit(U0, U1), append(P0, U1, U0).

number_(U0, U1) :- digit(U0, U1).

number_(U0, P0, U1) :- digit(U0, P0, U1).
number_(U0, P2, U2) :- true
    , digit(U0, P0, U1)
    , number_(U1, P1, U2)
    , append(P0, P1, P2)
    .
#+END_SRC

The meaning of =number_(U0, P0, U1)= is:
- P0 is a number.
- P0 is a prefix of U0.
- U0 is the concatenation of P0 and U1.

Observe how we "thread" the state.
The calls in the body follow the pattern =something(U<n>, P<n>, U<n+1>)=.

We can translate a recognizer into a difference-list recognizer.

The cool thing is that each parameter works both ways.
- The query =string_codes("123", A), number_(A, A, [])= asks Prolog to find out whether "123" parses as a number.
- The query =length(A, _), number_(A, A, []).= asks Prolog to find a string that parse as a number.
  You can keep pressing =;= to generate the next strings.
#+BEGIN_SRC prolog
operator([P|U], [P], U) :- string_codes("+", Codes), member(P, Codes).

expression(U0, P0, U1) :- number_(U0, P0, U1).
expression(U0, P0, U1) :- true
    , expression(U0, P0, U1)
    , operator(U1, P1, U2)
    , expression(U2, P2, U3)
    .
#+END_SRC
*** Definite clause grammars
- The DCG clause =left --> right= desugars/expands/translates into the definite clause =left(U0, U1) :- ...= where:
  - U0 is the input.
  - U1 is the suffix of U0 that is not recognized by the DCG clause.
  - The string recognized by the clause is the difference between U0 and U1.
    That string is the P such that U0 = P + U1 where + denotes list concatenation.
- "Interesting Things about Prolog" https://gist.github.com/CMCDragonkai/89a6c502ca7272e5e7464c0fc8667f4d
  - "Definite clause grammars (DCG) make the difference list pattern into a first class primitive with the =-->= operator."
**** Why does this naive DCG fail?
#+BEGIN_SRC prolog
digit --> [Code], {code_type(Code, digit)}.

number -->
    digit, number
;   digit
.

operator --> "+".

expression -->
    number
;   expression, operator, expression
.
#+END_SRC
*** Relational parsing with derivatives
https://github.com/webyrd/relational-parsing-with-derivatives/blob/master/README.md
*** Context-sensitive grammars?
We can add context by adding parameter.
*** Libraries?
- https://github.com/cbaziotis/prolog-cfg-parser
- This isn't Prolog, but this looks awesome https://github.com/Engelberg/instaparse/blob/master/README.md
*** Left recursion
Mathematics handles left recursion just fine.
Computers should too.
We shouldn't chicken out.
We shouldn't compromise by working around our grammar descriptions.
*** Precedence parsing?
- 1996 article "An Operator Precedence Parser for Standard Prolog Text" https://onlinelibrary.wiley.com/doi/abs/10.1002/%28SICI%291097-024X%28199607%2926%3A7%3C763%3A%3AAID-SPE33%3E3.0.CO%3B2-L
** Total relational programming (relational programs that can be proven to terminate?)
A total relation is a relation that is defined for every element in its domain.

If there is total functional programming, then there should be total relational programming.

It is too easy to write a Prolog program that doesn't terminate.
** Prolog is a depth-first brute-forcer
But you can emulate other search algorithms too.
*** Non-termination pitfalls, and how to generate terms correctly
Sometimes we forget that Prolog, on failure, backtracks (retries), not stops.

Sometimes we focus too much on the logical reading and neglect the procedural reading.

For example, suppose that you want to generate all lists whose length doesn't exceed 2.

The following is a mathematically correct statement about that fact,
but it doesn't work in Prolog.
It has correct logical reading, but incorrect procedural reading.
If you keep pressing =;=, this will fail to terminate.
#+BEGIN_SRC prolog
?- length(A, LA), LA =< 2.
#+END_SRC

The correct way to do that is to use =between/3= (inclusive):
#+BEGIN_SRC prolog
?- between(0, 2, LA), length(A, LA).
#+END_SRC

We can also use the =clpfd= library:
#+BEGIN_SRC prolog
:- use_module(library(clpfd)).

?- LA in 0..2, indomain(LA), length(A, LA).
#+END_SRC

We shouldn't have to resort to cuts:
#+BEGIN_SRC prolog
% Don't do this.
?- length(A, LA), (LA =< 2 -> true; !, fail).
#+END_SRC

See also:
- https://www.metalevel.at/prolog/nontermination
  - "[Non-termination is] common among beginners, and often lead them to perceive Prolog as 'slow', when in fact their program does not terminate /at all/."
** Iterative deepening search with length/1
Prolog uses depth-first search.
It isn't complete.
(What does that mean?)

If you have a query =goal(List)= where =List= is a list,
then you can query =length(List, _), goal(List)= to make the search complete.

https://en.wikibooks.org/wiki/Prolog/Search_techniques
** <2018-10-20> How do we make sense of this counterintuitive module syntax?
- https://stackoverflow.com/questions/42399020/how-to-get-a-listing-of-a-specific-knowledge-base
** Comparison between ontology, relational programming, and database programming
*** Open World Assumption vs Closed World Assumption
- http://www.mkbergman.com/852/the-open-world-assumption-elephant-in-the-room/
** Discover the wonderful world of Prolog / logic programming / relational programming
*** Symbolic AI is the easiest AI approach.
- Connectionist AI (neural networks) excels at tasks that are difficult to describe in formal logic.
- Symbolic AI (Prolog) is much more understandable and predictable than connectionist AI.
  - Understanding connectionist AI requires probability, statistics, and real analysis.
- Why not both?
  2017 article "SLDR-DL: A Framework for SLD-Resolution with Deep Learning" https://arxiv.org/pdf/1705.02210.pdf?
*** Dreams
- offload/scale/formalize thinking/cognition
- transform reasoning into data entry
- brain prosthetics; cognitive prosthetics
- Leibniz, "Let us calculate!", calculus ratiocinator
  - https://en.wikipedia.org/wiki/Calculus_ratiocinator
  - https://publicdomainreview.org/2016/11/10/let-us-calculate-leibniz-llull-and-computational-imagination/
- probabilistic logic programming
** Comparison of Prolog implementations
- https://en.wikipedia.org/wiki/Comparison_of_Prolog_implementations

Comparison between SWI Prolog, YAP, GNU Prolog.
http://www.david-reitter.com/compling/prolog/compare.html
** Comparison with other relational programming languages
Comparison with miniKanren:
- https://stackoverflow.com/questions/28467011/what-are-the-main-technical-differences-between-prolog-and-minikanren-with-resp
  - William E. Byrd's answer:
    - Prolog is practical; miniKanren is pure.
    - Prolog unification doesn't use occurs check; miniKanren unification uses occurs check.
    - Prolog uses depth-first search; miniKanren uses complete interleaving search.
    - '[...] miniKanren is being used for research in "relational" programming.'
    - "Over time miniKanren has added more symbolic constraints, really becoming a symbolically-oriented Constraint Logic Programming language."
    - "There are other very interesting logic programming languages as well, such as Mercury, Curry, and Gödel, each of which has its own take on logic programming."

Mercury vs Prolog
- http://lambda-the-ultimate.org/node/890
- <2018-10-21> "The Prolog to Mercury transition guide" https://www.mercurylang.org/information/doc-latest/transition_guide.pdf

SQL? Datalog?
** Reminder for those who already know
Elucidating
https://en.wikipedia.org/wiki/Prolog_syntax_and_semantics
** "Universal-transpiler": Similar to what we want
- "Universal-transpiler"
  - https://github.com/jarble/transpiler
    - it also has links to similar projects
  - http://www.swi-prolog.org/pack/list?p=transpiler
** Logic programming vs theorem proving
- https://stackoverflow.com/questions/36335633/difference-between-logic-programming-and-automated-theorem-proving
- https://en.wikipedia.org/wiki/Automated_theorem_proving
** Knowledge representation and software specification
*** Their relationships
- 2010, "Functional-Logic Programming Lecture Notes", Harold Boley, slides, [[http://www.cs.unb.ca/~boley/FLP/cs6905FLP.pdf][pdf]]
  - Knowledge representation in AI roughly corresponds to software specification in software engineering.
  - Declarative programs can be thought as executable specifications.
  - Invertibility principle (slide 36)
  - Nesting/conjunction principle (slide 46)
  - Unification principle (slide 50)
  - Amalgamation/integration principle (slide 55)
  - That's a long deck: 270 slides.
*** Executable specification?
- lightweight executable mathematics https://www.cl.cam.ac.uk/~pes20/lem/
** Combine closed-world assumption (logic programming / relational database) and open-world assumption (web ontology)
** Making compilers
- https://www.reddit.com/r/ProgrammingLanguages/comments/9em9jf/future_directions_for_optimizing_compilers/
  - "Future Directions for Optimizing Compilers" https://arxiv.org/abs/1809.02161
** Declarative programming languages

[[http://www.cse.chalmers.se/~oloft/Papers/wm96/node2.html][Declarative Programming Languages]], functional logic programming, two ways it is done (narrowing and residuation);
definitional programming, GCLA language (separate definition and control)

- 1995, "Functional Logic Programming in GCLA", [[http://www.cse.chalmers.se/~oloft/Papers/wm95.pdf][pdf]]
** How are Prolog and Lisp similar?
- Both Prolog and Lisp have symbols and cons cells.
  - This is a Lisp cons cell: =(cons 'a 'b)= or ='(a . b)=.
  - This is the corresponding Prolog cons cell: ='.'(a,b)=.
** Speculative
*** Fast logic programming?
- https://www.reddit.com/r/ProgrammingLanguages/comments/9fgv3v/can_logic_programming_execute_as_fast_as/
  - https://www.info.ucl.ac.be/~pvr/Peter.thesis/Peter.thesis.html
- https://stackoverflow.com/questions/23711790/comparision-of-abstract-machines-for-execution-of-prolog
*** Lambda-prolog?

- lambda-prolog http://www.lix.polytechnique.fr/~dale/lProlog/
** Resources
*** For beginners
*** Not for beginners
- 1990 book "The craft of Prolog" by Richard A. O'Keefe
  - from the preface:
    "There are a lot of introductory Prolog books around.
    This is not one of them.
    Think of it as "second steps in Prolog".
    If you have already read one of the introductory books, if you have taken an introductory course on Prolog, if you have written one or two Prolog programs, and if you are wondering why it is still hard to writegood Prolog programs, this book is meant to help you.
    The purpose of the book is to show you how you can write Prolog programs that work, that don't take an unreasonable amount of time, and that are clean enough to show to your friends."
* Bibliography
bibliography:default
