#+TITLE: Software engineering
#+DATE: 2018-04-11 00:00 +0700
#+OPTIONS: ^:nil toc:nil
#+PERMALINK: /softeng.html
#+MATHJAX: true
* Meanings
** What is software?
Software is to hardware as choreography is to dancers.
Indeed a choreography is a software.

Software is program, documents, configuration, and so on.

Programs, laws, choreographies, and recipes are software.

Minds are software.

Software is abstract object.

Software is executable mathematics.

Software is an idea.

Is software and hardware disjoint?
But the design of a hardware is a software?

The first written use of the word "software" goes back to Tukey 1958.[fn::http://www.historyofinformation.com/detail.php?entryid=936]

Zeller in ICSE 2018 presentation[fn::https://www.youtube.com/watch?v=U5jLjcxnwfU&list=FLVLsoyeokV21f0G7Z39gEUQ]
points out that Begel & Zimmermann 2014 survey \cite{begel2014analyze} contains questions that can stimulate software engineering research.
** What is programming?
Programming is forcing.
X programs Y to do Z iff X forces Y to do Z.
** What can be programmed?
People are programmable to some extent.
We program people when we ask them to do something.

Software development process itself is also programmable to some extent.
** What is engineering?
Engineering is the application of science?

Engineering consists of design, modeling, calculation, application of science, and turning all those plans into reality.

Engineering is tradeoff, compromise.

It's always cost versus everything else?

Engineering implies design goals, tradeoffs, and decisions.

Engineering does not inherently mean involving many people.
A one-man engineering project is an engineering project.
It is the methodology that makes it engineering, not the amount of people involved in it.
Given, when many people are involved,
some methodology has to exist in order to ensure that progress is even possible.

To engineer something is to scientifically force something.

You are actually three people:
your past self, your present self, and your future self.

Inability to maintain our past works is a sign of engineering failure.
** What is software engineering?
X engineering involves the design of X.

Material engineering involves the design of materials.

Chemical engineering involves the design of chemicals.

Civil engineering involves the design of civil structures.

Software engineering involves the design of software.
** What is the science of software engineering?
Civil engineering is the application of natural science (especially physics) to build civil structures
such as bridges, buildings, dams, roads, and other many things used by civilizations.

A civil engineer can predict how much load a steel beam can handle.
Can a software engineer predict how much load a machine can handle?

Software engineering is the application of computer science?

2018 slides "What would a science of software engineering look like?"
 [fn::http://herbsleb.org/web-pres/slides/crowd-chase-2018-final-dist.pdf]
** What is science?
Science is knowledge.

What is knowledge?
Do we want to dive into philosophy (especially epistemology) here?

There are at least two theories of knowledge:
- Popper: science is a falsifiable belief.
  That means, the belief must be such that it is possible to design an experiment
  that disproves the belief.[fn::https://en.wikipedia.org/wiki/Falsifiability]
- Plato: knowledge is justified true belief
** What is a scientific theory?
A scientific theory is a theory that is falsifiable, has explanatory power, and has predictive power.
** What does an engineer do?
A civil engineer plans the materials according to the physical load that the structure is expected to withstand.
The software engineer's analog is capacity planning of the computational resources
according to the computational load that the software is expected to withstand.
** What is the difference between a programmer and a software engineer?
The difference is in the amount of complexity that they can handle,
the amount of foresight they make.

A programmer does not have to be backed by science.
An engineer has to be backed by science.

It is the difference between bricklayer and an architect.

Commander and general.

Programming is tactical.
Engineering is strategic.

A bricklayer can build a wall, or even a house, but not a skyscraper.
A programmer can build a calculator, or a game, but not an operating system.

Bricklayer is less prestigious than architect, but they require a different skill set, and building requires both.
Without the architect, the building would be shit.
Without the bricklayer, the building would not exist at all in the first place.

Of course there are incompetent architects who build buildings despised by tenants,
as there are incompetent software engineers who build software despised by users.

But software is much more complex than bridges and skyscrapers.

What is the science of software engineering?
Classical physics is the science of civil engineering, and civil engineers understand physics well enough to predict everything they need to predict.
If computer science is to be the science of software engineering, software engineers don't know computer science well enough to predict everything they need to predict.
Worse, what if software is not predictable?
What if the complexity is essential and irreducible?

Sometimes engineering front-runs science, and the engineer's ignorance harms lives.
Coal mine explosions.
Leaded gasoline.
Microplastics.
DDT.
How can we predict what people will use new technology for?
How can we predict the unintended consequences?

Engineers have to combat ignorant management decisions that harm people.
Do you want to have blood on your hands?

Accidents happen.
Buildings fall.
Programs crash.
People make mistakes, mostly honest.

When I get on an airplane, I want to get on one made by engineers, not business people.
I want engineers to make the final decision.

If software is a pure art, then its construction should not be time-limited.
A painter does not paint with deadlines.
A painting is finished when the painter feels that it is finished.
However, a painter, when asked to paint a very specific painting, can estimate how many days it will take.

How far can the civil-engineering analogy stretch before it breaks?
** What does a programmer do?
*** Slave drivers
/Programmers play the same role as ancient slave drivers./
They translate and impose the master's will into the slaves.

Do programmers have god complex?[fn::https://www.reddit.com/r/java/comments/2jona4/why_does_everyone_hate_eclipse/clea9ok/]
*** Formalization
One job of the programmer is to formalize the end-user's implicit ontology
into the corresponding formal ontology that can be manipulated by machines.
The programmer's job is to formalize the end-users' mental model into a formal ontology.

Requirement gathering and analysis.

Semantic-preserving translation from user syntax (natural language) to computer syntax (programming language).

Will controlled natural languages enable everyone to program the computer?
*** Programming as progressive relaxation of simplifying assumptions
Programming is progressive relaxation of simplifying assumptions.

But has that activity already has another name: /modeling/.

We start with the assumption that the system does nothing.

Then we relax the assumption that all state is stored in memory.

Then we relax the assumption that errors do not happen.

Then we relax the assumption that the network latency is zero.

Then we relax the assumption that the user is willing to wait forever.

And so on.
*** Most "bugs" are actually "programming errors".
Programmers need to own up their mistakes, and call an error an error, not a bug.
A bug is something the programmer cannot control.
A cosmic ray strike flipping a bit in RAM is a bug.
A typo in the source code is not a bug.
*** Programming, model, and reality
- When we write a program,
  we are actually creating a /mathematical model/ of reality,
  creating an implicit ontology,
  defining what exist,
  making simplifying assumptions,
  discarding irrelevant aspects.
** Principles are just heuristics
Heuristics are rule-of-thumbs, not absolute truth.[fn::https://programmingisterrible.com/post/176657481103/repeat-yourself-do-more-than-one-thing-and]
** How do we write correct software?
*** What is correct?
Correct with respect to what?
It does what we want, and it only does what we want?
*** Proving and testing
/Testing approximates proving./
We actually want to prove a logical formula phi about a piece of code, we want to prove that the code fragment is a model of the formula phi, but proving is too expensive.
Therefore, we test phi instead.

In back-end testing, the formula is often obvious.
What is the formula in front-end testing?
DOM element existence testing?
*** The problem with formal methods: you can't prove what you don't model.
- Intel uses formal method, but why does its processors have vulnerabilities?
  - Because /you can't prove what you don't model/.
  - Spectre, Meltdown, etc.
  - https://arstechnica.com/information-technology/2018/11/intel-cpus-fall-to-new-hyperthreading-exploit-that-pilfers-crypto-keys/?amp=1
- How will we ever know that we didn't miss anything?
- You have to prove that it does everything that you want it to do, /and/ that it does only that, and nothing else.
**** What if it is impossible to write correct software? What are our options to mitigate/limit the damage?
*** What?
- Where is tutorial?
- A goal should be to make it easy to make correct software?
- 2014, slides, "How I became interested in foundations of mathematics.", Vladimir Voevodsky, [[https://www.math.ias.edu/vladimir/sites/math.ias.edu.vladimir/files/2014_08_ASC_lecture.pdf][pdf]]
- Why should we be interested in homotopy type theory?
- Coq
- [[https://leanprover.github.io/][Lean]]

  - Pros of Lean

    - Integrates with Visual Studio Code

  - Cons of Lean

    - Less mature than Coq

- Should we care about the relationship between functional programming and theorem proving?
- Ramble

  - Useless idea?

    - Reverse-proving: generate all proofs of a theory.
      (Proving is: given a statement, prove (or disprove).)

      - Which true sentences are interesting?
      - Which proofs are interesting?

- Companies

  - [[https://galois.com/][Galois]], on [[https://github.com/GaloisInc/][github]]

- unread interesting things

  - http://www.joachim-breitner.de/blog/717-Why_prove_programs_equivalent_when_your_compiler_can_do_that_for_you_
  - http://www.michaelburge.us/2017/08/25/writing-a-formally-verified-porn-browser-in-coq.html
  - https://aphyr.com/posts/342-typing-the-technical-interview
  - http://tech.frontrowed.com/2017/09/22/aggregations/

- interoperation between proof assistants?

  - Lem ("lightweight executable mathematics")

    - https://www.openhub.net/p/lightweight-executable-mathematics
    - http://www.cl.cam.ac.uk/~pes20/lem/
*** Coq?
  :PROPERTIES:
  :CUSTOM_ID: coq
  :END:

- Introduction

  - What is a suitable introduction to Coq?
  - [[https://people.debian.org/~schepler/coqtut.v.html][Daniel Schepler's "Mathematical formalization using Coq"]] seems approachable.
  - [[https://mathoverflow.net/questions/155909/wanted-a-coq-for-the-working-mathematician][MO 155909: Wanted: a "Coq for the working mathematician"]]
  - [[https://mathoverflow.net/questions/164959/how-do-i-verify-the-coq-proof-of-feit-thompson][MO 164959: How do I verify the Coq proof of Feit-Thompson?]]
  - https://softwarefoundations.cis.upenn.edu/current/index.html
  - Yves Bertot's "Coq in a hurry"
  - [[https://coq.inria.fr/tutorial-nahas][Coq tutorial by Mike Nahas]]
  - [[https://coq.inria.fr/distrib/current/refman/Reference-Manual006.html#Cic][Calculus of inductive constructions]]

- [[http://blog.mikael.johanssons.org/coq-and-simple-group-theory.html][Coq and simple group theory]]
- Installation on Ubuntu 14.04

  - =sudo apt-get install coq=
**** Introduction
   :PROPERTIES:
   :CUSTOM_ID: introduction
   :END:

Coq source file extension is =.v=.

The notation =x:T= means "the type of =x= is =T=", "=x= inhabits =T=".
It also means "=x= is a proof of =T=" by Curry-Howard isomorphism.

The type of =nat= is =Type(1)=.

The type of =set= is =Type(2)=.

The type of =Type(i)= is =Type(i+1)=.

#+BEGIN_EXAMPLE
    (* This is a comment in Coq. *)
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    coqtop -l filename.v -batch
#+END_EXAMPLE

**** Defining things
   :PROPERTIES:
   :CUSTOM_ID: defining-things
   :END:

#+BEGIN_EXAMPLE
    Definition x: nat := 0.
    Check x.

    Definition f (x: nat): nat := x + 1.
#+END_EXAMPLE

Definition = non-recursive definition

Fixpoint = recursive definition

Inductive = type (Set (small set)) definition

#+BEGIN_EXAMPLE
    Definition name: type
    where
    type: Set
    or type: Prop
    or type: Type.
#+END_EXAMPLE

Proving 0+1 = 1 using Curry-Howard isomorphism?

Axiom: and-elimination

\begin{align*}
a \wedge b \vdash a
\end{align*}

#+BEGIN_EXAMPLE
    Theorem and_elim: forall a b: Prop, a /\ b -> a.
    tauto.
    Qed.
#+END_EXAMPLE

\begin{align*}
a \vdash a \vee b
\end{align*}

Modus ponens

\begin{align*}
a, a \rightarrow b \vdash b
\end{align*}

**** How Coq represents propositions
   :PROPERTIES:
   :CUSTOM_ID: how-coq-represents-propositions
   :END:

#+BEGIN_EXAMPLE
    Print False.
    Print True.
    Inductive True : Prop := I : True.
    Inductive False : Prop := .
    Inductive and (A B : Prop) : Prop := and : A -> B -> and A B.
#+END_EXAMPLE
*** Testing
Why do we test?
Because we are not sure that our program is correct.

Why are we not sure that our program is correct?
- Because we don't know how to prove its correctness.
  This can be alleviated by using a decent programming language.
- Because the cost of proving its correctness does not justify the benefit.
  We can't do anything about this if the complexity is essential (irreducible), not accidental.

We human are fallible.
Thus we will always test.
Therefore:
- What should we test?
- How should we test?
- What is the test that has the greatest benefit-to-cost ratio?

The expected benefit of a test is the expected cost of the mistakes that might have been made if the test did not exist.

The quality of a test is the seriousness of the mistakes it prevents.
Thus, the seriousness of testing is proportional to the seriousness of risk.

Test is insurance.
A good insurance covers your risk.
A bad insurance only wastes money and doesn't cover your risk:
Testing Java class getters is like buying flood insurance for a house in the desert.

Insurance causes moral hazard (taking more risk because someone else pays for it).
Does having a test cause you to take more risks?

- The benefit of a test is the cost of the mistakes it prevents.
- The cost of a test is the person-hours spent writing the test and updating the test, and a slight increase in build time. (Assume $50/person-hour for simplicity.)

The answers to these questions tell us what to test and how to test:
- What tests have the greatest benefit-to-cost ratio?
- What mistakes do our tests prevent? How expensive are the mistakes that our tests prevent?
- Which part of our code is most likely to cause expensive mistakes? (Example: testing getters won't prevent expensive mistakes.)

Code coverage is a meaningless metric.
We should measure the expected value of mistakes instead.
We should "color" our code: color more risky methods more red, color less risky methods more green, like this
travel risk map[fn::https://i.redd.it/ktop13ad2io01.png] but for software.

If you are launching a rocket, then a mistake may cost billions of dollars.
It makes sense to invest ten million dollars testing to avoid a 1/100 probability of making a billion-dollar mistake.
*** Symbolic execution
Chris Meudec[fn::http://tinyurl.com/y42eyfkp][fn::http://www.echancrure.eu].
Prolog constraint solving for C/Java testing.
** What is software engineering?
*** Ontology and jargon
A /language/ is something that has syntax (form) and semantics (meaning).

A language enables its users to /communicate/ with each other.

A language is formed by the agreements of its users.

A /formal language/ ...

A /programming language/ is a formal language that is used for programming (a machine).

To program a machine is ...?

A /program/ is a formula/string/term in a programming language?

A machine can be modeled by a formal system.

A program is an executable mathematical object?
*** <2018-09-25> Software is broken and bloated
- [[http://tonsky.me/blog/disenchantment/][Software disenchantment @ tonsky.me]]
- [[https://www.hanselman.com/blog/EverythingsBrokenAndNobodysUpset.aspx][Scott Hanselman: "Software doesn't work. I'm shocked at how often we put up with it."]]
*** Why is hardware more standardized than software?
Hardware standardization benefits everyone (both its makers and its users).
Hardware unstandardization is more expensive than hardware standardization.

Software standardization is more expensive than software unstandardization.

Is software too malleable?

Hardware engineers have standard nuts, bolts, connectors, and components.

Why standardize?

- standardization reduces cost
- standardization reduces duplicate effort
- standardization improves interoperability

Hypothesis:
Programming language is too free.
If programming language is limited (that is, if there is only one way to do one thing),
then software will standardize itself.

There are some software standards, such as ABIs (Application Binary Interfaces).
C calling convention is a standard.
*** How do we write lasting software?
- Clear ontology
- Task-oriented documentation
  - Documentation doesn't have to be separate from code.
- /Capture/ the requirement.
  Translate the requirement into software, instead of making a software system that /satisfies/ the requirement.
  - The program may be rewritten, but the functional requirements, the business logic and the mathematical truths rarely change.
    - In order to make software last, we must /capture/ the requirements, not make a system that satisfies the requirements.
      This requires a change in mindset.
      The software is not something made to some requirements; the software is the requirements itself.
      The software is not the shirt made-to-order; the software is the order itself, from which all satisfying shirts can be generated/derived/produced.
- Think for yourself.
  Don't just follow hypes.
  Always have a reason when doing things.
  Record your reasoning for your forgetful future self.
- Design software to be refactored without surprises.
  - Example: Avoid runtime reflection (unless for the most obvious cases).
    An alternative to that is code generation.
    - Help the compiler help you.
    - Even the most obvious cases aren't obvious to someone who see the code for the first time?
- Shorten the edit-compile-test cycle. Design software so that it compiles fast and it starts up fast.
- What else?
*** Complexity
**** Renaat Verbruggen: Three universal methods of reducing complexity: partitioning, hierarchy, independence
- [[http://www.computing.dcu.ie/~renaat/ca2/ca214/ca214vii.html][Renaat Verbruggen: Three universal methods of reducing complexity]]: partitioning, hierarchy, independence
  - It also applies to other things, such as organizing this wiki.
**** How complex systems fail?
- 2000, article, "How complex systems fail", [[http://web.mit.edu/2.75/resources/random/How%20Complex%20Systems%20Fail.pdf][pdf]]
*** Defining software complexity as the length of the shortest first-order-logic formula that describes it?
Every software can, in principle, be described by a first-order-logic formula that describes the requirements satisfied or behaviors exhibited by the system.
**** What is complexity?
- [[https://fs.blog/2014/03/what-is-complexity/][Farnam Street blog post]]
- [[http://www.hartford.edu/complexity/whats-complexity.aspx][What Is 'Complexity'? | University of Hartford]]
- Measuring software complexity by hits-of-code instead of lines-of-code
  https://www.yegor256.com/2014/11/14/hits-of-code.html
*** Unpopular opinions
- https://www.quora.com/What-unpopular-opinions-do-you-have-about-software-development
*** Who reads SWEBOK? How can we read SWEBOK? Who reads all of it? Why does anyone bother writing it?
- https://en.wikipedia.org/wiki/Software_Engineering_Body_of_Knowledge
- http://www.sebokwiki.org/wiki/An_Overview_of_the_SWEBOK_Guide
  - <2017-04-27>
    Someone claims to have read it.[fn::https://www.quora.com/Do-you-use-SWEBOK-Is-it-helpful]
    Holy shit.

Fowler 2003[fn::https://martinfowler.com/bliki/Swebok.html] points out the problems with SWEBOK.

http://beamphys.triumf.ca/info/SWEBOKv3.pdf
*** Coupling
- Coupling is deciding what you can depend on.
  - Big Company X just released this new cool stuff, but will it still be there in 5 years?
*** Testing
**** If proving is cheap, prove it instead of testing it.
**** Amount of testing should be proportional to risk.
- How do we make code testable?
  - Minimize its dependencies.
  - Minimize the number of things that you must set up before you can run it.
  - Why?
    - If you don't satisfy all its dependencies, you can't run it.
    - If you can't run it, you can't test it.
    - If your business logic depends on the database, you'll have to set up a database to test your business logic.
- What do we need to test?
  - Testing is proportional to risk.
    - Riskier code should be tested more.
      - "Risk comes from not knowing what you're doing." (Warren Buffett)
        - Buffett said that for investing, but it also applies to programming.
  - If it's obvious, don't test it. (Getters, setters, and DAOs without fancy logic)
  - If you can prove it, don't test it.
*** TODO Compare programming language research journals and conferences
Which ones should we care about?
Which ones are the real deal?
**** Conferences
- ICFP: The ACM SIGPLAN International Conference on Functional Programming
- OOPSLA: ACM SIGPLAN Object-Oriented Programming, Systems, Languages & Applications
https://en.wikipedia.org/wiki/OOPSLA
- PLDI: ACM SIGPLAN Programming Language Design and Implementation
http://www.sigplan.org/Conferences/PLDI/
- POPL: ACM SIGPLAN Principles of Programming Languages
http://www.sigplan.org/Conferences/POPL/
**** Proceedings
- PACMPL: Proceedings of the ACM on Programming Languages
**** DBLP vs Semantic Scholar?
https://dblp.uni-trier.de/
*** Software engineer associations
- Indonesia
  - [[http://sarccom.org/][SARCCOM Software architect Indonesia community]]
  - [[http://www.aspiluki.or.id/][ASPILUKI Asosiasi Piranti Lunak Telematika Indonesia]]
- International?
*** Software business model
- Hardware is moved.
- Software is /copied/, not moved.
- When you sell hardware, you /transfer/ ownership. The hardware doesn't multiple into two.
- There are two models:
  - SaaS (software as a service, a web application; you control the hardware that runs the software, but not the input and output of the process)
  - bundling software with restricted hardware (Apple iPhone)
- Controlling software requires controlling the hardware that runs it.
  - Controlling the law requires controlling the lawmakers and the law enforcers.
- Isn't it absurd to judge a crime by its potentiality not its actuality?
- Process is software. Law is software.
- The chemical process in a chemical plant is also software, but not everyone owns a chemical plant.
  - If you hire a chemical engineer to design and implement your chemical plant's process, does the chemical engineer own the rights to the process?
  - If you hire a software to design and implement your computer's operating system, does the software engineer own the rights to the operating system?

Ownership is the ability to control access.
To own a thing is to be able to control the access to that thing.

- It is easy to control access to hardware. Nature/physics is with us on this issue.
- It isn't easy to control access to software.

- https://medium.com/@mattklein123/the-broken-economics-of-oss-5a1b31fc0182
*** Measuring software quality?
- https://cs.stackexchange.com/questions/47077/is-there-a-way-of-objectively-measuring-the-efficiency-or-quality-of-software-or
*** Programming language quality?
- https://medium.com/@richardeng/how-to-measure-programming-language-complexity-afe4f7e75786
- https://medium.com/concerning-pharo/elegant-pharo-code-bb590f0856d0
*** Technical writing, software documentation
- https://www.divio.com/blog/documentation/:
"Documentation needs to include and be structured around its *four different functions*: /tutorials, how-to guides, explanation and technical reference/.
Each of them *requires a distinct mode of writing*."
*** TODO Who said this "pit of success"? It was someone on the Internet.
- Write code that makes your client/user/reader (another programmer who uses your code) fall into the pit of success.
- Corollary: Principle of least astonishment.
- Corollary: Write code that a programmer can understand with an IDE without having to read much documentation.
- Corollary: Group data and methods that need those data together in one class.
- Can that principle derive these principles? http://c2.com/cgi/wiki?PrinciplesOfObjectOrientedDesign
- You can write maintainable and reliable procedural code?

** Why does software have security holes?
Software has security holes because:
1. Languages makes it too hard to do the right thing.
2. Programmers are too lazy to do the right thing.

Authentication systems such as OAuth are too complex for programmers to use or understand.
Anything more than HTTP Basic Auth is too complex.
It sucks to write code for handling authentication.
How do we make a programming system such that handling authentication is not hard?
What is authentication and authorization?

"A Taxonomy of Causes of Software Vulnerabilities in Internet Software"
https://pdfs.semanticscholar.org/5ec6/93950d1e6039e04a7b86a488e816ddcdd82e.pdf
"software developers are making the same mistakes over and over again"
** Why has mathematics not revolutionized biology or software engineering?
** What are the ICSE most influential articles?
[[http://www.icse-conferences.org/mostinfluential.html][ICSE (International Conference on Software Engineering) most influential articles]]
- "ICSE is the flagship conference of [software engineering] [...]." ([[http://www.gousios.org/blog/Report-from-ICSE-2017.html][Georgios Gousios]])
  - 2008, article, "Debugging Reinvented: Asking and Answering Why and Why Not Questions About Program Behavior ICSE-30"
    - https://www.cs.cmu.edu/~NatProg/whyline.html
    - https://github.com/andyjko/whyline
  - 2012, slides, "Connecting Software Architecture to Implementation: The Next 10 Years", [[http://www.cs.cmu.edu/~aldrich/presentations/aldrich-icse-mip-2012.pdf][pdf]]
    - 2002, article, "ArchJava: Connecting Software Architecture to Implementation", [[https://www.ics.uci.edu/~andre/informatics223s2009/aldrichchambersnotkin.pdf][pdf]]
  - 1997, article, "Software processes are software too, revisited", [[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.148.7620&rep=rep1&type=pdf][pdf]]
    - 1987, article, "Software processes are software too", [[http://laser.cs.umass.edu/techreports/1987-LJO.pdf][pdf]]
** What is software engineering?
- Engineering is the application of science.
- Civil engineering is the application of natural science.
- Software engineering is the application of computer science.
- What is science?
  - Science is the application of the scientific method.
  - Science is a mixture of philosophy, mathematics, and experiments.
- What is software?
  - chapter, "What is software?: The role of empirical methods in answering the question", [[https://link.springer.com/chapter/10.1007/978-3-319-73897-0_4][description]], [[https://link.springer.com/content/pdf/10.1007%2F978-3-319-73897-0_4.pdf][pdf]]
    - "Legislation is (like?) software development."
    - "[Cooking] Recipes are software."
  - The ideal software is easy to change but doesn't change.
    The ideal software captures the essence of the problem.
    The essence of a problem is mathematical definitions.
    Mathematical definitions aren't supposed to change.
  - Software is a model of reality.
  - Software is law?
    Law is software?
    - Similarity between software and law
      - Bad software and bad law both result in unnecessarily slow system.
      - Both are based on logic.
      - Both have an ontology.
      - The law of a country is a big (possibly inconsistent) logic program.
        - The law in writing vs the law in practice
          - I think it is too much for anyone to know all laws that are in effect in a country.
    - Difference between software and law
      - A judge cares about both the letter of the law and the spirit of the law.
      - A computer cares only about the letter of the software.
        There is no such thing as the spirit of the software.
        - A computer does what we write, not what we mean.
          - The programmer follows the computer's rules. Not the other way around.
      - [[https://en.wikipedia.org/wiki/Letter_and_spirit_of_the_law][WP:Letter and spirit of the law]]
  - Software is executable theory of nature.
  - Software is like physics but executable.
  - https://queue.acm.org/detail.cfm?id=2693160
  - https://www.cs.umn.edu/research/research_areas/software-engineering-and-programming-languages
    - "Software is a solution to a computational problem using a formal programming language."
** Software engineering research, advances in software engineering?
- http://www.sigsoft.org/events.html
- http://homepage.divms.uiowa.edu/~slonnegr/plf/Book/Chapter7.pdf
* Building big software
** How should we build software, especially big software?
For big enterprise software, we should at least use model-driven engineering.

For a throw-away shell script, just open a text editor and be done with it.

For critical software, perhaps formal methods?

Brooks & Kugler 1987 \cite{brooks1987no} have warned us about the essential irreducible complexity of software.
Dijkstra 1972 \cite{dijkstra1972humble} has warned us to control complexity with meaningful abstractions.
We must understand what we do, and do what we understand.
Model-driven engineering should be able to minimize the accidental complexity.
The essential complexity of a software system is the minimum information required by software engineers to make the system.
For example, "an online shop" is insufficient information: There are too many possibilities.
What are we going to sell?
How much traffic do we expect?
What about the operations?

Some software is so big that we cannot finish it in two weeks.
But in two weeks we are already a different person.
Thus we should think of ourselves as /three/ people: our past self, our present self, and our future self.
How can these three people cooperate?
If we keep feeling that our past self is stupid,
if we don't trust the decision made by our past self,
how can we progress at all, how can we build on something, how can we grow something?
Our two-week-ago self did think that it was the best decision.
If we cannot respect our past decisions, we are condemned to eternal refactoring.
Software engineering, self-trust, self-peace?

The relationship between programming and past self?

The key to being a good programmer is being someone that our future self can trust.

When we change a program, we are trusting our past self.
We assume that our past self did not plant time-bombs that will surprise our current assumptions.

I think software development can be sped up by minimizing the gap between the end-user's mental model and the programmer's mental model.
Matching mental model is a requirement of good user experience.
** Why people don't adopt metaprogramming tools (and model-driven engineering?)
I fear that the tool doesn't perfectly fit my use case.
When that happens, I want to drop down to the lower layer.
Generated code is usually inflexible.
I could maintain a patch, but isn't it (patching generated code) rather hacky and brittle?
The right way is to design the metalanguage so that it can express such transformation.

https://www.eclipse.org/epsilon/doc/articles/eugenia-patching/
** How should we specialize programmers?
In 2019 it is common to divide programmers into frontend programmers and backend programmers.
I think this is wrong.
It is like slicing a cake into layers instead of sectors:
One person eats all the topping, another one the butter, another one eats the flour.
However, if we talk about /making/ instead of eating a cake,
then it makes sense to specialize the chefs into topping specialists and dough specialists.
Thus, is software engineering more like eating cakes or making cakes?

We should divide programmers into /business programmer/ and /language programmer/ instead.
The language programmer creates a DSL (domain-specific language).
The business programmer captures user requirements into a program (a specification) in that DSL.
The language programmer writes a metaprogram that translates
the business programmer's declarative program into something efficient.
** How do we make reliable software?
Make restarts cheap, quick, and easy, like in Erlang.

Reliability is not about the uptime of a single operating system process.
Reliability is about the uptime of the whole system.

There are two attitudes:
- Strive to write one fool-proof program that does not leak resources.
  This may be possible for operating systems, but is too hard for user applications?
  Let the OS handle the corner cases?
- Use another system component's strengths to compensate for the program's weakness.
  Avoid stupid leaks, but do not strive to completely preclude resource leaks in corner cases.
  Make restart cheap and fast, and restart the program often.
  If the program is a web server, put it behind a load balancer, and rotate several instances often.
  This is more sane, efficient, and effective.

Example insanity that arises from writing code that tries to be too smart:
What to do if POSIX close fails?[fn::https://stackoverflow.com/questions/33114152/what-to-do-if-a-posix-close-call-fails]

Corner cases exist in the first place due to bad design, unclear semantics, lack of foresight.

Robustness can be attained by a combination of fail-fast and restart-fast.
** The context of "Premature optimization"
http://wiki.c2.com/?PrematureOptimization

Knuth was telling us to focus on what matters.

The catchy maxim "premature optimization is the root of all evil" is at risk of being taken out of context.

(Straw-man) example where "optimizing" is stupid:
You're building a small to-do list app, and you do it in C, and you use GOTO statements.

Example where not "optimizing" is stupid:
You're building a electronic fuel injection system,
and you don't know anything about jitter, latency, and real-time systems.
Controlling latency here is a requirement, not an optimization.
** Method Wars
What is SEMAT (Software Engineering Method And Theory)[https://semat.org/]?
The situation is like in the XKCD competing-standards comic?
There were OOP Method Wars.
 [fn::description of 2018 book "The essence of software engineering" https://link.springer.com/book/10.1007/978-3-319-73897-0]
 [fn::see the chapter "Escaping method prison [...]" in the pdf of that book https://link.springer.com/content/pdf/10.1007%2F978-3-319-73897-0.pdf]

Are we really doing Scrum?[fn::http://www.allaboutagile.com/the-scrumbutt-test/]
** How to group code? By feature? By dependency? By author?
Parnas modularity, abstraction, information hiding

- https://en.wikipedia.org/wiki/Feature-driven_development#Build_by_feature
  - "Any function that is too complex to be implemented within two weeks is
    further decomposed into smaller functions until each sub-problem is small enough to be called a feature."
** Distributed systems
- [[https://martinfowler.com/bliki/FirstLaw.html][Martin Fowler's First Law of Distributed Object Design]]: "Don't distribute your objects."
- http://www.drdobbs.com/errant-architectures/184414966
** Writing software?
- Minimize build time.
- Minimize the time from program startup to program ready.
  Otherwise you won't test the program.
- Understand which parts of the code have more risk.
  Risk is caused by something you don't understand. (Warren Buffett)
- Minimize the way things can go wrong.
  If you make a variable immutable,
  there are less ways it can go wrong. (?)
- Explicit is better than implicit?
  Prefer writing boilerplates to magical reflection stuff.
  Let the compiler help you.
  Let compilation error guide refactoring.
- Minimize duplication?
  Minimize duplication of constants, literals, fragments?
- Data is more important than code?
  The shape of the data is important?
- Make every part understandable in isolation?
- Avoid nulls? If you must use null, document it.
** Idea: Database should be a library, not a stand-alone server
** Object-oriented design?
Meilir Page Jones, "What every programmer should know about object-oriented design"
** Enterprise application and plumbing?
An enterprise application usually contains some complex logic and lots of plumbing,
so we need to make plumbing trivial.
All our programs read data, do something what that data, and write data.
The most important things are the data and the business logic.
** What cause software errors?
- Programming error: what the programmers think are not what they write.
  Difference between their thought and the computer's actual rules.
  Silent wrong assumption.
- Contributing factors: bad languages, bad tools.
  - Bad languages make writing correct programs difficult.
- Errors outside programmer control: cosmic rays, hardware problems
** Optimizing enterprise application development?
- 1999, article, "How enterprises use functional languages, and why they don't", Philip Wadler, [[http://homepages.inf.ed.ac.uk/wadler/papers/how-and-why/how-and-why.pdf][pdf]]
- Low-code application development
  - G Suite low-code https://developers.google.com/appmaker/
  - competitor https://www.outsystems.com/platform/#low-code
    - "OutSystems is an open, standards-based platform with no lock-in, no proprietary data models, or proprietary run-time"
** How do we develop enterprise software with less effort?
- CRUD should be generated.
  - https://news.ycombinator.com/item?id=15429616
  - http://isis.apache.org/
  - other tools?
- feature-oriented software development
  - https://en.wikipedia.org/wiki/FOSD_program_cubes
** Ontology?
- 2005, article, "Practical Ontology Systems for Enterprise Application", [[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.622.6490&rep=rep1&type=pdf][pdf]]
- 2006, article, "Applications of Ontologies in Software Engineering", [[https://km.aifb.kit.edu/ws/swese2006/final/happel_full.pdf][pdf]]
* Management, hiring, culture, anarchy
** What is management?
What did it mean to manage horses?
Why did people manage horses?
** What management?
I tried to think about [[file:engman.html][managing software engineers]].

"When hiring senior engineers, you’re not buying, you’re selling." (Alexander von Franqué)[fn::https://hiringengineersbook.com/post/trouble-hiring/]

"Why Developers Become Frustrated And Companies Can’t Find Talent"[fn::https://codeburst.io/why-developers-become-frustrated-and-companies-cant-find-talent-c4114d8b72ac]:
"In order to survive, a software project needs to sacrifice quality for money and time.
In order to exist, a software project needs to sacrifice money and time for quality."

Is it just myself, or are engineers generally anarchists?
** Hiring a person is like buying a bundle of candies mixed with shit
When you hire a man, you can't just get his good side: you get both his good side and his bad side.
When you hire a fast coder who is also a drunkard, a gambler, and a thief,
you get not only the fast coder, but also the drunkard, the gambler, and the thief.
You get all aspects of him.

It's the same with Android phones and telecommunication companies.
Android phones are bundled with unwanted Google shit.
Telkomsel Internet plans are bundled with unwanted movie quota shit.
Why don't they have a no-bullshit pure-Internet plan?

The art of hiring is determining whether a candidate's good side outweights his bad side.

Teaching skills is easier than changing habits or characters.
** What is the difference between the $10,000 Indonesian programmer and the $100,000 American programmer?
Is it location?
Will a $10,000 Indonesian programmer suddenly become a $100,000 Indonesian programmer just by moving to America?
Are American companies simply able/willing to pay more?

The average Indonesian does not know English.
Not all computer science undergraduates can write code, let alone think abstractly.
This seems to afflict all countries.

Is it skill/ability?
Is the $100,000 American programmer more capable than the $10,000 Indonesian programmer?

Is it racism?

Inconclusive discussion[fn::https://marginalrevolution.com/marginalrevolution/2012/01/why-are-some-programmers-paid-more-than-others.html].
** Standard questions for open-source projects
- Why does this project exist?
  What problem does it solve?
- How do I use it?
- How do I contribute? Code? Money? Documentation? Something else?
- Where is the community?
- Where do the users hang out?
- Where do the developers/maintainers hang out?
** Why is nobody using my open source project?
- There is no documentation.
- Their friends don't use it, because there is no documentation.
- You wrote some documentation, but they can't understand it or they can't find it, which means to them that there is no documentation.
- There is no documentation, because there is nothing to document.
  Make sure that your project actually does something significant and shareworthy.
- There is no license?

How can people know whether they will like it and tell their friends, if people can't even know what it is!?

It is too easy to get carried away with our beloved project and forget that telepathy has not been invented.
** Sometimes lateness is not software engineers' fault
\cite{demarco2011all}
** Making jobs even more granular
Instead of these job titles:
- software engineer
- data scientist
- accountant

How about these roles:
- the person who engineers software
- the person who, scientifically, formulates experiments and answers questions
- the person who keeps track of everything money-related

And there is no 1:1 mapping from person to roles, unlike 1:1 mapping from person to job titles.

The compensation is based on roles.
If you want more money, take more roles, probably inventing your own roles.

That is, we replace the question "What are you" with "What do you do".

But job "titles" become long.
"I am a software engineer" vs "I engineer software" vs "I design, implement, and maintain software".

I don't need a "regional manager".
I need someone who "helps me expand to such-and-such country".

In 2019, "engineer" may be a verb, but "science" is hardly a verb.
Even in 2015, "I’m going to have to science the shit out of this"[fn::https://stronglang.wordpress.com/2015/09/16/im-going-to-have-to-science-the-shit-out-of-this/]

The question is "Why are we hiring this person?"

What problem are we trying to solve by hiring this person?

We are not solving problems; we are /trading/ bigger problems with smaller problems.
Hiring people solves some problems and creates new problems.
But isn't that also true for everything we do?
Every solution solves a problem and creates new problems.
Thus the question is: Which problems would we rather handle?
** 2017 article "What Is the Best Way For Developers to Learn New Software Tools? An Empirical Comparison Between a Text and a Video Tutorial"
- http://programming-journal.org/2017/1/17/
** Human aspect
Good code is more because of programmer discipline than because of the framework or language.
 [fn::https://blog.codinghorror.com/discipline-makes-strong-developers/]
- Emphasize maintainability, readability, understandability, changeability?

Adding people to a late software project makes it later (Fred Brooks, "No silver bullet").

Newcoming programmers, no matter how experienced, need time to onboard; they are not immediately productive.
Existing programmers must spend some time helping the newcoming programmers, temporarily reducing productivity even further.

How do we concentrate?
Does putting on a headphone enhance your focus, even if it isn't playing any sound?
How about putting a motorcycle helmet (a friend of mine did that)?
* Software maintenance
** What is software maintenance?
Software does not break down like machines.
It is the things around the software that change.
Hardware changes.
Laws change.
People change.
The world changes.
What was true when the software was made is no longer true.

But why do we change?
Other animals have been living just fine for millions of years without much change.
We change for fun, to avoid boredom.

It is fun to change things.
It is less fun to be affected by changes.

The key to maintainable software is to depend only on dependable things.
If A depend on B, then B should be more stable than A.
If a program uses a library, then the library should be more stable than the program.
If a library uses an operating system, then the operating system should be more stable than the library.

Stable dependencies principle[fn::http://wiki.c2.com/?StableDependenciesPrinciple]?

How to write a program that does not change?
It must capture the timeless essence of reality.
A bachelor is unmarried by definition, and that definition is unlikely to change.
** Why does software change?
A software system, once written, works forever:
It will forever satisfy its specification.

The necessity of change originates outside the software system itself.

Examples of causes of change:
- changes in tax laws
- growing number of users
** What is architecture and maintainability?
Architecture is the set of things that are hard to change.
(Who said this?)

A system is /maintainable/ iff likely changes are easy.

A system is /maintainable/ iff the difficulty of a change is proportional to the likelihood of that change.

A system is /maintainable/ iff the change in implementation is proportional to the change in specification.
Thus, in such system, every small change in specification translates to small change in implementation.

Maintainability is about foreseeing what changes will be likely.
Maintainability, like security, cannot be an afterthought.
They must be designed from the beginning.

To maximize maintainability,
we must code at a level of abstraction as close as possible to the specification.

Must be weighed probabilistically.
It is unlikely that we will ever want to change an accounting system to a city-building game.

Example of architectural change:
Adding undo capability to a software system that was not designed with undo in mind.
Adding undo requires reification of all undoable actions.
** Backward-compatibility complicates development but simplifies maintenance
Reasons for maintaining backward-compatibility:
- If you maintain your library's backward-compatibility, you only need to maintain the latest version of the library.
- Compatibility reduces dependency hell and bit rot.
- The root cause of dependency hell / DLL hell / JAR hell is short-sighted incompetent library developers who don't care about compatibility.

Reasons for breaking backward-compatibility?
- Backward-compatibility hampers changing the interface (including fixing interface mistakes).
  But you can always introduce a new interface and deprecate the old one.
  But you will then collect junk.
*** Defining interfaces and backward-compatibility
An interface is something that users depend on.

Your library's interface is what breaks your users' code if that interface changes.

Examples of interface:

- Function parameters.
- Performance.
  Example: Replacing an algorithm with a slower one may stop your users from satisfying their non-functional requirements.

A backward-compatible change is a change that doesn't annoy the people who depend on you.
Such change doesn't require those people to react.
Such change doesn't break those people's works.
**** Backward-compatibility obviates backporting.
*** The key of library-writing is empathy.
   :PROPERTIES:
   :CUSTOM_ID: the-key-of-library-writing-is-empathy.
   :END:

Think about your users.
Don't break their stuffs.

See [[https://wiki.haskell.org/The_Monad.Reader/Issue2/EternalCompatibilityInTheory][Eternal compatibility in theory]].

Making only backward-compatible changes simplifies the lives of people who depend on you.

Library authors must maintain some backward compatibility.
They can't just make arbitrary changes and break things.

- https://plan99.net/~mike/writing-shared-libraries.html

*** Choosing a versioning policy
   :PROPERTIES:
   :CUSTOM_ID: choosing-a-versioning-policy
   :END:

Use what everybody else is already using in your ecosystem:
[[https://github.com/dhall-lang/dhall-lang/blob/master/VERSIONING.md][Dhall versioning policy]],
[[https://pvp.haskell.org/][Haskell PVP Specification]],
[[https://semver.org/][Semantic Versioning]],
etc.

If everybody followed eternal compatibility, versioning policies would be irrelevant and upgrades would be smoother.

*** Following Haskell package versioning policy
   :PROPERTIES:
   :CUSTOM_ID: following-haskell-package-versioning-policy
   :END:

- [[https://gist.github.com/snoyberg/f6f10cdbea4b9e22d1b83e490ec59a10][Michael Snoyman's personal take on PVP version upper bounds]].
- The alternative to Cabal PVP is compile error, or, even worse, logic error and runtime failure?

  - Cabal PVP depends on library authors/maintainers to test and update their dependency bounds.

*** Backward-compatibility hall of fame
   :PROPERTIES:
   :CUSTOM_ID: backward-compatibility-hall-of-fame
   :END:

These systems may be too backward-compatible.

2018-09-01: [[https://www.ibm.com/support/knowledgecenter/en/linuxonibm/liaag/wkvm/wkvm_c_overview.htm][IBM Z mainframes]].
The page says that the 2018 system is mostly backwards-compatible to the 1964 system.

- 2014: [[http://www.longpelaexpertise.com.au/ezine/IBMBackwardCompatibility.php][Are IBM Mainframes Really Backward Compatible? - LongEx Mainframe Quarterly]]

Windows 95: [[https://news.ycombinator.com/item?id=2281932][Much more than you would ever know.. The original version of Sim City was writt... | Hacker News]]
*** Respect legacy code because it works, but don't get too attached to anything.
It may be ugly, but /it works/.
- Is the code really ugly?
  - Are you refusing to read it because it doesn't fit your taste?
    Indent size?
    Snake case vs camel case?
    - Is the code truly unreadable, or are you just an asshole?
      - How hard have you tried?
** Forward-compatibility?
** Logging
- Before logging something, think how it would be read.
- If you can't read the log, you shouldn't write the log.
- Only log important things.
  Keep logging volume low.
  Minimize retention; only retain important logs.
  Don't retain debugging logs.
- Storage is cheap. Rotate your logs and buy more storage.
- If you're looking for things to do, maybe you can try using Amazon SDK
  and log your events to CloudWatch or CloudTrail (or perhaps even SNS).
  Treat a log as an event stream, not a file.
- http://jasonwilder.com/blog/2013/07/16/centralized-logging-architecture/
- http://jasonwilder.com/blog/2012/01/03/centralized-logging/
** <2017-05-20> What helps writing maintainable software?
- Minimize duplication? The programming language limits deduplication?
- Facilitate change, minimize ripple due to change
- Flexibility of a component is proportional to its risk of changing?
** How do we know a software is maintainable?
Change all the programmers.
If the new programmers can handle it,
it's maintainable.

The only way to ensure software maintainability is periodic rotation of programmers?
We should rotate programmers, no less frequent than every year, for software maintainability.
 [fn::https://www.yegor256.com/2015/12/29/turnover-is-good-for-maintainability.html]
** How do we divide labor? How do we work together?
Interfaces enable us to pretend that our coworkers have finished their jobs.

Interfaces are contracts, promises, agreements.
* Measuring productivity?
** Is it possible? Is it practical?
What is productivity?
The propensity to produce?

What does it mean to measure productivity?

It is impractical to trace all the causal chains.

It is easy to compare factory worker productivity between such workers because:
- The causal chain is very simple and short.
- The interaction between factory workers do not affect each worker's productivity.
- The environmental factors (machines, lighting, etc.) are constant and identical for all workers.

A knowledge worker's productivity is affected by peer interaction.

In order to measure a programmer's productivity, he must first be isolated from everyone else.
But is this isolation enough?

If both A and B are necessary causes of C,
then A or B alone is not sufficient to cause C.
Each of A and B is a causal factor (necessary but not sufficient).
The cause of C cannot be reduced to either A or B.
Both of them are necessary to cause C.
For example, in the fire triangle, all of fuel, oxygen, and heat are necessary to cause fire.
The cause of fire cannot be reduced to any strict sub-combination of those three factors.

Measuring producitivity requires understanding causality.

It is not as simple as blaming the proximate (the nearest) cause.
For example, suppose a smoker in a gas station causes an explosion.
The blame is /largely/, but not /entirely/ on the smoker,
because the smoker alone is not enough to cause the explosion:
the explosion requires gasoline vapor,
which is caused by the existence of the gas station,
which is caused by the demand for gas,
which is caused by other car owners,
and so on.
In the end, all of humanity shares a little blame, although negligible.
** When is line of code a valid measure?
Line of code (LOC) can be a valid measure if they are /normalized/ first,
like purchasing-power-parity adjustment in currency exchange rates.

One atomic statement per line.

LOC is valid for the same language with the same coding style.

1 LOC of C cannot be equated with 1 LOC of Java, in the same way we cannot equate 1 kilogram and 1 pound.
** What does a software engineer do?
- Find out what the user really wants.
- Formalize user requirements.
** How do we compare programmers/code?
- correctness of the system
- maintainability of the system
- efficiency of the system
- time taken to implement the system
** How do we measure developer productivity?
- 2004 article "Defining and measuring the productivity of programming languages" [[https://pdfs.semanticscholar.org/1852/9ff58460b6238f5095af073d8505d79d3264.pdf][pdf]]:
  - It defines these metrics:
    - "the time and effort required to write, debug, and tune the code"
    - "the performance of the code that results"
  - power-efficiency graph (human efficiency and machine efficiency)
  - what else?
- 2008 https://ifs.host.cs.st-andrews.ac.uk/Books/SE9/Web/Planning/productivity.html
  - https://ifs.host.cs.st-andrews.ac.uk/Books/SE9/
- 1992 article https://www.andrews.edu/~vyhmeisr/papers/progprod.html
- 2012 article http://www.drdobbs.com/jvm/the-comparative-productivity-of-programm/240005881
  - "A database comparing 6,000 projects shows that the choice of programming language has a significant impact on project schedule."
** What?
- 2015, PhD thesis, Bergersen, "Measuring Programming Skill: Construction and Validation of an Instrument for Evaluating Java Developers"
  - [[http://folk.uio.no/gunnab/publications/Bergersen2015_PhD_thesis.pdf][pdf]]
  - It's a collection of 4 articles.
  - https://www.duo.uio.no/handle/10852/48583
* Doesn't belong here?
Most of these things are too tactical, not strategic enough.
** How do we reverse-engineer software?
I want something like Ghidra[fn::https://www.youtube.com/watch?v=Sv8yu12y5zM] but written in Prolog and for PS1 MIPS.

Can we use Ghidra for reverse-engineering PS1 games?
** Ramblings? Wish lists? Too speculative? Unclear goal/reason? Condemned to oblivion?
*** Probably irrelevant to our goal
- [[https://en.wikipedia.org/wiki/Non-English-based_programming_languages][WP:Non-English-based programming languages]]
- Obscure things. Much marketing, little technical detail.
  - VPRI, Alan Kay et al., archived (stopped operating in 2018), computing for the masses?
    - "Improve 'powerful ideas education' for the world's children and to advance the state of systems research and personal computing"
      - https://harc.ycr.org/
        - https://www.ycr.org/
    - https://en.wikipedia.org/wiki/Viewpoints_Research_Institute
    - https://en.wikipedia.org/wiki/COLA_(software_architecture)
    - https://news.ycombinator.com/item?id=11686325
    - FONC = fundamentals of new computing
    - http://www.vpri.org/index.html
  - YCR
    - visual programming language
      - blocks language
        - https://harc.ycr.org/project/gp/
- Functional Payout Framework http://lambda-the-ultimate.org/node/3331

Automatic deglobalization of C programs?
*** Garbage collection
- [[https://www.reddit.com/r/programming/comments/7zfbs5/conservative_gc_is_it_really_that_bad_xpost_rjava/][Conservative GC: Is It Really That Bad? (X-post /r/java) : programming]] (summary)
  - [[https://www.excelsiorjet.com/blog/articles/conservative-gc-is-it-really-that-bad/][Conservative GC: Is It Really That Bad? -- Excelsior JET Team Blog]]
- [[https://news.ycombinator.com/item?id=16436574][Conservative GC: Is It Really That Bad? | Hacker News]]
- Real-time garbage collection
  - http://michaelrbernste.in/2013/06/03/real-time-garbage-collection-is-real.html
- Why GC only memory?
  Why not also GC file handles?
  Why not GC all resources?
  - [[https://cs.stackexchange.com/questions/52735/why-does-garbage-collection-extend-only-to-memory-and-not-other-resource-types][Why does garbage collection extend only to memory and not other resource types? - Computer Science Stack Exchange]]
*** Common Lisp advocacy?
2018, article, [[https://academic.oup.com/bib/article/19/3/537/2769437][How the strengths of Lisp-family languages facilitate building complex and flexible bioinformatics applications | Briefings in Bioinformatics | Oxford Academic]]

Common Lisp Object System: [[http://www.aiai.ed.ac.uk/~jeff/clos-guide.html][A Brief Guide to CLOS]]
*** TODO Process these informations
*** Composition, composable systems
- https://en.wikipedia.org/wiki/Software_transactional_memory#Composable_operations
*** Refactoring
- [[https://github.com/PyCQA/baron][github.com/PyCQA/baron]]: "IDE allow you to refactor code, Baron allows you to write refactoring code."
- HaRe Haskell refactoring tool https://github.com/alanz/HaRe
*** ungrouped
- https://medium.com/generative-design/introduction-to-computational-design-6c0fdfb3f1
- magic?
  - http://conal.net/blog/posts/semantic-editor-combinators
- [[https://2017.programmingconference.org/track/refuses-2017][Salon des Refusés 2017]]
*** Designing APIs?
[[http://blog.steveklabnik.com/posts/2012-02-13-an-api-ontology][An API Ontology - Literate Programming]]
** Engineering ethics
Nature is objective, cold, and consistent.
The laws of nature is practically unchanging.

Nature does not care.
If you make wrong calculations, your structure is going to fall and kill people.

When a politician lies, he wins, because he is lying to humans.
When an engineer lies, he loses, because Nature does not care about our beliefs.

Nature does not respect beliefs.

It is easier to tell the truth than to lie.
To lie, one has to think hard to perpetuate the lie.
But politicians don't even lie;
they don't even bother trying to make their lies consistent.
To them, words incite emotion, not convey information.
** Machine-learning database indexing; an index is a model of the data
http://deliprao.com/archives/262

https://arxiv.org/abs/1712.01208

https://blog.codinghorror.com/why-cant-database-tables-index-themselves/
** What is a database that can be scaled up without downtime?
We are willing to sacrifice consistency for tracking data.
** Java stuff
- Grails vs Spring MVC vs Play Framework?
- Eta is GHC ported to JVM.
  - 2017-01-13: Haskell (~ GHC 7.10.3) on JVM: http://eta-lang.org/docs/html/
** Rants
React reinvents Windows 1.0 (1985)[fn::https://bitquabit.com/post/the-more-things-change/]
** <2018-05-30> Enterprise application stack?
- Java 8
- Jetty 9.4 (Servlet API 3.1.0)
- JPA API 1.0.2 (annotations only)
- J2HTML
- PostgreSQL 9.5
- J2HTML-like for C#
  - https://github.com/HtmlTags/htmltags
- Java: Install OpenJDK 8, install IntelliJ IDEA, you're all set.
  - IntelliJ IDEA comes with Maven.
- .NET: Install Mono, install Monodevelop 5.
  - Monodevelop 5 comes with Nuget.
** Git
- Don't use GitFlow.
  Use continuous integration and continuous deployment instead.
  - The =master= branch always builds, always runs, and is always releasable.
  - Everything goes to =master=. Sketches, hotfixes, everything.
  - Avoid non-master long-lived branches.
  - It is OK to introduce half-baked code into =master= as long as it doesn't introduce errors.
    - Use feature switch/toggle.
      - Just because code is in =master= doesn't mean it will be run on production.
    - Work-in-progress doesn't have to be full of errors.
  - Discipline yourself to make small commits and avoid big merges.
  - Discipline yourself to make backward-compatible changes, and deprecate things slowly.
    - Give your users time to migrate.
    - If your changes are always backward-compatible, you will never break someone else's code.
  - You can rebase/tidy up commits that you haven't pushed.
  - Merges and rebases produce the same working tree but have different uses.
    - The computer doesn't care whether you merge or rebase.
    - Merges and rebases exist for the humans.
  - 2017, article, [[https://www.gamasutra.com/blogs/NiklasGray/20170927/306445/Moving_away_from_GitFlow.php][Moving away from GitFlow]]
** Things we use, tools and services?
- vim, text editor
- Management
- Other opinions
  - .NET stack
    - http://engineering.gopangea.com/stack
    - http://engineering.gopangea.com/2015/12/10/why-dot-net.html
** Undigested
- BPMN tool: camunda editor (bpmn.io).
** Software legality?
- Harmony CLA (Contributor License Agreement)?
** Market information, compensation, salary, wage
<2019-01-15> Haskell tutelage $75/hour https://twitter.com/luqui/status/1084837990877327360

I thought about [[file:salary.html][software engineer salary]].

A guy is charging €639 for a two-day F# course[fn::https://www.avanscoperta.it/en/training/practical-machine-learning-with-functional-programming-workshop/]
** What
- 2010, article, "We show how symbolic execution and Satisfiability Modulo Theories (SMT) solvers can be gainfully employed to greatly automate software debugging of evolving programs.", [[https://www.sciencedirect.com/science/article/pii/S1571066110001246][downloadable as pdf]]
  - confusing title: "Debugging as a Science, that too, when your Program is Changing"
- Distilling the best practices and standardizing the tools and processes
  - API (application programming interface) information systems, REST clients, REST API debuggers
    - https://insomnia.rest/
      - source code https://github.com/getinsomnia/insomnia
    - https://www.getpostman.com/
      - not open source https://stackoverflow.com/questions/43380313/postman-main-source-code-repository
  - JOOQ
  - https://zachholman.com/posts/deploying-software
  - IDE (integrated development environment)
    - How do we make an IDE?
      Can we generate an IDE from grammar?
  - How do we put academic research into practice?
    - 1995, article, "Deriving specifications from requirements: an example", [[https://dl.acm.org/citation.cfm?id=225016][paywall]]
    - 1998, article, "Architecture-based runtime software evolution", [[https://dl.acm.org/citation.cfm?id=302181][paywall]]
    - 2000, article, "Bandera: extracting finite-state models from Java source code", [[https://dl.acm.org/citation.cfm?id=337234][paywall]]
      - Is this related with C#'s async-await?
  - metaprogramming
    - "Spoon is a library to analyze, transform, rewrite, transpile Java source code (incl Java 9 & Java 10)." [[https://github.com/INRIA/spoon][source]]
- unread
  - long text: [[http://organizationalphysics.com/2016/10/13/top-down-vs-bottom-up-hierarchy-or-how-to-build-a-self-managed-organization/][Top-down vs. Bottom-up Hierarchy: Or, How to Design a Self-Managed Organization]]
- 2014, article, "Bidirectionally tolerating inconsistency: partial transformations", [[http://groups.inf.ed.ac.uk/bx/fase14.pdf][pdf]]
  - 1990, article, "Tolerating inconsistency", Robert Balzer, [[http://gssi.det.uvigo.es/users/jgd/public_html/doctorado_01-02/p158-balzer.pdf][pdf]]
** Comparing build systems?
- Haskell Shake
- F# FAKE
- Apache Buildr
** dependency management?
- npm dependency hell, how npm2 works, how npm3 works
  - http://npm.github.io/how-npm-works-docs/theory-and-design/dependency-hell.html
* Model-driven software engineering?
Eclipse Epsilon[fn::https://www.eclipse.org/epsilon/] looks interesting,
but Java makes me have second thoughts.
* Bibliography
bibliography:default
