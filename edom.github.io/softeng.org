#+TITLE: Standardizing software development?
#+DATE: 2018-04-11 00:00 +0700
#+OPTIONS: ^:nil toc:nil
#+PERMALINK: /softeng.html
#+MATHJAX: t
#+TOC: headlines 1
#+TOC: headlines 2
#+TOC: headlines 3
* Goal
The goal is to make /the/ programming language.

/The/ ultimate best programming language?
** What is programming language research for?
A goal of programming language research is to make a better programming language (if not the best).
Do more with less.
** Jargon is necessary for concision (high information transfer rate)
In different fields of studies, we invent jargons for concision, to speed up information transmission, to convey more meaning in shorter time with less words.
** Envisioned usage? Infrastructure engineers and suprastructure engineers?
- Suprastructure software engineer captures business logic into high-level program.
  - Source code should be human-readable article.
  - This steps focuses on describing what things exist and the relationships between them.
  - This steps focuses on modeling.
- Infrastructure software engineer maps high-level languages to low-level languages.
  - Example of low-level programming language: Java, C#, C++, C, SQL, Scheme, Lisp, Haskell.
  - This steps focuses on the modeling language.
- some mention of "suprastructure" and "infrastructure" https://en.wikipedia.org/wiki/Process_architecture
*** Language-oriented programming, domain-specific languages (DSLs)
The 2010 article "Using DSLs for Developing Enterprise Systems" [[https://research.cyber.ee/simpl/enterprise-dsl.pdf][pdf]]:

- It uses the terms "language engineer", "transformation specialist", and "business engineer".
- It defines several usage scenarios of DSLs.
- It defines five criteria for comparing DSL tools.
- It compares some DSL tools.

That paper should have been a wiki article.
** But software engineers can't just assume that users are going to wait forever, that memory is unlimited, that network is always up and fast, etc.?
** Communities and other people with related goals
*** Communities
- #proglangdesign community
  - their wiki https://github.com/proglangdesign/proglangdesign-wiki/wiki
  - their reddit https://www.reddit.com/r/ProgrammingLanguages/
  - their website https://www.proglangdesign.net/
*** People
- <2018-10-04> [[http://www.cs.umd.edu/~dvanhorn/][David Van Horn]] "I work toward making the construction of reusable, trusted software components possible and effective"
*** Finding giants whose shoulders we want to stand on, for building the programming language
- These languages are interesting starting points:
  - [[https://github.com/ollef/sixten][Sixten]]
  - Dhall
  - [[http://www.haskellforall.com/2014/09/morte-intermediate-language-for-super.html][Morte: an intermediate language for super-optimizing functional programs]]
  - [[https://www.reddit.com/r/haskell/comments/27z7yw/is_there_such_a_thing_as_a_lowlevel_functional/][Is there such a thing as a low-level functional language? : haskell]]
    - ATS and Rust
  - [[https://www.quora.com/What-are-some-of-the-most-abstract-programming-languages-in-2015][What are some of the most abstract programming languages in 2015? - Quora]]
  - Midori
  - Mercury
  - Perl 6?
- Designing programming languages:
  - 2018 article "Interdisciplinary Programming Language Design" [[http://www.cs.cmu.edu/~mcoblenz/HCPLD-preprint.pdf][pdf]]
  - 2018 article "A Programmable Programming Language" [[http://silo.cs.indiana.edu:8346/c211/impatient/cacm-draft.pdf][pdf]]
  - 2018 article "Combining Model Checking and Testing" [[https://www.cis.upenn.edu/~alur/CIS673/testing.pdf][pdf]]
  - 2013 article "Idris, a General Purpose Dependently Typed Programming Language: Design and Implementation" [[https://eb.host.cs.st-andrews.ac.uk/drafts/impldtp.pdf][pdf]]
  - 2007 article "Position Paper: Thoughts on Programming with Proof Assistants" [[https://ac.els-cdn.com/S1571066107002502/1-s2.0-S1571066107002502-main.pdf?_tid=19c6192b-ca57-4ef0-9403-1cfb624c817c&acdnat=1535488824_78a2c31f390f3a1fb72f0c31024f2495][pdf]]
  - 1996 article "Seven Deadly Sins of Introductory Programming Language Design" [[https://pdfs.semanticscholar.org/d314/78c5b95c399b6418b41011debefbc699c633.pdf][pdf]]
  - 1996 book "Advanced programming language design" [[https://www.researchgate.net/profile/Raphael_Finkel/publication/220692467_Advanced_programming_language_design/links/0c96052af3e324bf31000000/Advanced-programming-language-design.pdf][pdf]]
  - 1973 article "Hints on Programming Language Design" [[http://www.dtic.mil/dtic/tr/fulltext/u2/773391.pdf][pdf]]
- Finding recent programming language research:
  - meetings, conferences, symposiums
    - [[https://twitter.com/poplconf?lang=en][POPL on Twitter]].
      Its full name is "ACM SIGPLAN Symposium on Principles of Programming Languages".
  - collections, links, aggregators
    - https://www.cs.cmu.edu/~mleone/language-research.html
- What already exists?
  - [[https://tomassetti.me/resources-create-programming-languages/][68 Resources on creating programming languages]]
  - 2004, book, "Programming language design concepts"
  - https://en.wikipedia.org/wiki/Expression_problem
  - don't repeat yourself
    - https://en.wikipedia.org/wiki/Generic_programming
      - parametric polymorphism
  - Safely Composable Type-Specific Languages https://www.cs.cmu.edu/~aldrich/papers/ecoop14-tsls.pdf
- books
  - books recommended by courses related to programming language research
    - http://plus.kaist.ac.kr/~han/courses/cs520/
    - https://www.cl.cam.ac.uk/teaching/1516/ConceptsPL/
    - https://en.wikipedia.org/wiki/Programming_language_theory#Further_reading
  - 1995, book, "Syntax and semantics of programming languages", Slonneger & Kurtz http://homepage.divms.uiowa.edu/~slonnegr/plf/Book/
- 2017, PhD thesis, [[http://tomasp.net/academic/theses/coeffects/]["Context-aware programming languages"]]
  - [[http://tomasp.net/coeffects/][amazingly empathic considerate presentation that has the audience in mind]]
    - if only all PhD theses are presented that way
      - if only everybody writes that way
- 2014, book, Odersky, "Scala by example"
  - perhaps the best way to learn Scala for non-Scala programmers
- https://en.wikipedia.org/wiki/John_C._Reynolds
  - 2014, [[http://www.cs.bham.ac.uk/~udr/papers/EssenceOfReynolds.pdf][The essence of Reynolds]]
    - 1998, Reynolds, "Theories of programming languages"
- a list of people http://www.angelfire.com/tx4/cus/people/index.html
- other people's collections
  - https://github.com/steshaw/plt
- google search for "haskell code generation"
  - [[https://www.joachim-breitner.de/blog/719-veggies__Haskell_code_generation_from_scratch][veggies: Haskell code generation from scratch -- Blog -- Joachim Breitner's Homepage]]
    - [[https://www.reddit.com/r/haskell/comments/66q87y/veggies_haskell_code_generation_from_scratch/][veggies: Haskell code generation from scratch : haskell]]
  - [[https://www.bytelabs.org/project/haskell-bottom-up-rewrite-generator/][HBURG - Haskell Bottom Up Rewrite Generator | ByteLabs]]
- software development is software too
  - meta-language
    - 2016, "JunGL: a Scripting Language for Refactoring", [[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.94.859&rep=rep1&type=pdf][pdf]]
**** People who share the vision for /the/ programming language

- [[https://brianmckenna.org/blog/polymorphic_programming][Polymorphic Programming - BAM Weblog]]

  - has some links
  - 2017, article, "Compiling to Categories", Conal Elliott, [[http://conal.net/papers/compiling-to-categories/compiling-to-categories.pdf][pdf]]
  - Is this 1969 article related? Can't be found online.

    - https://en.wikipedia.org/wiki/Polymorphic_Programming_Language

  - Are these related?

    - 1989, article, "Database Programming in Machiavelli -- a Polymorphic Language with Static Type Inference", [[http://homepages.inf.ed.ac.uk/opb/papers/SIGMOD89.pdf][pdf]]

- Can we use Description Logic (the theoretical foundations of Web Ontology Language OWL) to generate software, especially enterprise applications?

  - 2015, article, [[https://arxiv.org/abs/1503.01723][[1503.01723] Modelling the Semantic Web using a Type System]]
  - 2005, article, "Software engineering ontologies and their implementation", [[https://espace.curtin.edu.au/bitstream/handle/20.500.11937/9549/19598_downloaded_stream_116.pdf][pdf]], [[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.86.5585&rep=rep1&type=pdf][pdf copy]]

**** People who share some of the vision but don't go far enough
- XForms

  - 2016, article, [[https://link.springer.com/article/10.1007/s11280-015-0339-z][Leveraging declarative languages in web application development - SpringerLink]]
  - 2014, slides, advocacy, [[https://homepages.cwi.nl/~steven/Talks/2014/01-31-declarative/][Declarative Web Applications]]

- 2007, workshop, [[https://www.w3.org/2007/02/dmdwa-ws/][Declarative Models of Distributed Web Applications]]
- [[http://www.proglangdesign.net/][#proglangdesign]]
- IDE (integrated development environment), editor

  - Given a grammar, the computer should generate an IDE for us.
    Syntax highlighting.
    Refactoring.
  - https://hackage.haskell.org/package/treersec "Build a structure editor for a programming language from combinators following the grammar."
  - http://www.lamdu.org/
  - cirru https://news.ycombinator.com/item?id=13773813

    - lots of similar things https://news.ycombinator.com/item?id=13774864

  - isomorf: find code fragment popularity by structure (not-only-text) comparison https://isomorf.io/#!/tours/of/overview/7/haskell

- supercompilation, specialization, partial evaluation

  - Haskell supercompilation?

    - GHC
    - Supero
    - Morte

      - https://github.com/Gabriel439/Haskell-Morte-Library

        - "Morte is a super-optimizing intermediate language for functional languages."

      - http://www.haskellforall.com/2014/09/morte-intermediate-language-for-super.html

  - [[http://thyer.name/phd-thesis/thesis-thyer.pdf][Thyer's PhD thesis "Lazy specialization"]] has an accessible introduction to lambda calculus in Chapter 2.

    - "Tower of interpreters" test
    - 2018, "Collapsing towers of interpreters" http://lampwww.epfl.ch/~amin/pub/collapsing-towers.pdf

      - "It is well known that /staging/ an interpreter -- making it generate code whenever it would normally interpret an expression -- yields a compiler [...]"

  - 1991, "A partial evaluator for the untyped lambda-calculus", [[https://www.cambridge.org/core/journals/journal-of-functional-programming/article/a-partial-evaluator-for-the-untyped-lambda-calculus/EE324F936F0A009B6766B13FF6755DFC][paywall]]

    - related: semantic-directed code generation?

  - Gabriel Gonzales stuff: Morte, Dhall.
  - [[http://lambda-the-ultimate.org/node/2739][LTU: Ongoing work on Supercompilation of Java code (or supercompilation in general)?]]

- [[https://medium.com/@McCosmos/a-treatise-on-cosmos-the-new-programming-language-905be69eb4af][A Treatise on Cosmos ---the New Programming Language]]

  - procedural-looking logic programming language

- syntax

  - [[https://en.wikipedia.org/wiki/Off-side_rule][WP:Off-side rule]], indentation as block delimiter

- [[http://wiki.c2.com/?QuestForThePerfectLanguage][Quest For The Perfect Language]]
* What is software engineering?
(I moved some contents to file:philo.org).
** Ontology and jargon
A /language/ is something that has syntax (form) and semantics (meaning).

A language enables its users to /communicate/ with each other.

A language is formed by the agreements of its users.

A /formal language/ ...

A /programming language/ is a formal language that is used for programming (a machine).

To program a machine is ...?

A /program/ is a formula/string/term in a programming language?

A machine can be modeled by a formal system.

A program is an executable mathematical object?
** <2018-09-25> Software is broken and bloated
- [[http://tonsky.me/blog/disenchantment/][Software disenchantment @ tonsky.me]]
- [[https://www.hanselman.com/blog/EverythingsBrokenAndNobodysUpset.aspx][Scott Hanselman: "Software doesn't work. I'm shocked at how often we put up with it."]]
** Why is hardware more standardized than software?
Hardware standardization benefits everyone (both its makers and its users).
Hardware unstandardization is more expensive than hardware standardization.

Software standardization is more expensive than software unstandardization.

Is software too malleable?

Hardware engineers have standard nuts, bolts, connectors, and components.

Why standardize?

- standardization reduces cost
- standardization reduces duplicate effort
- standardization improves interoperability

Hypothesis:
Programming language is too free.
If programming language is limited (that is, if there is only one way to do one thing),
then software will standardize itself.

There are some software standards, such as ABIs (Application Binary Interfaces).
C calling convention is a standard.
** How do we write lasting software?
- Clear ontology
- Task-oriented documentation
  - Documentation doesn't have to be separate from code.
- /Capture/ the requirement.
  Translate the requirement into software, instead of making a software system that /satisfies/ the requirement.
  - The program may be rewritten, but the functional requirements, the business logic and the mathematical truths rarely change.
    - In order to make software last, we must /capture/ the requirements, not make a system that satisfies the requirements.
      This requires a change in mindset.
      The software is not something made to some requirements; the software is the requirements itself.
      The software is not the shirt made-to-order; the software is the order itself, from which all satisfying shirts can be generated/derived/produced.
- Think for yourself.
  Don't just follow hypes.
  Always have a reason when doing things.
  Record your reasoning for your forgetful future self.
- Design software to be refactored without surprises.
  - Example: Avoid runtime reflection (unless for the most obvious cases).
    An alternative to that is code generation.
    - Help the compiler help you.
    - Even the most obvious cases aren't obvious to someone who see the code for the first time?
- Shorten the edit-compile-test cycle. Design software so that it compiles fast and it starts up fast.
- What else?
** Adding people to a late software project makes it later (Fred Brooks, "No silver bullet").
Newcoming programmers, no matter how experienced, need time to onboard; they are not immediately productive.
Existing programmers must spend some time helping the newcoming programmers, temporarily reducing productivity even further.
** Complexity
*** Renaat Verbruggen: Three universal methods of reducing complexity: partitioning, hierarchy, independence
- [[http://www.computing.dcu.ie/~renaat/ca2/ca214/ca214vii.html][Renaat Verbruggen: Three universal methods of reducing complexity]]: partitioning, hierarchy, independence
  - It also applies to other things, such as organizing this wiki.
*** How complex systems fail?
- 2000, article, "How complex systems fail", [[http://web.mit.edu/2.75/resources/random/How%20Complex%20Systems%20Fail.pdf][pdf]]
** Defining software complexity as the length of the shortest first-order-logic formula that describes it?
Every software can, in principle, be described by a first-order-logic formula that describes the requirements satisfied or behaviors exhibited by the system.
*** What is complexity?
- [[https://fs.blog/2014/03/what-is-complexity/][Farnam Street blog post]]
- [[http://www.hartford.edu/complexity/whats-complexity.aspx][What Is 'Complexity'? | University of Hartford]]
- Measuring software complexity by hits-of-code instead of lines-of-code
  https://www.yegor256.com/2014/11/14/hits-of-code.html
** Unpopular opinions
- https://www.quora.com/What-unpopular-opinions-do-you-have-about-software-development
** TODO Measuring developer productivity
- 2004 article "Defining and measuring the productivity of programming languages" [[https://pdfs.semanticscholar.org/1852/9ff58460b6238f5095af073d8505d79d3264.pdf][pdf]]:
  - It defines these metrics:
    - "the time and effort required to write, debug, and tune the code"
    - "the performance of the code that results"
  - power-efficiency graph (human efficiency and machine efficiency)
  - what else?
- 2008 https://ifs.host.cs.st-andrews.ac.uk/Books/SE9/Web/Planning/productivity.html
  - https://ifs.host.cs.st-andrews.ac.uk/Books/SE9/
- 1992 article https://www.andrews.edu/~vyhmeisr/papers/progprod.html
- 2012 article http://www.drdobbs.com/jvm/the-comparative-productivity-of-programm/240005881
  - "A database comparing 6,000 projects shows that the choice of programming language has a significant impact on project schedule."
** Who reads SWEBOK? How can we read SWEBOK? Who reads all of it? Why does anyone bother writing it?
- https://en.wikipedia.org/wiki/Software_Engineering_Body_of_Knowledge
- http://www.sebokwiki.org/wiki/An_Overview_of_the_SWEBOK_Guide
  - <2017-04-27>
    Someone claims to have read it.
    Holy shit.
    https://www.quora.com/Do-you-use-SWEBOK-Is-it-helpful
- Is the knowledge applicable?
  Knowledge that can't be applied is useless.
** Model vs reality
- When we write a program,
  we are actually creating a /mathematical model/ of reality,
  creating an implicit ontology,
  defining what exist,
  making simplifying assumptions,
  discarding irrelevant aspects.
** Most "bugs" are actually "programming errors".
Programmers need to own up their mistakes, and call an error an error, not a bug.
A bug is something the programmer cannot control.
A cosmic ray strike flipping a bit in RAM is a bug.
A typo in the source code is not a bug.
** Coupling
- Coupling is deciding what you can depend on.
  - Big Company X just released this new cool stuff, but will it still be there in 5 years?
** Testing
*** If proving is cheap, prove it instead of testing it.
*** Amount of testing should be proportional to risk.
- How do we make code testable?
  - Minimize its dependencies.
  - Minimize the number of things that you must set up before you can run it.
  - Why?
    - If you don't satisfy all its dependencies, you can't run it.
    - If you can't run it, you can't test it.
    - If your business logic depends on the database, you'll have to set up a database to test your business logic.
- What do we need to test?
  - Testing is proportional to risk.
    - Riskier code should be tested more.
      - "Risk comes from not knowing what you're doing." (Warren Buffett)
        - Buffett said that for investing, but it also applies to programming.
  - If it's obvious, don't test it. (Getters, setters, and DAOs without fancy logic)
  - If you can prove it, don't test it.
** TODO Compare programming language research journals and conferences
Which ones should we care about?
Which ones are the real deal?
*** Conferences
- ICFP: The ACM SIGPLAN International Conference on Functional Programming
- OOPSLA: ACM SIGPLAN Object-Oriented Programming, Systems, Languages & Applications
https://en.wikipedia.org/wiki/OOPSLA
- PLDI: ACM SIGPLAN Programming Language Design and Implementation
http://www.sigplan.org/Conferences/PLDI/
- POPL: ACM SIGPLAN Principles of Programming Languages
http://www.sigplan.org/Conferences/POPL/
*** Proceedings
- PACMPL: Proceedings of the ACM on Programming Languages
*** DBLP vs Semantic Scholar?
https://dblp.uni-trier.de/
** Software engineer associations
   :PROPERTIES:
   :CUSTOM_ID: software-engineer-associations
   :END:

- Indonesia

  - [[http://sarccom.org/][SARCCOM Software architect Indonesia community]]
  - [[http://www.aspiluki.or.id/][ASPILUKI Asosiasi Piranti Lunak Telematika Indonesia]]

- International?
** Software business model
- Hardware is moved.
- Software is /copied/, not moved.
- When you sell hardware, you /transfer/ ownership. The hardware doesn't multiple into two.
- There are two models:
  - SaaS (software as a service, a web application; you control the hardware that runs the software, but not the input and output of the process)
  - bundling software with restricted hardware (Apple iPhone)
- Controlling software requires controlling the hardware that runs it.
  - Controlling the law requires controlling the lawmakers and the law enforcers.
- Isn't it absurd to judge a crime by its potentiality not its actuality?
- Process is software. Law is software.
- The chemical process in a chemical plant is also software, but not everyone owns a chemical plant.
  - If you hire a chemical engineer to design and implement your chemical plant's process, does the chemical engineer own the rights to the process?
  - If you hire a software to design and implement your computer's operating system, does the software engineer own the rights to the operating system?

Ownership is the ability to control access.
To own a thing is to be able to control the access to that thing.

- It is easy to control access to hardware. Nature/physics is with us on this issue.
- It isn't easy to control access to software.

- https://medium.com/@mattklein123/the-broken-economics-of-oss-5a1b31fc0182
** Measuring software quality?
- https://cs.stackexchange.com/questions/47077/is-there-a-way-of-objectively-measuring-the-efficiency-or-quality-of-software-or
** Programming language quality?
- https://medium.com/@richardeng/how-to-measure-programming-language-complexity-afe4f7e75786
- https://medium.com/concerning-pharo/elegant-pharo-code-bb590f0856d0
** Technical writing, software documentation
- https://www.divio.com/blog/documentation/:
"Documentation needs to include and be structured around its *four different functions*: /tutorials, how-to guides, explanation and technical reference/.
Each of them *requires a distinct mode of writing*."
** TODO Who said this "pit of success"? It was someone on the Internet.
- Write code that makes your client/user/reader (another programmer who uses your code) fall into the pit of success.
- Corollary: Principle of least astonishment.
- Corollary: Write code that a programmer can understand with an IDE without having to read much documentation.
- Corollary: Group data and methods that need those data together in one class.
- Can that principle derive these principles? http://c2.com/cgi/wiki?PrinciplesOfObjectOrientedDesign
- You can write maintainable and reliable procedural code?
* Functional programming

Every functional programming language is lambda calculus plus plus.

Functional programming is lambda calculus plus plus.

* Designing the programming language
** <2018-10-20> Change of opinion; We should write the language in Prolog instead of Haskell.
- 2004, parsing in Prolog, "Parsing and Semantics in DCGs" http://www.inf.ed.ac.uk/teaching/courses/aipp/lecture_slides/11_PS_DCGs.pdf
- Prolog DCG (definite clause grammar) facilitates writing an attribute grammar.
- https://en.wikipedia.org/wiki/Definite_clause_grammar
** Who use programming languages?
A programming language serves as a means of communication in three cases:

- human-to-human:
- human-to-machine:
- machine-to-machine:

We advance technologically when we raise the bar for machines (we expect more from machines), not when we expect more from humans.
(?)
** Encoding length trade-off
- If we choose to encode something shorter in a language, then other things must be encoded longer.
  - If we make it easier to do something, something else has to become harder.
** Programming Languages Zoo
"The Programming Languages Zoo is a collection of miniature programming languages which demonstrates various concepts and techniques used in programming language design and implementation. It is a good starting point for those who would like to implement their own programming language, or just learn how it is done."
http://plzoo.andrej.com/
** Introduction
*** Goal
The goal is to build a usable formal language up from lambda calculus.

A /formal human language/ is a formal language that humans use to precisely (unambiguously) communicate technicalities to other humans
in a way that is also feasible to machine translation using classical compiler techniques.
*** Examples of extending lambda calculus
- [[https://sites.ualberta.ca/~jhoover/325/CourseNotes/section/UntypedLambda.htm][Functional Programming - 12. The Extended Untyped lambda Calculus]]
- STLC = simply-typed lambda calculus
- [[https://softwarefoundations.cis.upenn.edu/plf-current/MoreStlc.html][Extending STLC]]
- 1982 article "A consistent extension of the lambda-calculus as a base for functional programming languages", https://www.sciencedirect.com/science/article/pii/S0019995882904582
- "Extending the Lambda Calculus: An Eager Functional Language", [[http://www.cs.yale.edu/homes/hudak/CS430F07/LectureSlides/Reynolds-ch11.pdf][pdf slides]]
**** TODO Study OCaml
Caml begets Caml Light begets OCaml.
- https://ocaml.org/
- [[https://caml.inria.fr/pub/docs/manual-ocaml/coreexamples.html]]
- https://caml.inria.fr/resources/doc/faq/core.en.html
*** Alternative titles
- "How far can we push Scheme/Lisp?"
*** Principles
**** Refer to mathematics, logic, and English.
**** Solve the root cause; don't hack.
**** Interoperate with existing systems. Improve existing systems. Enable replacement, but don't require it.
*** Other people's opinions about designing programming languages
- http://www.inquisition.ca/en/info/gepsypl/rules.htm
- 2015 dissertation "Evidence-based programming language design: a philosophical and methodological exploration",
  [[https://jyx.jyu.fi/handle/123456789/47698][abstract]],
  [[https://jyx.jyu.fi/bitstream/handle/123456789/47698/978-951-39-6388-0_vaitos04122015.pdf][pdf]]
  - It's mostly philosophy of what "evidence-based" means.
  - It doesn't design a programming language.
  - It could have been shorter.
- https://www.reddit.com/r/ProgrammingLanguages/comments/9ep9xq/what_i_did_not_steal_from_perl_6/
  - "What's a character?" https://www.perlmonks.org/?node_id=1214956
- https://www.reddit.com/r/ProgrammingLanguages/comments/9eqrfy/what_are_the_biggest_problems_with_programming/
- 2017 article "The End of History? Using a Proof Assistant to Replace Language Design with Library Design" [[https://www.cs.purdue.edu/homes/bendy/Fiat/fiat-snapl.pdf][pdf]]
- [[http://purduepl.github.io/index.html][Purdue university programming languages group]]
*** Shopping for ideas
- [[https://www.reddit.com/r/ProgrammingLanguages/comments/8vcrzb/what_are_some_interesting_language_features_that/][What are some interesting language features that may not be well known? : ProgrammingLanguages]]
- https://softwareengineering.stackexchange.com/questions/55047/what-is-the-greatest-design-flaw-you-have-faced-in-any-programming-language
- https://www.reddit.com/r/ProgrammingLanguages/comments/9erq87/languages_with_separate_types_for_pointers_to_the/
- http://math.andrej.com/2009/05/29/mathematically-structured-but-not-necessarily-functional-programming/
- read, "true sums of products" http://hackage.haskell.org/package/generics-sop
** Lambda calculus
Lambda calculus formalizes binding and substitution.

Follow [[https://crypto.stanford.edu/~blynn/lambda/][Ben Lynn's lambda-calculus tutorial]]:

- why use lambda calculus as theoretical basis (cool reasons!)
*** Beta-reduction
- reduce : E -> E
- reduce ((\ x -> y) p) = reduce (y[x:=p])
  - y[x:=p] means y but with every bound occurence of x replaced with p)
- reduce x = x otherwise
** Strings, especially of characters
A /string/ is a homogenous sequence.

A string has a beginning, and may have an ending.
A string may be finite.

A /byte string/ is a sequence of bytes.

An /ASCII string/ is a byte string.

A /character string/ is a sequence of characters.

Unqualified "string" usually means "character string".

A /character string literal/ is surrounded with quotes.

- inconclusive discussion https://www.reddit.com/r/ProgrammingLanguages/comments/9tj6ka/how_would_you_best_implement_first_class_strings/
*** Escape sequences
*** Characters
What is Unicode's definition of "character"?
Is that definition sane?

Should Unicode normalization/canonicalization be built into the programming language?

Issues: ordering/collation, capitalization, combination, halfwidthization, ligature, etc.

- https://en.wikipedia.org/wiki/String_(computer_science)
- https://en.wikipedia.org/wiki/Character_(computing)
** Macro, reflection, reification, quoting
The language should be a model of itself.

The language should be able to describe itself.

Does that cause a paradox?
** What program, execution, and termination mean in declarative paradigms

In functional paradigm:

- The program is a big lambda expression.
- Execution is beta-reduction / term-rewriting.
- Execution terminates when the program reaches normal form (is no longer beta-reducible).

In satisfying-logic paradigm:

- The program is a big logic formula.
- Execution is trying to satisfy the formula.
- Execution terminates when satisfiability is determined.

In theorem-proving paradigm:

- The program is a big logic formula, presumably in conjunctive-normal form.
- Execution is trying to prove the main(world) goal.
- Execution terminates when the goal is proved or disproved.

** Records, also for namespaces and modules

We want records because /records obviate namespaces and modules/.

We want namespaces and modules because they are necessary for humans to manage large programs.

*** We don't want to represent records as functions.

We can describe the semantics of a record r as a function r : string -> expression.

There are several options to pretty-print a record:

- Define a =show-record= function that is different from =show=.
- But we want polymorphic =show=. We want one =show= function to work for all things.
- If a record is represented by a lambda abstraction, then pretty-printing the record will pretty-print a lambda abstraction.
  We don't want that.
  We want pretty-printed records to look like how we write records.

*** We want records to be applicable like lambda; we add a new beta-reduction rule for "applying" records.

Record access is function application.
To get the field =fld= or record =rec=, evaluate =rec fld=.

The record =rec= with the the field =fld= updated to =new= is the expression =\ name -> IF name = fld THEN new ELSE rec fld=.

We add this beta-reduction rule:

- If X is a record, and Y is a string, then =X Y= reduces to =get X Y=.

We want to pretend that records are functions.
We want to use records as if they were functions.
But we don't want records to be functions; we want to pretty-print records as records, not as lambda abstractions.

*** Modules as record functions

A module is a function taking a record and giving a record.
The input is called /imports/ or /dependencies/.
The output is called /exports/.

Example:

#+BEGIN_EXAMPLE
\ { add; } -> { add_one: \ x -> add x 1; }
#+END_EXAMPLE

*** Record expressions

We add these expression syntax rules:

- If each of x1,...,xn is a label and each of e1,...,en is an expression, then ={x1:e1; ...; xn:en;}= is a /record expression/.
- =union R S= is a /record union expression/.
- record update expression (should be polymorphic)
- record filtering/selection/intersection expression

An example of a record expression is ={id: \ x -> x; app: \ f x -> f x;}=.

*** Labels

A /label/ is a string.
If the label doesn't contain funny characters, it doesn't have to be quoted.
For example, ={"a":1;}= and ={a:1;}= are the same thing.

Should we generalize label to expression?
** Annotations: user-defined metadata attached to concrete syntax tree nodes

We add these expression syntax rules:

- If M is an expression and E is an expression, then =E : M= (read: data E annotated with metadata M) is an /annotated expression/.
  - Alternative syntax: =E : M= can also be written =meta M E=.

This generalizes type systems.
With type systems, you annotate an expression with a type expression.
With general annotations, you annotate an expression with another expression (some of which are type expressions).

We assume that the outermost metadata update wins:

- meta M (meta N E) = meta M E

We add metadata extraction function symbol =meta-of=.

We add these beta-reduction rules:

- reduce (meta M E) = reduce E
- reduce (meta-of (meta M E)) = reduce M
- reduce (meta-of E) = #<empty-record> (for expressions without metadata)

This is like Java/C# annotation but more principled?

*** Annotation is not type

This is an example of type annotation that our annotation above can't handle: =\ (x : T) -> y=,
because =x= is not an expression.
** Let-expressions

The /let-expression/ =let x1 = y1; ...; xn = yn; in z;= desugars to =(\ x1 ... xn -> z) y1 ... yn=.

Let-expressions is for readability by humans.

Do we still need let-expressions if our program is well-factored?

*** let-expressions may recur

I think letrec is ugly.
All let-expression should allow recursion, like Haskell's.

https://stackoverflow.com/questions/28796904/whats-the-reason-of-let-rec-for-impure-functional-language-ocaml/28798040
** Sharing, laziness, full laziness, complete laziness, and optimal reduction

- https://www.reddit.com/r/haskell/comments/3pa5ii/are_optimal_evaluators_actually_optimal/
  - https://cstheory.stackexchange.com/questions/32850/are-optimal-evaluators-actually-optimal

*** Sharing

- Should the programmer care about sharing?
- sigma-calculus?
- Should the programmer decide whether to share or not?
- Is there a best sharing strategy?
- Should the machine guess by heuristics?

Sharing affects performance, but does not change the result.
Should we care?

*** Example of sharing

Consider the expression letexp defined as =let x = y in z;=.

We want x to be shared iff doing so speeds up the reduction of letexp.

This is always the case:

- If x occurs /at most once/ in z, we always want x not shared.

These depend on circumstances:

- If y is expensive, we want x shared.
- If y is cheap, we want x not shared.

How do we define "expensive"?

*** Lazy accumulation problem

#+BEGIN_EXAMPLE
sum a 0 = a
sum a

sum 0 = 0
sum n = n + sum (n - 1)
#+END_EXAMPLE
** Currying is not compatible with vararg and named parameters?

Vararg stands for "variable-length arguments".

Do we want currying?

Currying simplifies language user but complicates compiler writer.

The problems:

- https://softwareengineering.stackexchange.com/questions/286231/is-it-possible-to-have-currying-and-variadic-function-at-the-same-time
- http://tolmasky.com/2016/03/24/generalizing-jsx/

** Modeling all data

*** Hypothesis: data = ADTs + records + row polymorphism

Hypothesis: All data can be modeled by a combination of these:

- product (tuple)
- sum (alternative, union)
- record (tuple with named components)
- row polymorphism

Can we use web standards to define an ontology (so we can use Protege to edit it)?
https://protege.stanford.edu/

- Does Eclipse EMF have textual representation?

*** Church-representation of products, sums, and algebraic data types in general

https://en.wikipedia.org/wiki/Lambda_calculus#Pairs

Let [x] mean the /representation/ of x.

A /product/ (a,b) can be represented as [(a,b)] = \ f -> f [a] [b].

The left projection p1 is represented as [p1] = \ p -> p (\ a b -> a).

If we assume the sum type A + B, then:

- The choice inl a can be represented as [inl a] = \ f g -> f [a].
- The choice inr b can be represented as [inr b] = \ f g -> g [b].

A recursive data type such as "stream a = (a, stream a)" can be represented as:

- [cons h t] = \ f -> f [h] [t].

Thus [a : b : c : ...] = \ f -> f [a] (\ f -> f [b] (\ f -> f [c] ...)).

A recursive data type such as "list a = nil | cons a (list a)" can be represented as:

- [nil] = \ f g -> f.
- [cons x y] = \ f g -> g [x] [y].

Natural numbers "nat = z | s nat":

- [z] = \ f g -> f.
- [s x] = \ f g -> g [x].

Thus:

- [s z] = \ f g -> g (\ f g -> f)

*** Reverse semantics

Semantics maps syntax to mathematical object.

Reverse semantics maps mathematical object to syntax.
Reverse semantics is representation.
Reverse semantics is realization.

Example of reverse semantics is representing the tuple =(x,y)= with the lambda abstraction =\ f -> f [x] [y]= where =[x]= denotes the representation of x.

https://en.wikipedia.org/wiki/Realizability

*** Self-interpreter

1994 article "Efficient Self-Interpretation in Lambda Calculus"
** Representing knowledge; logic programming; symbolic AI
- https://en.wikipedia.org/wiki/Logic_programming#Knowledge_representation
- https://en.wikipedia.org/wiki/Knowledge_representation_and_reasoning

Example: We encode "a todo item has an int64 id" as

#+BEGIN_EXAMPLE
IF entity todo_app todo E THEN property E int64 id.
#+END_EXAMPLE
** Dynamic binding, contextual holes

- 1996 article "Enriching the lambda calculus with contexts: toward a theory of incremental program construction" https://dl.acm.org/citation.cfm?id=232652
- 1998 article "A lambda-calculus for dynamic binding" https://core.ac.uk/download/pdf/82810390.pdf
- 1998 article "Computing with Contexts: A simple approach" https://core.ac.uk/download/pdf/82065430.pdf
- 2009 article "Two-level Lambda-calculus" https://www.sciencedirect.com/science/article/pii/S1571066109002400

** Working with existing systems
*** Working with Java
** Semantics (should we worry about this earlier?)

*** Cost model

- "Cost models based on the lambda-calculus", [[http://www.cs.cmu.edu/~guyb/papers/lambdaInria.pdf][pdf slides]], from http://www.cs.cmu.edu/~guyb/

*** Denotational semantics

**** Intro to denotational semantics

- 1971, monograph, Dana Scott and Christopher Strachey, "Toward a mathematical semantics for computer languages", [[https://www.cs.ox.ac.uk/files/3228/PRG06.pdf][pdf]]
- [[https://pdfs.semanticscholar.org/presentation/76cd/955ec6dafde3699d64e50882ec7fb4384803.pdf][pdf slides]]
- [[https://www.seas.harvard.edu/courses/cs152/2016sp/sections/sec-2016-02-18-soln.pdf][Exercises]] about denotational semantics and lambda calculus
- 1997, book, "Denotational semantics: a methodology for language development", [[http://www.bcl.hamilton.ie/~barak/teach/F2008/NUIM/CS424/texts/ds.pdf][pdf]]
- 1989, PhD thesis, Frank Steven Kent Silbermann, "A Denotational Semantics Approach to Functional and Logic Programming", chapter 3, [[http://www.cs.unc.edu/techreports/89-030.pdf][pdf]]
  - "A novel approach is taken in constructing an operational semantics directly from the denotational description."

**** TODO Does lambda calculus have a semantics that doesn't depend on reduction strategy?

*** Operational semantics and evaluation/reduction strategy

Which one should we choose, and why?

- call-by-name
- call-by-value
- call-by-need
- what else?

<2018-09-29> Wikipedia needs cleanup:

- https://en.wikipedia.org/wiki/Reduction_strategy_(lambda_calculus)
- https://en.wikipedia.org/wiki/Lambda_calculus#Reduction_strategies
- https://en.wikipedia.org/wiki/Evaluation_strategy
** Overloadable function application?
** Interpreters: Giving different meanings to the same syntax

Sometimes we want to interpret the same syntax (appearance, source code, text) differently.

** System F, System F with subtyping, System F-omega

https://en.wikipedia.org/wiki/System_F

"System F is rich enough that the self-application =\x.x x= is typable." https://crypto.stanford.edu/~blynn/lambda/systemf.html

Brown and Palsberg, "Breaking Through the Normalization Barrier: A Self-Interpreter for F-omega"

** Imperative subset

Haskell's ST monad enables us to embed a local imperative program in a functional program.

** Introduction?

- unknown-year lecture notes "Lambda Calculus as a Programming Language" [[http://andrei.clubcisco.ro/cursuri/2pp/01.Lambda_prog.pdf][pdf]]

I thought lambda calculus could be summarized in one page, but Henk Barendregt wrote hundreds of pages about it. Is there more to lambda calculus than it seems?

- 1994, 50 pages, [[http://www.nyu.edu/projects/barker/Lambda/barendregt.94.pdf][pdf]]
- 1991, 190 pages, [[https://people.mpi-sws.org/~dreyer/tor/papers/barendregt.pdf][pdf]]

** Extending lambda-calculus with various bells and whistles

- Vectorial lambda-calculus

  - The 2013 article "The Vectorial Lambda-Calculus" [[https://who.rocq.inria.fr/Alejandro.Diaz-Caro/TheVectorialCalculus.pdf][pdf]] adds vectors and matrices and their types to lambda calculus.
  - The 2010 article "Semantics of a Typed Algebraic Lambda-Calculus" [[https://arxiv.org/abs/1006.1433][pdf available]] also mentions "vectorial".

- 2016 article "System F-omega with Equirecursive Types for Datatype-Generic Programming" [[http://ps.informatik.uni-tuebingen.de/research/functors/equirecursion-fomega-popl16.pdf][pdf]]

** Lambda calculus semantics?

- https://en.wikipedia.org/wiki/Lambda_calculus#Semantics

  - "In the 1970s, Dana Scott showed that, if only continuous functions were considered,
    a set or domain D with the required property could be found, thus providing a model for the lambda calculus."

    - 1982, [[https://www.sciencedirect.com/science/article/pii/S0019995882800879]["What is a model of lambda calculus?"]]
    - 2008, PhD thesis, [[https://tel.archives-ouvertes.fr/tel-00715207/document]["Models and theories of lambda calculus"]]

      - 2009, [[https://arxiv.org/abs/0904.4756][summary]]

- Paul Hudak, lecture notes, [[http://www.cs.yale.edu/homes/hudak/CS430F07/LectureSlides/Reynolds-ch10.pdf][The Lambda Calculus]]

  - "The Greatest Thing Since Sliced Bread™, or maybe even before it"

- The operational semantics of lambda calculus depends on the evaluation strategy?

  - What-reduction?

    - Normal-order reduction
    - Applicative-order reduction

  - Call-by-what?

    - Call-by-value
    - Call-by-name

** When should we introduce a type system?

- 2005 article "Introduction to Type Theory" [[http://www.cs.ru.nl/~erikb/onderwijs/sl2/materiaal/tt-sl2.pdf][pdf]]

** Optimizing lambda calculus?

- http://thyer.name/lambda-animator/
- http://thyer.name/phd-thesis/
- http://hackage.haskell.org/package/graph-rewriting-lambdascope
- partial evaluation

  - 2010, slides, "O, partial evaluator, where art thou?", Lennart Augustsson, [[http://www.cse.chalmers.se/~palka/Lennarts_talk/PEPM-2010.pdf][pdf]]

    - https://en.wikipedia.org/wiki/Partial_evaluation

      - Futamura projection

  - 1997, article, "Distributed partial evaluation", [[http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.134.1238][citeseerx]]

- Lambda calculus

  - might be related to bottom-up beta substitution

    - Abdullah hinted that BUBS (bottom-up beta-substitution [Shivers2004])
      might be used to make a garbage-free or a fast interpreter.
    - https://en.wikipedia.org/wiki/Strict_programming_language
    - https://en.wikipedia.org/wiki/Lazy_evaluation
    - [[https://memo.barrucadu.co.uk/strict-vs-lazy.html][Strict-by-default vs Lazy-by-default]]
    - https://en.wikipedia.org/wiki/Applicative_computing_systems
    - non-strict, beta reduction, normal order, applicative order
    - The terms "lazy" and "strict" imply operational semantics.
      They are two strategies for beta-reduction.
      "Lazy" is normal-order.
      "Strict" is applicative-order.
    - [[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.90.2386&rep=rep1&type=pdf][An Algorithm for Optimal Lambda Calculus Reduction, John Lamping]]
    - [[http://www.lsv.fr/Publis/PAPERS/PDF/sinot-wrs07.pdf][Complete Laziness: a Natural Semantics, François-Régis Sinot]]
    - http://rochel.info/ graph-rewriting-lambdascope (screenshot): An implementation of an optimal evaluator for the λ-calculus, PDFLambdascope

  - How is lambda calculus algebraic?

    - [[https://www.mscs.dal.ca/~selinger/papers/combinatory.pdf]["The lambda calculus is algebraic", Peter Selinger]]

      - "We argue that free variables should not be interpreted as elements in a model, as is usually done, but as indeterminates."

    - [[https://pdfs.semanticscholar.org/055d/69ee4dc95fbf6457419c90338493667478b1.pdf]["On the algebraic models of lambda calculus", Antonino Salibra]]

      - "The variety (equational class) of lambda abstraction algebras was introduced
        to algebraize the untyped lambda calculus in the same way Boolean algebras algebraize the classical propositional calculus."
        Propositional logic is modeled by Boolean algebra.
        First-order logic is modeled by cylindric algebra?
        Lambda calculus is modeled by lambda abstraction algebra.
        Why algebra? Because it is equational?

    - [[https://en.wikipedia.org/wiki/Algebraic_logic][Wikipedia "algebraic logic"]]
    - [[https://pdfs.semanticscholar.org/7596/19f05a42ff3045bcf87fcaa3edbff01e1130.pdf]["The algebraic lambda-calculus", Lionel Vaux]]
    - [[https://pdfs.semanticscholar.org/44c9/2ad00b8ceba78319005db048b24d61a80748.pdf]["Lambda abstraction algebras: representation theorems", Don Pigozzi, Antonino Salibra]]
    - [[http://www.dsi.unive.it/~salibra/mainfinale.pdf]["Applying Universal Algebra to Lambda Calculus", Giulio Manzonetto, Antonino Salibra]]

  - Dana Scott's PCF; also search the Internet for "the language pcf"
    [[http://www.cs.bham.ac.uk/~mhe/papers/RNC3.pdf]["Introduction to Real PCF (Notes)", Mart'in H"otzel Escard'o]]
  - 1993 John Launchbury [[https://pdfs.semanticscholar.org/492b/200419199892857faa6a6956614641ae9464.pdf][Lazy imperative programming]]

- lambda calculus

  - Church-encoding enables lambda calculus to represent conditionals and algebraic data types.
  - Fixed-point combinators enables recursion and looping.
  - https://en.wikipedia.org/wiki/Lambda_cube
  - https://en.wikipedia.org/wiki/Calculus_of_constructions
  - https://en.wikipedia.org/wiki/Simply_typed_lambda_calculus

    - "The simply typed lambda calculus [...], a form of type theory,
      is a typed interpretation of the lambda calculus with only one type constructor: [...] that builds function types."

      - What is an "interpretation of the lambda calculus"?
      - What is "the lambda calculus"? Is there only one lambda calculus?

  - https://www.reddit.com/r/haskell/comments/8els6f/why_are_combinators_as_powerful_as_full/
  - https://math.stackexchange.com/questions/5639/the-power-of-lambda-calculi
  - Implement lambda calculus.

    - Without dynamic allocation / garbage collection.
    - Translate lambda calculus to assembly

      - Basic idea:

        - Every expression translates to a subroutine.
        - Calling the subroutine ~ evaluating the expression.
        - Subroutine return value ~ value obtained by evaluating the expression.

      - A lambda abstraction translates to a subroutine that accepts one parameter.
      - An application translates to a subroutine call.
      - An int value translates to what? Choice:

        - itself
        - a subroutine that returns the int

    - 2012, article, [[https://arxiv.org/abs/1202.2924]["From Mathematics to Abstract Machine: A formal derivation of an executable Krivine machine"]]

      - https://en.wikipedia.org/wiki/Krivine_machine

** Begin with an interpreter, not a compiler

- Don't make a compiler?
  Make an interpreter instead, and stage it?
  Turn an interpreter into a compiler for free?
- "To stage an interpreter" is to add staging annotations to the code of the interpreter.
- Staging is similar to quoting in Lisp/Scheme.
- 2004 article "A Gentle Introduction to Multi-stage Programming" [[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.103.2543&rep=rep1&type=pdf][pdf]]
  - Basic Problems in Building Program Generators
  - part 2 https://pdfs.semanticscholar.org/aa3c/d4233f7c0db95e5c38d5b8fc1d199df21857.pdf
- multi-stage programming for Scala https://scala-lms.github.io/
- 2006 article "A Verified Staged Interpreter is a Verified Compiler" [[https://www.researchgate.net/profile/Kevin_Hammond/publication/221108683_A_verified_staged_interpreter_is_a_verified_compiler/links/00b7d517ede725c057000000.pdf][pdf]]

** Foreign function interface: working with C
** Ocaml

- https://ocaml.org/learn/

** Reconciling functional and logic programming into declarative programming?

1996 publication "A Note on Declarative Programming Paradigms and the Future of Definitional Programming" [[http://www.cse.chalmers.se/~oloft/Papers/wm96/wm96.html][html]]

*** Example: Representing a predicate in lambda calculus

Lambda calculus with boolean logic extensions:

#+BEGIN_EXAMPLE
p = \ x -> x = "a" OR x = "b"
#+END_EXAMPLE

Prolog:

#+BEGIN_EXAMPLE
p(a).
p(b).
#+END_EXAMPLE

*** Example: Representing a function in logic programming

#+BEGIN_EXAMPLE
inc(X, Y) :- X = Y + 1.
#+END_EXAMPLE

*** The "satisfy" function

The expression "satisfy f" finds all x : a that satisfies f : a -> bool.
Thus the type of "satisfy" is "(a -> bool) -> list a".

It is in principle possible to write such "satisfy" builtin for some lambda expressions.

#+BEGIN_EXAMPLE
satisfy (\ x -> x = "a" OR x = "b")
=> ["a","b"]

satisfy (\ (x : int) -> x >= 10)
=> [10,11,12,...] -- an infinite list

satisfy (\ (x : bool) -> true)
=> [false,true]
#+END_EXAMPLE

*** A function is a relation, a relation is a function, so what?

A function \( (A,B,F) \) is trivially a relation.

A relation \( (A,B,R) \) is a function \( (A,2^B,F) \) where \( F(x) = \{ y ~|~ (x,y) \in R \} \).
** Precise memory accounting

We want precise memory accounting to enable the runtime to limit memory usage.

** Execution state reification, save states, saving and loading states, pausing and resuming computations

We want execution state reification so that we can do live process migration.

** Haskell woes

- [[https://news.ycombinator.com/item?id=5893442][Ask HN: Any downsides of programming in Haskell? | Hacker News]]
- [[https://www.reddit.com/r/haskell/comments/1gknfs/ask_hn_any_downsides_of_programming_in_haskell/][Ask HN: Any downsides of programming in Haskell? : haskell]]

*** Can't import type class instances explicitly

[[https://stackoverflow.com/questions/8728596/explicitly-import-instances][There is a reason]].
** Monads, and Haskell type system limitations

- A monad is a way of /conservatively extending/ all categories. (Abdullah, private correspondence)
- https://www.reddit.com/r/haskell/comments/3h2aqg/can_someone_explain_the_monads_are_generalised/

*** Should Nat (the natural numbers) be a subtype of Int (the integers)?

Intuitively, yes.

*** <2018-10-01> @abdullah Signedness is a monad: conservatively extending naturals to integers

I think this is what we mean when we say "integer is a monad".
I think what we are really trying to say is "signedness is a monad", that is, "we can conservatively extend the naturals to the integers by using the Signed monad".

We can write that in Haskell as follows (with some problems described later).

#+BEGIN_EXAMPLE
data Nat = Zero | Succ Nat
type Int = Signed Nat
data Signed a = Positive a | Negative a

instance Functor Signed ...
instance Applicative Signed ...

instance Monad Signed where
    return = Positive
    m >>= k = join_signed (fmap k m)

join_signed :: Signed (Signed a) -> Signed a
join_signed mm = case mm of
    Positive x -> x
    Negative x -> negate_signed x

negate_signed :: Signed a -> Signed a
negate_signed (Positive x) = Negative x
negate_signed (Negative x) = Positive x

f :: Nat -> Nat
f = ...

f_int :: Int -> Int
f_int = fmap f
#+END_EXAMPLE

We can have Signed Char, Signed String, etc., but those may not make sense.

The problem:
Nat should be a subtype of Int, because everyone who knows arithmetics seems to think that way.
We want f and f_int to be the /same/ function.
We don't want to type fmap, liftM2, and their ilk.
** Abdullah's dream language: Extending System F application beta-reduction rules to automate fmap and extend?
Add these inference rules?
- If =f : a -> b=, and =x : m a=, and =m= is an instance of =Functor=, then =f x= beta-reduces to =fmap f x=.
- If =k : a -> m b=, and =x : m a=, and =m= is an instance of =Monad=, then =k x= beta-reduces to =k =<< x=.

\[
f : a \to b , ~ x : m~a , ~ Functor~m \vdash (f~x \to_\beta fmap~f~x)
\]

Suppose =f : a -> b=, and =x : m (p a)=, and =m= is an instance of =Functor=, and =p= is an instance of =Functor=.

- The rule beta-reduces =f x= to =fmap f x=.
- Problem: The rule interferes with the =Functor= instance of =(->)=.
** Increasing language adoption
*** What
In order for a language to be adopted, people must perceive its risk as low.

The language must work with existing codebases.

The language designer must think from the language user's point of view.
Let's say I have 100,000 lines of Java that I've been writing and testing for the past 5 years.
Are you expecting me throw away all of them?

Thus the language must work with C, C++, C#, Java, Go, JavaScript, Python, Ruby, and everything else.
This should be possible because the essence of all programming languages is the same: every programming language is a formal system.
It should be possible to translate a program P1 in language L1 to program P2 in language L2 with the same semantics.

Improve/enhance, not supersede.

Mixing languages should be easy.

2013, article, "Empirical analysis of programming language adoption", [[http://sns.cs.princeton.edu/docs/asr-oopsla13.pdf][pdf]]

The language must be suitable for systems programming. - System programming is hardware-aware programming.
Application programming assumes abstract machine, infinite memory, and all convenience provided by the operating system. - Why do we make this distinction?

The language must facilitate metaprogramming.
Everything must be a first-class citizen.
It has to have EVAL.
The language must provide a way for interpreting/compiling/loading a program at runtime.
The compiler becomes a part of every program.

What is the reason for the name "metacircular evaluator"?
What is circular?
What is metacircular?

To make syntax first-class, we need QUOTE and UNQUOTE (such as in Lisp/Scheme)?

To prevent syntax flamewar, we should define the canonical linearization of the abstract syntax tree.
Go does this with =go fmt=.
I think that is wise.

- Basic assumptions
  - Computer (machine) is embodied formal system.
    - Assume no hardware fault.
  - Software is executable mathematics.
*** Other people's opinions
- 2012 article "Socio-PLT: Principles for Programming Language Adoption" [[https://lmeyerov.github.io/projects/socioplt/paper0413.pdf][pdf]]
** What are some interesting programming languages?
   :PROPERTIES:
   :CUSTOM_ID: what-are-some-interesting-programming-languages
   :END:

- Interesting functional programming languages tailored for web programming.
  Perhaps related to data modeling.

  - Ur/Web

    - [[http://www.impredicative.com/ur/faq.html][FAQ]]

      - "Why would I prefer to use Ur/Web over OPA?"

    - [[http://www.impredicative.com/ur/resources.html][How to Get Started Learning Ur/Web]]

  - [[http://links-lang.org/][The Links Programming Language]]
  - [[http://opalang.org/][The Opa Language]]

- Moving logic into SQL stored procedures

  - [[https://sivers.org/pg][Simplify: move code into database functions | Derek Sivers]]

    - A legitimate concern: How do we version-control (and release, and rollback) stored procedures, triggers, and other database logics?

  - [[https://news.ycombinator.com/item?id=11802917][Andl, a relational language that is not SQL, is coming to Postgres | Hacker News]]

- https://www.microsoft.com/en-us/research/publication/convenient-explicit-effects-using-type-inference-with-subeffects/
- [[https://nikita-volkov.github.io/if-haskell-were-strict/][If Haskell were strict, what would the laziness be like?]]
- http://homepages.inf.ed.ac.uk/wadler/papers/free-rectypes/free-rectypes.txt

*** Do we really have to read these fragmented sources?
    :PROPERTIES:
    :CUSTOM_ID: do-we-really-have-to-read-these-fragmented-sources
    :END:

- [[http://www.cse.chalmers.se/edu/year/2015/course/DAT150/lectures/proglang-12.html][Lecture 12: Design and Evolution of Programming Languages]]
** Making compilers?
   :PROPERTIES:
   :CUSTOM_ID: making-compilers
   :END:

Every compiler does name resolution / symbol table.
Is there a compiler that doesn't do that?
[[https://www.reddit.com/r/Forth/comments/695oik/advances_in_forth_language_design/dh454oq/][Forth?]]

- https://www.reddit.com/r/haskell/comments/4jhhrj/anders_hejlsberg_on_modern_compiler_construction/
- https://cs.stackexchange.com/questions/63018/visual-programming-tools-why-don-t-they-work-with-the-ast-directly
- compiling with continuations

  - Why use CPS (continuation passing style) as intermediate form?

    - http://matt.might.net/articles/cps-conversion/
    - https://www.microsoft.com/en-us/research/publication/compiling-with-continuations-continued/
    - https://news.ycombinator.com/item?id=7150095

  - 2003, retrospective: the essence of compiling with continuations https://users.soe.ucsc.edu/~cormac/papers/best-pldi.pdf

    - https://en.wikipedia.org/wiki/A-normal_form

** After-2018 programming language requirements

*** Ergonomic error handling

- http://joeduffyblog.com/2015/11/03/blogging-about-midori/
  - http://joeduffyblog.com/2016/02/07/the-error-model/

*** REPL (read-eval-print loop)

The language must not preclude making a REPL for it.

REPL is important for immediate feedback, experimentation, exploration, and playing around.

*** Example of mixing nominal and structural subtyping

https://www.eclipse.org/n4js/features/nominal-and-structural-typing.html

*** Programming language should separate modeling and binding. Can we combine dynamic binding and static typing?

Example of binding is =import= statement.

*** Paradigm, approach, viewpoint, worldview?

- graph programming languages

  - https://cstheory.stackexchange.com/questions/3906/what-are-theoretically-sound-programming-languages-for-graph-problems

    - https://www.cs.york.ac.uk/plasma/wiki/index.php?title=GP_%28Graph_Programs%29
    - 2007, PhD thesis, Steinert, [[https://www.cs.york.ac.uk/ftpdir/reports/2007/YCST/15/YCST-2007-15.pdf]["The graph programming language GP"]]
    - a short visual example of "conditional rule schemata"

      - 2010, article, [[https://www.cs.york.ac.uk/plasma/publications/pdf/PoskittPlump.VS-Theory.10.pdf]["Hoare Logic for Graph Programs"]]

    - https://markorodriguez.com/2013/01/09/on-graph-computing/
    - https://en.wikipedia.org/wiki/Gremlin_(programming_language)

- equational programming?

  - 2017-2018, https://www.cs.vu.nl/~tcs/ep/
  - term-rewriting

    - retired, [[http://q-lang.sourceforge.net/][Q language]]

      - http://q-lang.sourceforge.net/examples.html
      - superseded by Pure

        - https://agraef.github.io/pure-lang/
        - https://en.wikipedia.org/wiki/Pure_(programming_language)
        - https://github.com/agraef/pure-lang/wiki/Rewriting

    - Joy

- 2002, article, [[http://www.cs.tufts.edu/comp/150PP/archive/norman-ramsey/pmonad.pdf]["Stochastic Lambda Calculus and Monads of Probability Distributions"]]
- "Purely functional lazy nondeterministic programming", [[https://www.cambridge.org/core/journals/journal-of-functional-programming/article/purely-functional-lazy-nondeterministic-programming/1E8BA117E549A9612BC4AF9804E5507A][paywall]]
- relational programming (pure logic programming?)

  - miniKanren

    - Byrd PhD thesis https://scholarworks.iu.edu/dspace/bitstream/handle/2022/8777/Byrd_indiana_0093A_10344.pdf

      - mentions other programming languages: Prolog, Mercury, Curry

- https://en.wikipedia.org/wiki/Multi-adjoint_logic_programming
- ramble

  - https://www.researchgate.net/project/Ontology-oriented-programming
  - http://www.doc.ic.ac.uk/~klc/OntProg.html

*** Low-code? Programming for the masses?

Limited programming?

What can we assume about the user's skill/knowledge/background?

- https://en.wikipedia.org/wiki/End-user_development
- https://en.wikipedia.org/wiki/Low-code_development_platforms
** Implementing programming languages
- "Ott is a tool for writing definitions of programming languages and calculi.
  It takes as input a definition of a language syntax and semantics,
  in a concise and readable ASCII notation that is close to what one would write in informal mathematics."
  https://www.cl.cam.ac.uk/~pes20/ott/
** Toward a language with first-class syntax?
   :PROPERTIES:
   :CUSTOM_ID: toward-a-language-with-first-class-syntax
   :END:

- composable grammars?

  - 2013, article, Viera & Swierstra, "First Class Syntax, Semantics, and Their Composition" http://www.cs.ru.nl/P.Achten/IFL2013/symposium_proceedings_IFL2013/ifl2013_submission_21.pdf

    - 2013, PhD thesis, Viera, "First Class Syntax, Semantics, and Their Composition" file:///home/erik/Downloads/viera.pdf

  - 1990, [[https://authors.library.caltech.edu/26726/]["A Primer for Program Composition Notation"]]
  - https://stackoverflow.com/questions/953185/composable-grammars
  - OMeta
  - Programming languages with programmable syntax

    - [[http://chrisseaton.com/katahdin/][Katahdin]]

  - parsing expression grammar, packrat

    - "Parsing ought to be easier"

      - https://news.ycombinator.com/item?id=2330830

        - "PEGs are one class of cleanly composable grammars."?

  - http://www.cs.cmu.edu/~Compose/
  - cryptographic protocol analysis

    - https://en.wikipedia.org/wiki/Universal_composability

- Programming languages with macros

  - Common Lisp
  - Scheme
  - Kotlin?
  - Clojure?
  - Scala? https://www.scala-lang.org/blog/2017/11/27/macros.html

** Enabling metaprogramming
   :PROPERTIES:
   :CUSTOM_ID: enabling-metaprogramming
   :END:

- [[https://stackoverflow.com/questions/50490883/why-is-ml-called-meta-language][metaprogramming - Why is ML called Meta-Language? - Stack Overflow]]
- related?

  - https://github.com/PostgREST/postgrest
  - http://rosecompiler.org/

- Metaprogramming

  - http://kaitai.io/

    - from description, generate parsers for binary data (as opposed to text data)

- Aspect-oriented programming is a restricted form of metaprogramming.

  - relationship between Aspect-Oriented Programming and Functional Programming

    - 2009, article, "What Does Aspect-Oriented Programming Mean for Functional Programmers?", [[https://www.cs.ox.ac.uk/files/2282/wgp14-wang.pdf][pdf]]
    - 2008, article, "On Feature Orientation and Functional Programming", [[https://pdfs.semanticscholar.org/522e/b6c2ea910ed074a13fe21767c9fa070fb685.pdf][pdf]]
    - 2016, article, "Realtime collaborative editor. Algebraic properties of the problem.", [[http://blog.haskell-exists.com/yuras/posts/realtime-collaborative-editor.html][html]]

      - see also Darcs patch theory

    - 2008, PhD thesis, "An Integrated System to Manage Crosscutting Concerns in Source Code", [[http://wwwtmp.st.ewi.tudelft.nl/arie/phds/Marin.pdf][pdf]]
    - 2003, article, "Language-independent aspect-oriented programming", [[http://www.tara.tcd.ie/handle/2262/32627][pdf available]]

- Java metaprogramming

  - Similar products

    - libraries

      - [[https://github.com/INRIA/spoon][INRIA Spoon]]
      - The =javax.lang.model= package of the Java standard library, but it does not model method bodies.

    - environments

      - [[http://www.eclipse.org/modeling/emf/][Eclipse Modeling Framework (EMF)]]
      - [[https://www.jetbrains.com/mps/][JetBrains MPS (Meta Programming System)]]
      - [[http://strategoxt.org/][Stratego/XT]]
      - TXL
      - [[http://www.eclipse.org/Xtext/][Eclipse Xtext]] and [[http://www.eclipse.org/xtend/][Eclipse Xtend]]

    - programming languages

      - Eclipse Xtend

    - parser generators

      - [[https://en.wikipedia.org/wiki/Compiler-compiler][WP:Compiler-compiler]]
      - [[https://en.wikipedia.org/wiki/Comparison_of_parser_generators][WP:Comparison of parser generators]]
      - [[http://www.antlr.org/][ANTLR (Another Tool for Language Recognition)]]
      - [[https://javacc.org/][JavaCC]]
      - YACC, Bison; with Lex, Flex

  - Related concepts

    - Model-driven development
    - Model-driven architecture

** Automatic (program) differentiation
   :PROPERTIES:
   :CUSTOM_ID: automatic-program-differentiation
   :END:

- What is the relationship between incremental lambda-calculus and automatic differentiation of programs (or of algebraic data types)?

** Extending functions
   :PROPERTIES:
   :CUSTOM_ID: extending-functions
   :END:

Not only classes, but also functions, should be extensible.

"To extend the function \( f : A \to B \) to the function \( f' : A' \to B' \)" means:

- For every \( x \in A \), we have \( f(x) = f'(x) \).
- \( A \subseteq A' \).
- \( B \subseteq B' \).

A consequence:
Every occurrence of \( f \) can be replaced with \( f' \) while preserving the meaning of the containing expression.

** Is inheritance subtyping?
   :PROPERTIES:
   :CUSTOM_ID: is-inheritance-subtyping
   :END:

The short article [2] basically tells the user to read AbdelGawad's other works.

- [1] 1989, "Inheritance is not subtyping", [[https://www.cs.utexas.edu/users/wcook/papers/InheritanceSubtyping90/CookPOPL90.pdf][pdf]]
- [2] 2013, "Inheritance is subtyping", [[https://pdfs.semanticscholar.org/569c/9b35375144756761167fd4a2571b1d97f0e8.pdf][pdf]]
- [[https://www.cmi.ac.in/~madhavan/courses/pl2009/lecturenotes/lecture-notes/node28.html][Subtyping vs inheritance]]

  - Subtyping and inheritance are orthogonal concepts.

A language should provide both nominal and structural subtyping.

- 2008, "Integrating Nominal and Structural Subtyping", [[http://www.cs.cmu.edu/~aldrich/papers/ecoop08.pdf][pdf]]

We can define structural subtyping for C structs.

We can define layout types (almost like ASN.1):

#+BEGIN_EXAMPLE
    layout {
        at byte 0;
        def var0 : little_endian int32;
        at byte 4;
        def var1 : big_endian int32;
        reserve 8 byte;
        skip 4 byte; -- synonym for reserve
        def var2 : int8;
        def var3 : array of 4 int8;
        align 16;
        def var4 : layout {
            reserve 16 byte;
            def var1 : int8;
            align 32;
        };
    }
#+END_EXAMPLE

We can define intersection, union, concatenation, and composition/nesting of two layout types.

Why don't we just build ASN.1 into the language?

- [[http://whiley.org/2010/12/13/why-not-use-structural-subtyping/][Why not use Structural Subtyping?]]

  - What is it trying to say?

** Maximum polymorphism?
   :PROPERTIES:
   :CUSTOM_ID: maximum-polymorphism
   :END:

- Read this: [[https://blog.inf.ed.ac.uk/apl16/archives/178/comment-page-1][Lecture 4: Higher Polymorphism | Advances in Programming Languages]]
- [[https://github.com/lampepfl/dotty/issues/1886][Rethink Structural Types · Issue #1886 · lampepfl/dotty]]

  - "However, there is another area where statically-typed languages are often more awkward than dynamically-typed ones: database access."
  - Keynote - What's Different In Dotty by Martin Odersky https://www.youtube.com/watch?v=9lWrt6H6UdE

** Typing records
   :PROPERTIES:
   :CUSTOM_ID: typing-records
   :END:

A record type can be thought as a product type whose components are named.

If each value =valN= has type =typN=, then the record ={key1=val1; key2=val2; ...;}= has type ={key1:typ1; key2:typ2; ...;}=.
For example, the record ={name="John"; age=20}= has type ={name:String; age:Int;}=.

** Polymorphism is code generation
   :PROPERTIES:
   :CUSTOM_ID: polymorphism-is-code-generation
   :END:

- Consider translating =id : a -> a= to assembly.

  - If types define memory layout (bit representation), then the compiler must generate an =id= function for every =a=.
  - If the language uses runtime type tagging, then there doesn't have to be more than one=id= functions.

** Fixed points and recursive types
   :PROPERTIES:
   :CUSTOM_ID: fixed-points-and-recursive-types
   :END:

A thing \( x \) is a /fixed point/ of function \( f \) iff \( f(x) = x \).

A function may have zero, one, or many fixed points.

A thing \( x : A \) is a /least fixed point/ of function \( f : A \to A \) iff
\( x \) is a minimum of the set of the fixed points of \( f \).
The words "least" and "minimum" assume an ordering \( \le \).
This ordering should be clear from context.

If \( f \) has exactly one least fixed point \( x \) with respect to ordering \( \le \), then we write \( \mu_\le(f) = x \).

The syntax \( \mu a. b \) means \( \mu_\le(\lambda a. b) \).
The syntax \( \mu a. b \) is analogous to lambda expression syntax \( \lambda a. b \).

What is the ordering used in formulating the least fixed point of a recursive algebraic data type?

todo: equirecursive types and isorecursive types

** A sketch about reusable language-oriented programming: CommonMark, Liquid, and Jekyll, reusable grammar?
   :PROPERTIES:
   :CUSTOM_ID: case-study-commonmark-liquid-and-jekyll-reusable-grammar
   :END:

I want something like this:

#+BEGIN_EXAMPLE
    data CommonMark = ... -- CommonMark AST
    data Liquid = ... -- Liquid AST
    type Jekyll = CommonMark + Liquid

    parse_cm : String -> Parser CommonMark
    parse_lq : String -> Parser Liquid
    parse_jk : String -> Parser Jekyll
    parse_jk = parse_cm + parse_lq
#+END_EXAMPLE

- [[https://stackoverflow.com/questions/953185/composable-grammars][design - Composable Grammars - Stack Overflow]]
- [[https://jeffreykegler.github.io/Ocean-of-Awareness-blog/individual/2015/12/composable.html][Grammar reuse]]
- [[https://github.com/melt-umn/silver][melt-umn/silver: An attribute grammar-based programming language for composable language extensions]]
- OMeta, Katahdin
** Some tentative plans: Create a language that compiles to Haskell?
- [[https://github.com/bennofs/haskell-generate][bennofs/haskell-generate: Type-safe library for generating haskell source code]]
** Whole-program optimization?
   :PROPERTIES:
   :CUSTOM_ID: whole-program-optimization
   :END:

- https://stackoverflow.com/questions/3416980/why-arent-whole-program-optimizations-more-prevalent-now/27757382

** TODO <2018-09-15> Make the programming language
- cite:DBLP:conf/popl/CookHC90
- cite:cartwright2013inheritance
** TODO <2018-09-15> Find out how type systems may guarantee pointer safety
Is escape analysis the only way?
*** TODO <2018-09-15> Study Sixten type system
*** TODO <2018-09-15> Study Rust type system
See [[https://doc.rust-lang.org/reference/type-system.html][Rust type system reference]].
** Combine things and let the programmer choose?
*** Combine nominal subtyping and structural subtyping
** from module.md (Designing module systems)
What is a module?
Or, should we be asking these questions instead?

- How do we decompose a program? (I think David Parnas has answered this.)
- Why do we need modules?
- How do we organize programs?

Modules reduce complexity by partitioning and independence.
See [[http://www.computing.dcu.ie/~renaat/ca2/ca214/ca214vii.html][Three Universal methods of reducing complexity]]
from the course [[http://www.computing.dcu.ie/~renaat/ca2/ca214over.html][CA214 Systems Analysis and Design Page]].

What do others say?

- [[https://en.wikipedia.org/wiki/Module][Wikipedia]]
- According to [[https://en.wiktionary.org/wiki/module][Wiktionary]]:

  - The word "module" is from Latin "modulus" that means "a small measure".
  - A module is "a self-contained component of a system, often interchangeable, which has a well-defined interface to the other components".

- [[https://www.dictionary.com/browse/module][dictionary.com]]

What do we infer?

- We can develop different modules at the same time.

*** Philosophical investigation
   :PROPERTIES:
   :CUSTOM_ID: philosophical-investigation
   :END:

- What are the properties of a module?
- What are its relationships with other things?

  - interchangeability

- A module groups things.

  - Is this essential or accidental?
    Is it made for grouping?
    Is grouping only a side-effect?

- What can we do with modules?

  - We can combine modules.
  - We can shadow modules.
  - We can link modules.
  - We can embed/inline modules.

- A module is an incomplete/dependent piece of functionality/code.

  - A module may have unresolved symbols?

- A module is a decomposition of a program?
- Module is about reusability?
- A program is a module and a starting point.
- A module specifies a contract.
  A module can be swapped with another module that satisfies the same contract without changing the correctness of the program.
- A module is a bunch of imports and exports?
- A module is smallest unit of reuse? Isn't that function?
- A module is smallest unit of compilation? Isn't that function?

*** Modules are for humans
   :PROPERTIES:
   :CUSTOM_ID: modules-are-for-humans
   :END:

Computers don't need modules.
All it needs is a sequence of machine codes.

A program is a lambda expression.
A big program is a big lambda expression.
Given enough memory, a computer can handle arbitrarily big lambda expressions.

Human uses modules for organizing things.
Human uses modules to make machines separate compilation, speed up recompilation, and recompile a part of the program.

- Does a module have to coincide with a compilation unit?
- Basic module functions?

  - How does a code describe its dependencies?
  - How does the machine disambiguate names?
  - Functions should be versioned. Not module. Not package.
    Version describes semantics.

Module is second-order logic programming?
Note below, that the same =Plus= is used as both a variable and a predicate.

#+BEGIN_EXAMPLE
    export(module_name, type, name, value).

    export(prelude, int, plus, Plus) |- export(my_module, int, three, Plus(1, 2)).
#+END_EXAMPLE

- The smallest unit for this discussion is a machine instruction.
- A subroutine is a collection of instructions.
- A library is a collection of subroutines.
- A program is a collection of libraries and an entry point.
- History

  - The initial motivation was to reuse.

    - Reduce development cost.

      - Humans have always been looking for easier ways to live.
        This "laziness" (the ability to get bored repeating something) is the source of all human technology.

  - The next motivation was to reduce disk and memory usage.

- The essence of programming-in-the-large is Don't Repeat Yourself?

*** Comparing existing module systems
   :PROPERTIES:
   :CUSTOM_ID: comparing-existing-module-systems
   :END:

How do programming languages deal with modules?

- [[https://github.com/dhall-lang/dhall-lang/issues/182][dhall modules · Issue #182 · dhall-lang/dhall-lang]]
- [[https://futhark-lang.org/blog/2017-01-25-futhark-module-system.html][Futhark]]
- [[https://elixir-lang.org/getting-started/modules-and-functions.html][Elixir]]

  - [[https://hexdocs.pm/elixir/Module.html][Module -- Elixir v1.7.2]]

- Racket

  - 2011, article, "Languages as Libraries", [[http://www.cs.utah.edu/plt/publications/pldi11-tscff.pdf][pdf]]

- Scheme R7RS, Common Lisp, Clojure
- Java, Scala, Kotlin, Go, C, C++

  - C ABI

    - A module is an ELF shared object file (SO file).

- Pascal, Ada, Oberon, Algol, Fortran
- JavaScript, TypeScript, ECMAScript
- Standard ML, Caml, OCaml, MLTON, SML/NJ, F#

  - 2000, "A modular module system", [[https://hal.inria.fr/hal-01499946/document][pdf]]

    - "Harper-Lillibridge-Leroy module system"
    - "applicability of that module system to a wide range of programming languages"

- Haskell has underpowered module system.
- book, "Advanced topics in types and programming languages", part IV, programming in the large, [[http://camlunity.ru/swap/Functional%20Programming/Type%20Systems/Pierce/Advanced%20Topics%20in%20Types%20and%20Programming%20Languages.pdf][pdf]]

  - book, "Types and programming languages", [[https://www.asc.ohio-state.edu/pollard.4/type/books/pierce-tpl.pdf][pdf]]

- [[https://en.wikipedia.org/wiki/Modular_programming][WP:Modular programming]]

*** Key idea: Module = Dictionary -> Dictionary
   :PROPERTIES:
   :CUSTOM_ID: key-idea-module-dictionary---dictionary
   :END:

Assume a dependently-typed language.

Recall some terminologies:

- A record is a tuple whose components are named.
- A dictionary is also known as key-value map or look-up table.

Then a module is a lambda abstraction that takes a record and gives a record.

A module is a lambda abstraction.

This idea is similar to Nix and JavaScript modules.

=type Module = Map Name Decl -> Map Name Decl=

A module translates into a lambda-calculus expression.
An import translates to an entry in the input dictionary.
An export translates to an entry in the output dictionary.
Example:

#+BEGIN_EXAMPLE
    module {
        import add mul Int32;
        export f g T;
        f = add;
        g = mul;
        T = Int32;
    };

    -- The expression above translates to:

    \ {add; mul; Int32; ...} -> {
        f = add;
        g = mul;
        T = Int32;
    };
#+END_EXAMPLE

- Key ideas of that example:

  - Dictionary pattern matching simulates row polymorphism.
  - ={a;b;c;}= is shorthand for ={a:a; b:b; c:c;}=.
  - [[https://blog.robphoenix.com/elixir/notes-on-elixir-pattern-matching-maps/][Notes on Elixir: Pattern-Matching Maps · Rob Phoenix]]

What we are doing here is also known as "blurring the phase distinction".
See [[https://futhark-lang.org/blog/2017-01-25-futhark-module-system.html#modules-versus-higher-order-functions]["Modules versus Higher-Order Functions" in Futhark blog post]]:
"A module can be viewed as nothing but a record containing types and values."

A problem: compilation may fail to terminate.
No big deal.
Set a time-out.

*** what
   :PROPERTIES:
   :CUSTOM_ID: what
   :END:

- Hypothesis: Lazy evaluation solves the partial query problem elegantly.
- What are some cool ideas?

  - Dhall can import from IPFS.

    - http://www.haskellforall.com/2016/12/dhall-non-turing-complete-configuration.html

  - Elixir can pattern-match maps (dictionaries).

- What is a module in an untyped functional programming language such as Tulip?
- Finding a programming language for programming in the large

  - Ecosystem, libraries, tools, and communities.
  - The most important thing in programming in the large is name management.
    Namespaces.

    - C has two namespaces: type namespace and value namespace.
    - Haskell has two namespaces: type namespace and value namespace.
    - Java has better namespacing than C.
    - Enable the same name to be used in different context, so that you can write =get_name employee= and =get_name company= instead of =employee_get_name employee= or =company_get_name company=.

      - Ad-hoc polymorphism.

  - Which one has the biggest community?
  - Which one has a decent IDE?
  - Which community puts their money on where their mouth is?
  - Comparing type systems

    - [[https://docs.racket-lang.org/ts-guide/][The Typed Racket Guide]]
    - F#
    - SML
    - Caml
    - OCaml
    - Idris, Agda
    - Coq, Lean
    - Haskell
    - 2004, chapter, "Type systems", Luca Cardelli, [[http://lucacardelli.name/Papers/TypeSystems.pdf][pdf]]

      - from https://www.artima.com/forums/flat.jsp?forum=106&thread=185420
      - 2005, book, "Advanced topics in types and programming languages", Benjamin C. Pierce (editor)

        - Part IV, "Types for Programming in the Large"

      - 2002, book, "Types and programming languages", Benjamin C. Pierce

    - Java, Kotlin, Scala
    - Things that annoy me

      - ML, SML, Caml, OCaml: ='a tf= is somewhat annoying. It should have been =tf a=.

        - F# uses =tf<'a>=.
        - Haskell uses =Tf a=.

      - Would you rather type ='a list= (F#) or deal with an inadequate record/module system (Haskell)?
      - Haskell doesn't have =instance Read (->)= and =instance Show (->)=.

        - Haskell expressions are not first-class citizen in the language.

          - Unlike Lisp/Scheme.

        - Encumbers metaprogramming.

    - OCaml labels and polymorphic variants?

      - http://caml.inria.fr/pub/docs/manual-ocaml-400/manual006.html
      - OCaml labels are somewhat similar to Scheme keyword arguments.

    - F# quotations is important for metaprogramming.
    - F# doesn't do ad-hoc polymorphism well?

      - [[https://withouttheloop.com/articles/2014-10-21-fsharp-adhoc-polymorphism/][Ad-hoc Polymorphism in F# (how to survive without Type Classes) - Without the loop]]
      - [[https://sidburn.github.io/blog/2016/03/24/higher-kinded-polymorphism][Higher-kinded Polymorphism: What is it, why you want it · David Raab]]

    - https://cstheory.stackexchange.com/questions/40705/why-did-caml-become-ocaml-or-why-use-objects-in-f
    - ML begat Caml. Caml begat Caml Light? Caml Light begat OCaml?
    - [[https://www.quora.com/How-does-F-compare-to-OCaml-in-regard-to-major-syntactic-differences-paradigm-shifts-and-interoperability-with-Windows-What-about-its-numeric-capabilities][How does F# compare to OCaml, in regard to major syntactic differences, paradigm shifts, and interoperability with Windows? What about its numeric capabilities? - Quora]]

      - Jon Harrop claims. More sources needed. Take it with a grain of salt.

        - "OCaml has an integrated full-blown macro system in the form of Camlp4 whereas F# does not have macros and, in fact, has been deliberately closed off in order to discourage people from creating products that compete with Visual Studio."

          - "deliberately closed off [...]" is a bold claim.

  - [[https://softwareengineering.stackexchange.com/questions/155239/are-all-languages-basically-the-same/155243][Are all languages basically the same? - Software Engineering Stack Exchange]]

- package/dependency management tools

  - Java: Maven, Gradle
  - OCaml: OPAM
  - Haskell: Cabal, Stack
  - F#: Paket? NuGet?
  - C/C++: conan? chocolate? vcpkg?

- Formally adding modules to lambda calculus

  - What is module calculus?

    - 2017 article "Modules, Abstraction, and Parametric Polymorphism" [[https://www.cs.cmu.edu/~crary/papers/2017/mapp.pdf][pdf]]
    - 2003 article "A Type System for Higher-Order Modules" [[http://www.cs.cmu.edu/~rwh/papers/thoms/tr2.pdf][pdf]]
    - 2001 article "A Calculus of Module Systems" [[http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.22.5407][pdf available]]
    - 2012 course notes "Types for Module Systems" [[http://www.ccs.neu.edu/home/amal/course/7480-s12/modules-notes.pdf][pdf]]
      from [[http://www.ccs.neu.edu/home/amal/course/7480-s12/][CS7480 Type Systems (Spring 2012)]]

- Ignored undocumented code sketches

  - [[https://github.com/jordanlewis/simple-module-system][jordanlewis/simple-module-system: Adding modules to a polymorphic lambda calculus]], code in SML/NJ.
** Effects?
- Reddit post "Try/Catch and Async/Await are just a specialized form of Algebraic Effects!" https://www.reddit.com/r/ProgrammingLanguages/comments/9kzcz6/trycatch_and_asyncawait_are_just_a_specialized/
  - 2016 article "Algebraic Effects for Functional Programming" https://www.microsoft.com/en-us/research/wp-content/uploads/2016/08/algeff-tr-2016-v2.pdf
    - "we show how algebraic effects generalize over common constructs like exception handling, state, iterators and async-await"
  - <2018-10-08> not yet performant
** Abdullah research roadmap
- Abbreviations:

  - CCC: Cartesian closed category ([[https://en.wikipedia.org/wiki/Cartesian_closed_category][Wikipedia]])

- Abdullah wants to make a monad-aware programming language.

  - Categories enable us to organize a hierarchy of effects?

    - effectful over category \( C \) = extends category \( C \)?

- The plan is to research two related things in parallel:

  - using algebraic subtyping to mix parametric subtyping and inheritance subtyping

    - [[https://www.cl.cam.ac.uk/~sd601/thesis.pdf][Stephen Dolan's Ph.D. thesis "Algebraic subtyping"]]

      - "Type systems which support subtyping care about the direction of data flow."
      - "Find the /simplest/ algebra of types, and /some/ syntax for them"

    - [[https://en.wikipedia.org/wiki/Subtyping][Wikipedia: Subtyping]]
    - Scala already tries to join parametric subtyping and inheritance subtyping.
      What is the problem with Scala?

- Related: [[file:%7B%%20link%20functional_programming.md %}][functional programming research]].
- Who is Abdullah?

  - Abdullah a.k.a. Kim-Ee Yeoh is [[https://www.atamo.com/][atamo.com]].

*** Research questions
   :PROPERTIES:
   :CUSTOM_ID: research-questions
   :END:

**** Possible questions
    :PROPERTIES:
    :CUSTOM_ID: possible-questions
    :END:

- What is the result of CPS-transforming a recursive function?

#+BEGIN_SRC haskell
    fac 0 = 1
    fac n = n * fac (n - 1)

    fac 0 k = k 1
    fac n k = fac (n - 1) $ \ x -> k (n * x)
#+END_SRC

Conjecture:
Every recursive function can be transformed to a tail-recursive function with a helper function \( f(x) = f(g(x)) \).

#+BEGIN_SRC haskell
    fac 0 = 1
    fac n = n * fac (n - 1)

    fach (a, 0) = (a, 0)
    fach (a, n) = fach (a * n, n - 1)

    fac n = fach (1, n)
#+END_SRC

How do we enable the caller to step the recursion?

#+BEGIN_SRC haskell
    fac n = \ k -> k (\ x -> x * fac (n - 1) k) n
    fac n (\ f x -> f x)

    tri 0 = 0
    tri n = n + tri (n - 1)

    tri :: Nat -> ((x -> c -> Nat) -> Nat -> Nat)
    tri 0 = \ k -> 0
    tri n = \ k -> k (\ x c -> x + tri (n - 1) c) n

    inc x = inc (x + 1)

    inc x = \ k -> k (\ ) (x + 1)
#+END_SRC

- [[https://github.com/dorchard/unfix][github: dorchard/unfix: Takes a recursive function and syntactically unties the recursive knot]]

**** What is the relationship between self-reference, recursion, and fixed points?
    :PROPERTIES:
    :CUSTOM_ID: what-is-the-relationship-between-self-reference-recursion-and-fixed-points
    :END:

We say that \( x \) is a /fixed point/ of \( f \) iff \( f(x) = x \).

[[https://mathoverflow.net/questions/126513/categories-of-recursive-functions][MO 126513: categories of recursive functions]]

- What is the essence of self-recursion?

  - =fix= does not exist in a strict language.

    - "The Z combinator will work in strict languages [...]" [[https://en.wikipedia.org/wiki/Fixed-point_combinator#Strict_fixed_point_combinator][WP: Fixed-point combinator]]

      - The Z combinator is obtained by eta-expanding the Y combinator.

**** What is the formal definition of strict, non-strict, eager, and lazy?
    :PROPERTIES:
    :CUSTOM_ID: what-is-the-formal-definition-of-strict-non-strict-eager-and-lazy
    :END:

The difference is explained by luqui on [[https://stackoverflow.com/questions/7140978/haskell-how-does-non-strict-and-lazy-differ][SO 7140978]]. - Strict and non-strict are about meaning (denotational semantics?).
Eager and lazy are about operation (operational semantics?). - Strictness is a domain-theoretic concept.
Laziness is a computer implementation detail. - This uses Haskell to introduce domain theory: [[https://en.wikibooks.org/wiki/Haskell/Denotational_semantics][Wikibooks: Haskell: Denotational semantics]]. - In Haskell, the least fixed point operator can be defined as =fix f = f (fix f)=. - Why is bottom the /least/ fixed point of =id=?
Every \( x \) is a fixed point of an identity function \( x \mapsto x \), isn't it? - What is the ordering? - "Semantic approximation order" - [[https://wiki.haskell.org/Lazy_vs._non-strict][Haskell wiki]] is wrong?
It conflates non-strictness with normal-order reduction strategy? - [[http://pages.cs.wisc.edu/~horwitz/CS704-NOTES/6.DENOTATIONAL-SEMANTICS.html#simple][A simple example of denotational semantics using a language of binary numerals]] - [[https://en.wikipedia.org/wiki/Binary_combinatory_logic][WP: Binary combinatory logic]].
Its semantics is SK calculus (SKI calculus without the redundant I combinator) which is equivalent to lambda calculus. - we can execute non-strict functions eagerly,
for example by strictness analysis or speculative execution.

People are often sloppy with these terms. Redditors. Experts. Researchers. Academics.
It is true that Haskell is non-strict.
It is true that Haskell (as implemented by GHC) is lazy.

We can infer these formal definitions: - A function \( f \) is /strict/ iff \( f(\bot) = \bot \). - "a strict function must map bottom to bottom" (from the SO answer)

**** How do we represent general recursion by a monad? How do we add general recursion to TFP? How do we do it with monads?
    :PROPERTIES:
    :CUSTOM_ID: how-do-we-represent-general-recursion-by-a-monad-how-do-we-add-general-recursion-to-tfp-how-do-we-do-it-with-monads
    :END:

Here we try to salvage [McBride2015].

TODO write the problem: how McBride's General doesn't compose

- Is McBride's General really a monad?
- Is Abdullah's M really a monad?
- Did Abdullah mistranslate McBride's General?
- Is there a way to transform begin-step-end to McBride's General or Abdullah's M?
- Start with axioms, then infer the data types.

These are the axioms that we want M to satisfy. - =rec f . rec g = rec (ext f . g)= - =rec f . rec g = rec (f <=< g)= - =rec pure = id=

How do we translate a recursive function =f : a -> b=
to an explicitly recursive function =f : a -> m b=?

#+BEGIN_SRC haskell
    -- Abdullah's M, obtained by translating
    -- the General in [McBride2015] from Agda to Haskell
    data M s t a
        = Em a
        | Ap (t -> M s t a) s

    cata :: (a -> r) -> ((t -> r) -> s -> r) -> r
    cata ar xrxr m = fix $ \ self m -> case m of
        Em a -> ar a
        Ap xma x -> xrxr (self . xma) x
#+END_SRC

- Why do we want to add general recursion to TFP?

  - Adding general recursion to a TFPL
    makes programming in that language more practical.

- There are several attempts to add general recursion to TFP.

  - [Nordstrom1988] (terminating general recursion)
  - [Bove2001] (simple general recursion in type theory)
  - [Capretta2005] (general recursion via coinductive types)
  - [McBride2015] (Turing-completeness totally free)
  - me on 2018-04-07? "Approximating general recursion in TFP"?
  - [[http://adam.chlipala.net/cpdt/html/GeneralRec.html][A non-termination monad inspired by domain theory]],
    part of the documentation of Coq's GeneralRec library

- How are monads useful in FP?

  - Monads allow embedding a strict language in a lazy language [Wadler1996].
  - "Monads may be regarded as a mild generalization of continuation-passing style." [Wadler1996]

- [[http://homepages.inf.ed.ac.uk/wadler/topics/monads.html][Philip Wadler's research on monads]]
- Reading triage:

  - Moggi 1991: Notions of computation and monads

    - Programs should form a category.

      - Every type becomes an object in the category.
      - Every (one-parameter) function becomes a morphism in the category.

    - "Kleisli triples are just an alternative description for monads. Although
      the former are easy to justify from a computational perspective, the latter
      are more widely used in the literature on category theory and have the
      advantage of being defined only in terms of functors and natural transformations,
      which make them more suitable for abstract manipulation."
    - Moggi's most cited paper, according to Google Scholar
    - [[https://www.disi.unige.it/person/MoggiE/][Moggi's home page]]

      - [[https://www.disi.unige.it/person/MoggiE/publications.html][Moggi's list of his publications]]

        - recent paper: 2010 "Monad Transformers as Monoid Transformers". Theoretical Computer Science, TCS vol.411

  - [[https://www.irif.fr/~mellies/mpri/mpri-ens/articles/moggi-computational-lambda-calculus-and-monads.pdf][Moggi 1989: Computational lambda-calculus and monads]]
  - 2017 Uustalu [[https://www.semanticscholar.org/paper/Partiality-and-Container-Monads-Uustalu-Veltri/a45cabd8696232a985368e5b7f138fd21a7bff9f][Partiality and container monads]]
  - [Sheard2003] (a pure language with default strict evaluation order and explicit laziness)
  - [Wadler1998] (how to add laziness to a strict language without even being odd)
  - [Wadler1992] "explores the use of monads to structure functional programs"
  - [[https://srfi.schemers.org/srfi-40/mail-archive/msg00059.html][Monad for lazy evaluation]],
    Scheme, SRFI-40 mail archive, Andre van Tonder
  - [[http://math.andrej.com/2008/11/17/not-all-computational-effects-are-monads/][Not all computational effects are monads]]
  - 2018 Tomas Petricek [[https://arxiv.org/pdf/1803.10195.pdf][What we talk about when we talk about monads]]

*** Result of meeting on 2018-04-21
   :PROPERTIES:
   :CUSTOM_ID: result-of-meeting-on-2018-04-21
   :END:

- https://mvanier.livejournal.com/2897.html
- Applicative Functor is a homomorphism over CCC (Cartesian closed category)?
- We can use a category as the denotation of a functional programming language.

  - An example of a category:

    - One object: Unit
    - One morphism:
    - Two functions:

      - =f0 x = Unit=
      - =f1 x = x=

- What is a CCC? It is a category that satisfies the axioms in [[https://en.wikipedia.org/wiki/Cartesian_closed_category][WP: CCC]].

*** Agenda for 2018-04-21
   :PROPERTIES:
   :CUSTOM_ID: agenda-for-2018-04-21
   :END:

**** Totality is not about termination
    :PROPERTIES:
    :CUSTOM_ID: totality-is-not-about-termination
    :END:

Consider this example.
This recursion is not structural.
However, it terminates under normal-order beta-reduction strategy.

#+BEGIN_SRC haskell
    -- Constant function.
    f : Nat -> Nat
    f _ = 0

    main : Nat
    main = f main
#+END_SRC

Is =main= a total function?
Does that question make sense?
Note that =main= is not a mathematical function.
The denotation of =main= might be a mathematical function.

Does totality depend on the reduction strategy?
Does that question make sense?

I conjecture that every general recursive function can be transformed into its begin-step-end form.
See "Approximating general recursion in TFP".

**** I think we can't add a Lazy Monad instance to Strict Haskell without changing the language semantics
    :PROPERTIES:
    :CUSTOM_ID: i-think-we-cant-add-a-lazy-monad-instance-to-strict-haskell-without-changing-the-language-semantics
    :END:

Here I try to (and fail to) add a Lazy monad to an imaginary language Strict Haskell (SH).

Imagine SH, a language with Haskell syntax
but with Scheme's applicative-order beta reduction (AOBR) instead of Haskell's normal-order beta reduction.
AOBR means: to evaluate =f x=, first evaluate =x=, and then evaluate =f x=.
SH is strict, and Haskell is lazy.

An inhabitant of the type =Lazy a= can be thought as a thunk that will return an inhabitant of =a=.

To construct an expression of type =Lazy a=, combine these: - The expression =bottom= constructs a thunk will fail. - The expression =pure x= constructs a thunk that will return =x=.
Note that =x= is evaluated before the thunk is constructed. - The expression =delay f= constructs a thunk that will return the result of evaluating =f Unit=.
The type of =f= is =Unit -> a=.
Note that =f unit= is not evaluated when the thunk is constructed,
unlike =pure=. - The expression =eval t= evaluates or forces the thunk =t=.
The type of =eval= is =Lazy a -> Maybe a=.

We want to embed laziness into SH.
Formally, this means that we want this equation to hold

#+BEGIN_EXAMPLE
    eval (bottom >>= \ x -> pure c) = Just c
#+END_EXAMPLE

but this is impossible in SH because the =>>== is strict.

However, if the type of =>>== were this

#+BEGIN_EXAMPLE
    (Monad m) => m (Lazy a) -> (Lazy a -> m (Lazy b)) -> m (Lazy b)
#+END_EXAMPLE

then it would be possible to embed laziness into SH.

Thus =Lazy= cannot be a =Monad= instance in SH.

Monads allow embedding a strict language in a lazy language [Wadler1996].
We are trying the reverse (embedding a lazy language in a strict language).
We have just tried the most naive way.
It failed.

**** Does TFP really sacrifice Turing-completeness?
    :PROPERTIES:
    :CUSTOM_ID: does-tfp-really-sacrifice-turing-completeness
    :END:

- What is a rigorous definition of Turing-completeness?

  - [[https://en.wikipedia.org/wiki/Turing_completeness][Wikipedia]]:
    "a system of data-manipulation rules (such as a computer's instruction set, a programming language, or a cellular automaton)
    is said to be Turing complete or computationally universal if it can be used to simulate any Turing machine"

    - What does "simulate" mean?

  - What is the relationship among total Turing machine, partial Turing machine, total function, and partial function?
    See [[https://en.wikipedia.org/wiki/Machine_that_always_halts][Wikipedia: Machine that always halts]].

- Why do you ask this?

  - We've been thinking that totality precludes Turing-completeness, but Conor McBride disagrees in [McBride2015].

*** Results
   :PROPERTIES:
   :CUSTOM_ID: results
   :END:

**** Is continuation the mother of all monads?
    :PROPERTIES:
    :CUSTOM_ID: is-continuation-the-mother-of-all-monads
    :END:

Abdullah wants to prove that continuation is the mother of all monads.

I think I have a partial proof of that for all Haskell-98 type endofunctions.

The folder [[https://github.com/Lambda-Jakarta/research/tree/master/abdullah-conjecture][abdullah-conjecture]]
contains a proposed partial proof of the Abdullah conjecture for all Haskell 98 type endofunctions.
The proof can be checked by the Lean theorem prover version 3.
See also the [[https://leanprover.github.io/][Lean prover home page]].
To edit Lean source files, use Visual Studio Code and its Lean plugin.

*** Reading triage
   :PROPERTIES:
   :CUSTOM_ID: reading-triage
   :END:

[[https://pdfs.semanticscholar.org/b60b/1c2e49ec6f574f220f162c8fdc81b2831830.pdf][1995, D. A. Turner, Elementary Strong Functional Programming]]

[[https://nms.kcl.ac.uk/maribel.fernandez/papers/TCS10.pdf][Godel's System T revisited]]

[[http://semantic-domain.blogspot.co.id/2012/12/total-functional-programming-in-partial.html][Total Functional Programming in a Partial Impure Language]]

[[http://www.cse.chalmers.se/~coquand/bengt.pdf][Type theory and functional programming]]:
Can we see type theory as a functional programming language?

[[http://www.cse.chalmers.se/~coquand/][Thierry Coquand page at Chalmers]]

[[https://mathoverflow.net/questions/126513/categories-of-recursive-functions][MO 126513: Categories of recursive functions]]

[[https://www.researchgate.net/publication/234808984_Denotational_semantics_and_rewrite_rules_for_FP][Denotational semantics and rewrite rules for FP]]:
"We consider languages whose operational semantics is given by a set of rewrite rules."

[[http://www.allisons.org/ll/Semantics/][allisons.org: Denotational Semantics]]

The Y-combinator is \( \lambda f. (\lambda x. f ~ (x ~ x)) ~ (\lambda x. f ~ (x ~ x)) \).
[[https://en.wikipedia.org/wiki/Fixed-point_combinator][WP: Fixed-point combinator]]

[[http://siek.blogspot.co.id/2016/12/simple-denotational-semantics-for.html][Simple Denotational Semantics for the Lambda Calculus, Pω Revisited?]]

*** Undigested information fragments
   :PROPERTIES:
   :CUSTOM_ID: undigested-information-fragments
   :END:

- "Partiality is an effect"
  https://www.cs.ox.ac.uk/ralf.hinze/WG2.8/22/slides/tarmo.pdf
- "Partiality Monad Transformer"
  https://stackoverflow.com/questions/15192897/partiality-monad-transformer
- http://www.cse.chalmers.se/~nad/publications/danielsson-semantics-partiality-monad.pdf
- categorical programming language

  - http://web.sfc.keio.ac.jp/~hagino/thesis.pdf
  - https://mathoverflow.net/questions/3721/programming-languages-based-on-category-theory
  - https://softwareengineering.stackexchange.com/questions/216635/category-theory-based-language

- "Kleisli triple over a category"
- "Category formed by the Kleisli triples over a category"
- Moggi 1991:

  - "Kleisli triples are just an alternative description for monads. Although
    the former are easy to justify from a computational perspective, the latter
    are more widely used in the literature on category theory and have the
    advantage of being defined only in terms of functors and natural transformations, which make them more suitable for abstract manipulation."

- Where does monad come from? Who invented it? Why was it invented?
- What is the relationship among monad, natural transformation, Kleisli category of a monad, Eilenberg-Moore what, adjunction?
- Has some semantics link
  http://math.andrej.com/2016/08/06/hask-is-not-a-category/comment-page-1/
- [[ftp://nozdr.ru/biblio/kolxo3/Cs/CsLn/Mathematics%20of%20program%20construction..%2010%20conf.,%20MPC%202010%20(LNCS6120,%20Springer,%202010)(ISBN%203642133207)(O)(435s)_CsLn_.pdf#page=109][2010, "Subtyping, Declaratively: An Exercise in Mixed Induction and Coinduction", Nils Anders Danielsson and Thorsten Altenkirch]]
** Language design
- https://github.com/mjambon/ocaml-wishlist
** ML/OCaml records vs modules: Why do we have modules if records suffice? An Ocaml "functor" would then simply be a function from records to records.
** Type systems
*** What is a type? Understanding what a type is from how it is used
Mathematically, A type is a set whose membership is syntactically decidable.

Engineeringly, A type gives meaning to bit patterns.

A type encodes meaning into bit patterns.
    - For example, consider the bit pattern 11111111.
        - It means -1 as an int8.
        - It means 127 as an uint8.
    - Types help translate programs.

Type system helps machines help us.
We shouldn't focus on type systems.
We should focus on logic.
We should focus on making machines help us.
The question is not how to make a good type system.
The question is how to offload the job as much as possible from humans to machines.

A programming language is a formal system.
A type system is a formal system.
Therefore a type system is a formal system embedded in a bigger formal system that is a programming language.

Programming languages have semantics, even if it is implicit.

A type defines the memory layout (bit pattern) of its values.

A type constrains values and expressions.

A type determines what values a function can take/give.

There are also other uses of types.

The question is: What is a type?
What principles should we follow when we design a language?

- https://news.ycombinator.com/item?id=8045115
    - [[https://existentialtype.wordpress.com/2011/03/19/dynamic-languages-are-static-languages/][Dynamic Languages are Static Languages | Existential Type]]
*** Church types and Curry types
- https://lispcast.com/church-vs-curry-types/
- [[https://www.reddit.com/r/programming/comments/2cavea/church_vs_curry_types_two_conflicting_perspectives/][Church vs Curry Types -- Two conflicting perspectives : programming]]
*** Row polymorphism
Why is it called row polymorphism?
Where is the row?
See "Objects and Aspects: Row Polymorphism", Neel Krishnaswami [[https://www.cs.cmu.edu/~neelk/rows.pdf][pdf]]

In the following, the function =set_name_r=  is row-polymorphic.
The function =set_name_n= is not row-polymorphic.
#+BEGIN_EXAMPLE
type Person = { name : String; age : Int; };
type Company = { name : String; location : String; };

set_name_r : String -> {name:String; r;} -> {name:String; r;};
set_name_r new_name {name=n; r;} = {name=new_name; r;};

set_name_n : String -> {name:String;} -> {name:String;};
set_name_n new_name {name=n;} = {name=new_name;};

john : Person;
john = { name="John"; age = 20; }

joe : Person;
joe = set_name_r "Joe" john;

not_person : {name:String};
not_person = set_name_n "What" john;

abc = { name="ABC"; location="1 ABC Way"; };
def = set_name_r "DEF" abc;
#+END_EXAMPLE
Without row polymorphism, we would have to write set_name twice: once for each type.
**** Row polymorphism vs subtyping
https://cs.stackexchange.com/questions/53998/what-are-the-major-differences-between-row-polymorphism-and-subtyping
**** Row polymorphism vs structural subtyping
https://news.ycombinator.com/item?id=13047934
*** what

- Liquid Haskell https://ucsd-progsys.github.io/liquidhaskell-blog/
- [[https://brianmckenna.org/blog/row_polymorphism_isnt_subtyping][Row Polymorphism Isn't Subtyping - BAM Weblog]]
- recursive types http://ecee.colorado.edu/~siek/ecen5013/spring10/lecture15.pdf
- http://tomasp.net/coeffects/
- 2008, article, "Church and Curry: Combining Intrinsic and Extrinsic Typing", Frank Pfenning https://www.cs.cmu.edu/~fp/papers/andrews08.pdf
- From Wadler home page
  - [[http://groups.inf.ed.ac.uk/abcd/][From Data Types to Session Types: A Basis for Concurrency and Distribution]]
- [[https://www.reddit.com/r/dependent_types/comments/8qig0u/vectors_are_records_too_pdf/][Vectors are records, too (pdf) : dependent_types]]
- https://wiki.haskell.org/Untypechecking is "converting from a type to a term".
- NOOL 2016 article "Static Typing Without Static Types — Typing Inheritance from the Bottom Up" [[http://www.it.uu.se/workshop/nool16/nool16-paper4.pdf][pdf]]
- https://en.wikipedia.org/wiki/Literate_programming

*** Parametricity
- Every recursive type can be written as `mu a. F a` where F is the associated free functor?
    - Example: `List a = Fix (F a)` where `F a b = 1 + a * b`.
    - `Fix F = F (Fix F)` is the least fixed point of F.
- Why should we care about parametricity?
    - [[https://bartoszmilewski.com/2014/09/22/parametricity-money-for-nothing-and-theorems-for-free/][Parametricity: Money for Nothing and Theorems for Free - Bartosz Milewski's Programming Cafe]]
*** Subtyping
A subtyping relation is an ordering of types.

So what? That is technically correct but that doesn't give any insights.

A subtype is an ordering that follows the Liskov substitution principle?

*** Type-checking
- Every type checking algorithm is unification (logic programming).
    - If the programmer annotates a term, use that annotation.
    - If the a term is not annotated, annotate that term with a freshly generated variable.
    - Unify everything according to the typing rules.
    - See Algorithm W in [[https://en.wikipedia.org/wiki/Hindley%E2%80%93Milner_type_system][WP:Hindley–Milner type system]].
*** Algebraic subtyping?
- subtyping
    - algebraic subtyping
        - 2016, PhD thesis, "Algebraic subtyping", Stephen Dolan https://www.cl.cam.ac.uk/~sd601/thesis.pdf
        - "Polymorphism, subtyping and type inference in MLsub" http://www.cl.cam.ac.uk/~sd601/papers/mlsub-preprint.pdf
            - from http://lambda-the-ultimate.org/node/5393
                    - from https://contributors.scala-lang.org/t/algebraic-subtyping/577
- http://www.cl.cam.ac.uk/~sd601/papers/mlsub-preprint.pdf
- https://www.cl.cam.ac.uk/~sd601/thesis.pdf
- https://cs.stackexchange.com/questions/53998/what-are-the-major-differences-between-row-polymorphism-and-subtyping
- https://www.cl.cam.ac.uk/teaching/1415/L28/rows.pdf
- 2017, "Introduction to homotopy type theory", http://www.cs.nott.ac.uk/~psztxa/ss-types-17/notes-summer17.pdf
- http://www.cs.nott.ac.uk/~psztxa/ss-types-17/
- https://homotopytypetheory.org/book/
- https://en.wikipedia.org/wiki/Subtyping
- https://en.wikipedia.org/wiki/Circle-ellipse_problem
- What does "X is a Y" mean?
It means P(X) => P(Y) for every predicate P.
Liskov substitution principle.
Does it mean "X is a subclass of Y" or "X is an instance of Y"?
** Interoperability between programming languages
- <2018-10-04> https://www.thestrangeloop.com/2018/all-the-languages-together.html
  - "Unfortunately, most current languages and toolchains were designed with language interoperability as an afterthought [...]"
  - "This talk is about how to change the status quo to make it easier to build multi-language software."
** Programming language design mistakes
*** Disclaimer
   :PROPERTIES:
   :CUSTOM_ID: disclaimer
   :END:

This will change without notice.

This may contain mistakes.

Opinions may change.

*** Justifying the creation of yet another programming language
   :PROPERTIES:
   :CUSTOM_ID: justifying-the-creation-of-yet-another-programming-language
   :END:

A new programming language should fix unforeseen design mistakes in existing programming languages.
It should not repeat their design mistakes.
Therefore we should collect the design mistakes so that we can avoid repeating them.

What is a mistake?
How do we know it's a mistake?

We realize something is a mistake when we find a better way.

*** Common design mistakes
   :PROPERTIES:
   :CUSTOM_ID: common-design-mistakes
   :END:

**** Ignoring programming language theory and research
    :PROPERTIES:
    :CUSTOM_ID: ignoring-programming-language-theory-and-research
    :END:

Some mistakes are because the language designer is ignorant or too lazy.

**** Dynamic typing
    :PROPERTIES:
    :CUSTOM_ID: dynamic-typing
    :END:

Dynamic typing is a design mistake.
Type inference goes back to 1958.
ML has type inference since 1973.
It's 2018.
There is no excuse for ignoring 60 years of research.
See [[https://en.wikipedia.org/wiki/Type_inference#Hindley%E2%80%93Milner_type_inference_algorithm][WP1]],
[[https://en.wikipedia.org/wiki/Hindley%E2%80%93Milner_type_system#History_of_type_inference][WP2]].

**** Lack of metaprogramming support
    :PROPERTIES:
    :CUSTOM_ID: lack-of-metaprogramming-support
    :END:

Lack of metaprogramming support is a design mistake.

**** Lack of symbol overloading (ad-hoc polymorphism)
    :PROPERTIES:
    :CUSTOM_ID: lack-of-symbol-overloading-ad-hoc-polymorphism
    :END:

Scheme and Haskell lack convenient symbol overloading.
Haskell requires you to make a type class for ad-hoc polymorphism.

Without overloading, clashing names need to be prefixed manually.

**** Mutable by default
    :PROPERTIES:
    :CUSTOM_ID: mutable-by-default
    :END:

Having variables mutable by default is a design mistake.

**** Non-first-class constructs
    :PROPERTIES:
    :CUSTOM_ID: non-first-class-constructs
    :END:

Object-oriented programming is a design mistake.

- =a.b()= should not mean "call method b of object a"
- =a.b()= should mean "get the function a.b, then call it".
- =a.b()= should mean =(a.b)()=.

  - =m = a.b; m();= should mean the same as =a.b()=.
  - Functions should be first-class.
    Methods should not exist.
    Fields are enough (with function types).
    It should be possible to assign to methods.

Statements are a design mistake.
They should not exist.
Only expressions should.
[[https://www.eclipse.org/xtend/documentation/203_xtend_expressions.html][Xtend]]
and
[[https://code.haxe.org/category/principles/everything-is-an-expression.html][Haxe]]
do this right. - Can we replace statements with expressions in existing imperative languages without breaking backward compatibility? - But C has [[https://en.wikipedia.org/wiki/Comma_operator][WP:Comma operator]]? - We can use lambda calculus for imperative programming. - Treat the statement separator (here we use semicolon =;=)
as an operator (function with infix syntax)
that sequences the effects of two expressions. - For example: - Let =a= be an expression. - Let =b= be an expression. - Thus =a;b= is an expression. - The value of =a;b= is the value of =b=. - The effect of =a;b= is the effect of =a= followed by the effect of =b=. - Semicolon is associative: =(a;b);c = a;(b;c)=. This also holds for the effects.

**** Virtual machines
    :PROPERTIES:
    :CUSTOM_ID: virtual-machines
    :END:

Virtual machines are a design mistake.
Instead, do semantic mapping: map a program in language A to an equivalent program in language B while preserving the meaning.

**** More than one way to do something
    :PROPERTIES:
    :CUSTOM_ID: more-than-one-way-to-do-something
    :END:

[[https://en.wikipedia.org/wiki/There%27s_more_than_one_way_to_do_it]["There is more than one way to do it"]] is a design mistake.

**** Disallowing multi-line string literals
    :PROPERTIES:
    :CUSTOM_ID: disallowing-multi-line-string-literals
    :END:

Languages should allow CR/LF in string literals.

*** Java
   :PROPERTIES:
   :CUSTOM_ID: java
   :END:

- Checked exceptions don't play nice with java.util.Stream.
  Either checked exception or java.util.Stream is a design mistake.

  - https://en.wikipedia.org/wiki/Effect_system

- What others think Java gets wrong

  - http://tech.jonathangardner.net/wiki/Why_Java_Sucks

**** Overcomplicated Java Virtual Machine
    :PROPERTIES:
    :CUSTOM_ID: overcomplicated-java-virtual-machine
    :END:

JVM does too much.
JVM bytecode verification is the compiler's job, not the VM's.
Does JVM bytecode verification even add any security?
Isn't JNI a bigger security hole?

**** Working against programmers
    :PROPERTIES:
    :CUSTOM_ID: working-against-programmers
    :END:

Java presumes that the programmer is not only untrustworthy but also an idiot.

Programmers make mistakes, but they aren't idiots.

- [[https://www.reddit.com/r/programming/comments/utqb/ask_reddit_why_do_so_many_reddit_users_hate_java/cutv1/][Ask Reddit: Why do so many reddit users hate java? : programming]]

  - "Java's solution to the problem of C++ allowing you to blow your foot off was to chop off your legs."

**** Throwing away the good parts of C++
    :PROPERTIES:
    :CUSTOM_ID: throwing-away-the-good-parts-of-c
    :END:

- Forbidding multiple inheritance is a design mistake.
- Java interfaces are a design mistake.
  See 2015 Robert C. Martin article [[http://blog.cleancoder.com/uncle-bob/2015/01/08/InterfaceConsideredHarmful.html][Java interface considered harmful]].
- Implementing generics too late with type erasure.
  [[https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-version-history][C# 2.0 introduced]]
  generics, without type erasure, while maintaining backward compatibility,
  by duplicating everything in System.Collections to System.Collections.Generic.
  This is ugly, but less ugly than type erasure.

  - [[https://stackoverflow.com/questions/11436802/how-are-c-sharp-generics-implemented][SO:How are C# generics implemented?]]

    - [[https://blogs.msdn.microsoft.com/ericlippert/2009/07/30/whats-the-difference-part-one-generics-are-not-templates/][Generics are not templates]]

**** Weak functional programming (allowing partial functions)
    :PROPERTIES:
    :CUSTOM_ID: weak-functional-programming-allowing-partial-functions
    :END:

Allowing partial functions is a design mistake.

*** C and C++
   :PROPERTIES:
   :CUSTOM_ID: c-and-c
   :END:

In the 1970s these were tolerable: memory was limited, tools didn't exist.
In 2018 these aren't tolerable.

- Unattainable standard.

  - [[https://stackoverflow.com/questions/5574469/are-there-any-fully-conforming-c-implementations][SO:Are there any fully conforming C++ implementations?]]

- Pile of workarounds.
- C++ compilation is abysmally slow. =#include <iostream>= expands to 10000 lines.
- C pointer declaration syntax for pointers and arrays is a design mistake.
- Conflating pointers and arrays.
- Leaving a lot of things undefined.
- Zero-terminated string is a design mistake.
- Parsing requires symbol resolution and type checking.
- Header files. They should be automatically generated from C files instead.
- Preprocessor works on text, not on C/C++ AST.

*** Haskell
   :PROPERTIES:
   :CUSTOM_ID: haskell
   :END:

- Template Haskell

  - Instead, we should have a metaprogramming library, and generate hs files.

- Haskell compilation is slow.
- Haskell module system is a design mistake.
- GHC: If A depends on B, and B changes without changing API, then A still requires recompilation.
- Bottom inhabits every type including the supposedly empty type =data Void=.

**** Not leveraging user-defined isomorphisms
    :PROPERTIES:
    :CUSTOM_ID: not-leveraging-user-defined-isomorphisms
    :END:

I want this:

#+BEGIN_EXAMPLE
    data A = A0 | A1
    data B = B0 | B1

    isomorphism "iso" between A and B is
        A0 ~ B0
        A1 ~ B1
#+END_EXAMPLE

instead of this:

#+BEGIN_SRC haskell
    data Iso a b = MkIso {
            fwd :: a -> b
            , rev :: b -> a
        }

    iso :: Iso a b
    iso = MkIso ab ba where

        ab :: A -> B
        ab A0 = B0
        ab A1 = B1

        ba :: B -> A
        ba B0 = A0
        ba B1 = A1
#+END_SRC

Explicit isomorphism may help reduce newtype boilerplate.

*** what
   :PROPERTIES:
   :CUSTOM_ID: what
   :END:

A problem with current programming methodologies is that they don't capture the higher-level properties of software, such as the architecture.
For example, how do we write, in a way that the computer can exploit, this statement:
"The fields of class C correspond one-to-one with the columns of database table T."?

- Other people's experiences

  - https://www.quora.com/If-you-were-to-design-a-programming-language-what-other-programming-language-would-it-evolve-from-and-what-aspect-of-that-language-would-you-do-differently
  - [[http://beza1e1.tuxen.de/articles/proglang_mistakes.html][5 Mistakes in Programming Language Design ― Andreas Zwinkau]]

    - [[https://news.ycombinator.com/item?id=1500665][Mistakes in programming language design | Hacker News]]

  - [[https://softwareengineering.stackexchange.com/questions/55047/what-is-the-greatest-design-flaw-you-have-faced-in-any-programming-language][What is the greatest design flaw you have faced in any programming language? - Software Engineering Stack Exchange]]
  - [[http://www.inquisition.ca/en/info/gepsypl/rules.htm][Programming Language Design Rules]]
  - 1999 Steele article "Growing a language" [[http://www.catonmat.net/blog/growing-a-language-by-guy-steele/][html]]
*** Lisp design mistake: having separate data and function cell
** Designing configuration languages
  :PROPERTIES:
  :CUSTOM_ID: designing-configuration-languages
  :END:

*** What is a configuration language?
   :PROPERTIES:
   :CUSTOM_ID: what-is-a-configuration-language
   :END:

Configuration language is programming language minus Turing-completeness.

*** What is the best configuration language?
   :PROPERTIES:
   :CUSTOM_ID: what-is-the-best-configuration-language
   :END:

2018-08-31:
[[https://github.com/dhall-lang/dhall-lang][Dhall]] is the pinnacle of configuration languages, in my opinion, as far as I know.

Can a configuration language get any better than Dhall?

How far can we push configuration languages without Turing-completing it?

Dhall isn't the only Turing-incomplete language.
There are also Coq, Lean, Agda, and others.
Can we use these as configuration languages?
Should we?

*** Some rants
   :PROPERTIES:
   :CUSTOM_ID: some-rants
   :END:

Write your configuration in Dhall.
You minimize duplication.
It generates YAML/JSON.

Why stop there?
Replace all your YAML, JSON, XML, INI, PROPERTIES, configurations with Dhall.

2018-08-31:
We're considering HashiCorp Terraform.
I think they should use Dhall, or at least learn from Dhall, instead of creating their own
[[https://www.terraform.io/docs/configuration/syntax.html][HCL (HashiCorp Configuration Language)]].
We have a "Terraform Workaround Engineer" here at work.

Someone has done that: [[https://github.com/blast-hardcheese/dhall-terraform][dhall-terraform]].
** Designing markup languages
  :PROPERTIES:
  :CUSTOM_ID: designing-markup-languages
  :END:

A markup language adds some semantics to text.

- Finding the best document typesetting/processing system

  - What are some markup languages?

    - http://www.nongnu.org/skribilo/
    - markdown
    - reST (restructured text)
    - TeX, LaTeX
    - Unix roff, troff, nroff, man, GNU groff
    - GNU info

- Finding a lightweight semantic markup language with fixed ontology

  - [[https://en.wikipedia.org/wiki/Lightweight_markup_language][WP:Lightweight markup language]]
  - Which markup language?

    - reST
    - [[https://en.wikipedia.org/wiki/Textile_(markup_language)][Textile]]. GitHub Pages stopped supporting this.
    - S-expression
    - not Markdown?
    - https://tiddlywiki.com/static/WikiText.html
    - https://hackage.haskell.org/package/mmark
    - [[https://orgmode.org/][Org mode for Emacs -- Your Life in Plain Text]]

      - [[https://medium.com/@jackbaty/using-markdown-instead-of-org-mode-a78a1805c0ba][Using Markdown instead of Org Mode -- Jack Baty -- Medium]]

  - Which tool?

    - pandoc
    - hakyll

  - Which editor?

    - Vim
    - Emacs
    - Visual Studio Code
    - Too experimental

      - [[https://clearly.pl/tutorial/][clearly.pl]] reminds me of TiddlyWiki.

** Measuring programming language quality by how easy is it to do the right thing
What is the right thing?
*** What is an error?
Unintended behavior?
How do we measure intention?
*** By probability of error of random programs?
How do we measure the probability that a program, uniformly randomly taken from the set of all legal programs in language L, contains an error?
** Making a programming language
https://www.reddit.com/r/ProgrammingLanguages/comments/9ky7o6/writing_my_own_programming_language/e72qjll/
banzr: 'Racket is taught in universities to be used to write languages. Use "match" and "cases" to build the parser and interpreter. Good luck!'
** Class-based programming
  :PROPERTIES:
  :CUSTOM_ID: class-based-programming
  :END:

- What is a class?

  - What is a class?

    - A class is a blueprint (a template).
    - A class is a way of organizing your program.

  - What does a class have?

    - A class has name, fields, and methods.

  - What does a class do?

    - A class groups data and code that needs that data.

- Every object belongs to a class.
- In class-based programming:

  - Objects don't have methods.
  - Classes have instance methods.
  - Each instance method can be called with an instance as a hidden argument.

- From procedural point of view, these two are the same:

#+BEGIN_EXAMPLE
    // Java

    object.method(arg0, arg1, ...)

    // C

    method(object, arg0, arg1, ...)
#+END_EXAMPLE

- The dot is just a syntax for passing an implicit first argument.
- The dot operator associates to the left:

#+BEGIN_EXAMPLE
    a.b().c().d() = ((a.b()).c()).d()
#+END_EXAMPLE
** Benefits and drawbacks of static type checking
The benefits of types:

- Types prevent stupid mistakes.
- Types can be used to improve program efficiency.
- Types are documentation for both human and machine.
  Types communicate intention to both human and machine.

The drawbacks of types:

- Some safe programs don't typecheck.
- Some programs become longer.
  - Haskell's type system complicates the AST decoration problem.
    In TypeScript, the AST decoration problem is trivial;
    you just add a field at runtime.
*** Arguments for static type checking?
**** What?
- There are two camps:
  - DTL (dynamically typed language)
  - STL (statically typed language)
- Every programmer is lazy, but differently.
  - People who use DTLs are too lazy to write the types.
  - People who use STLs are too lazy to do what machines can do, such as
    - detecting typos,
    - avoiding unintentional conversions,
    - tracing the code, 2 weeks later, to find out the type of a variable.
- People who use DTLs are too diligent.
They love to do what machines can do: type checking.
- Static typing enables you to be lazier.
  Help the machine help you avoid work.
  By investing in a few keystrokes, you will get these in return:
- The machine will catch more mistakes for you.
- You can have an IDE that finds references correctly.
  This enables features such as "Jump to definition", "Rename", and even more fancy refactorings.
- Moral of the story:
  - Let the machines do all the boring stuffs.
  - Be future-lazy, not present-lazy.
    Do things now so that you can be lazy later.
    Don't be lazy now only to regret it later.
    - People who organize their things are too lazy to spend mental effort later in a scramble to find things.
    - People who don't organize their things are just too lazy to do it, and would rather just experience regret in the future than experience some hardship now for a better future.
    - The sane solution to "too lazy to write types" is to pick a language with type inference, not to ditch types altogether.
    Don't throw the baby out with the bathwater.
- This argument also applies to functional programming vs procedural programming.
  Indeed this argument applies to every technology.
  Adopting technology enables us to be lazier.
- People buy tractors because they are too lazy to till their fields with hoes.
- People use frameworks because they are too lazy to do the same plumbing again and again.
- People strive to avoid side-effects in functional programming because they are too lazy to debug synchronization errors.
- The only thing the human race isn't too lazy to do is to think about lazier ways of doing things.
**** What?
- https://dimjasevic.net/marko/2018/10/23/typed-functional-programming-and-software-correctness/
  - "what can be done about a programmer’s limited time to write correct software?
    While there are multiple plausible answers to this question,
    I will argue that a very effective solution is to use typed functional programming."
  - 2017 https://dimjasevic.net/marko/2017/11/10/a-subtyping-polymorphism-misfortune/
    - "the interaction between subtyping and parametric polymorphism asks for trouble"
    - type-parameter variance and polymorphism don't mix?
** TODO Measuring programming language quality
- https://en.wikipedia.org/wiki/Goodhart%27s_law
*** Minimum IQ required to understand the language
*** Development cost
**** Length of program
**** Development effort; number of people; amount of time
*** Developer feeling/enjoyment
*** Maintenance cost
**** Cost due to runtime defects (defects discovered while the program is running in production environment)
*** Rosetta Stone: comparing programs that do the same thing in different languages
https://medium.com/concerning-pharo/elegant-pharo-code-bb590f0856d0
*** Learnability, masterability, usability
** Intersection between programming language search and software engineering: The effect of programming language on software quality
- https://developers.slashdot.org/story/14/11/05/0530228/the-effect-of-programming-language-on-software-quality
  - 2014 article "A Large Scale Study of Programming Languages and Code Quality in Github" [[http://web.cs.ucdavis.edu/~filkov/papers/lang_github.pdf][pdf]]
    - I don't know enough to determine whether the methodology is valid.
** Beginning programming language research
- [[https://blog.acolyer.org/2018/01/26/a-practitioners-guide-to-reading-programming-languages-papers/][A practitioner's guide to reading programming languages papers]]
  - from [[https://www.reddit.com/r/ProgrammingLanguages/top/][top scoring links : ProgrammingLanguages]]
- https://waleedkhan.name/blog/getting-a-job-in-pl/
  - https://www.reddit.com/r/ProgrammingLanguages/comments/9ffiky/how_to_get_a_job_in_programming_languages/
** Prolog is ideal for writing a typechecker, and TypeScript is ideal for typechecking AST decorations, so we should fuse Prolog and TypeScript.
Abdullah pointed out to me that TypeScript interface is similar to Ocaml polymorphic variant?
*** But there is Racket and its languages such as ProfessorJ, Datalog.
- "Creating languages" https://docs.racket-lang.org/guide/languages.html
** Racket syntax objects, read-syntax; does Prolog/Haskell have this?
- Must understand: reader and expander.
  - Racket parsing has two stages/levels: reader and expander.
  - (My guess?) The output of the reader is the input of the expander?
- https://docs.racket-lang.org/guide/hash-reader.html
  - "The difference between =read= and =read-syntax= is that read is meant to be used for data while =read-syntax= is meant to be used to parse programs."
  - Readtables work at the reader level.
  - Macros work at the expander level.
    - Macros can't change the lexicon.
** Stop abusing the equals sign
  :PROPERTIES:
  :CUSTOM_ID: stop-abusing-the-equals-sign
  :END:

The equals sign should be used for equations only and nothing else.

Consider this fragment in a hypothetical functional programming language.

#+BEGIN_SRC haskell
    hang : Nat
    hang = hang
#+END_SRC

The fragment =hang = hang= falsely suggests that it is an /equation/ like $x = x$.
We can substitute $x$ with any natural number, and the equation $x = x$ will still hold.
But that is not what we mean with =hang=.
We are defining a /rewrite rule/, not an equation.
Thus we should write =hang => hang= instead.

In an equation, the left and right side are equal.
We don't care if they are flipped.
In a rewrite rule, we care about direction.
We want to start with $1 + 1$ and end with $2$, not the other way,
unless we are writing a theorem prover.

Programming is hard enough already.
Let's not make it harder for students.
Stop using confusing notation.

Reading triage:

- [[https://www.researchgate.net/publication/286418817_Misuse_of_the_equals_sign_An_entrenched_practice_from_early_primary_years_to_tertiary_mathematics][Misuse of the equals sign: An entrenched practice from early primary years to tertiary mathematics]]
** JetBrains MPS
  :PROPERTIES:
  :CUSTOM_ID: jetbrains-mps
  :END:

MPS is "Meta Programming System".

A concept can have properties. Each property has a type.
The property type system is limited to int, string, and regex-constrained string.

A member in a model is an /instance/ of a concept,
similar to how an object is an instance of a class in Java.

MPS is a /tree/ editor, not a text editor.

A concept is an AST (abstract syntax tree) node type.

On 2017-08-12, MPS 2017.2 doesn't support Java 7 try-with-resources statements.

The MPS IntelliJ IDEA plugin allows you to use a language from IDEA,
but not defining your own language.
You need the MPS IDE for that.

*** External links
   :PROPERTIES:
   :CUSTOM_ID: external-links
   :END:

- [[https://confluence.jetbrains.com/display/MPSD20172/Using+MPS+inside+IntelliJ+IDEA][Using MPS inside IntelliJ IDEA]]
- [[https://confluence.jetbrains.com/pages/viewpage.action?pageId=93128576][MPS user guide for Java developers (IntelliJ IDEA)]] (long)
- [[https://confluence.jetbrains.com/display/MPSD20172/Finding+your+way+out][What to do when there is a problem]]
** Problems that the language has to solve
*** Solving the expression problem
*** Solving the AST decoration problem / AST typing problem
- Other names of this problem:
  - [[https://www.reddit.com/r/haskell/comments/1f91w3/the_ast_typing_problem/][AST typing problem]]
  - "Trees that grow" problem
- common problem in parsing: how to decorate AST in a functional language
  - 2013, article, [[http://blog.ezyang.com/2013/05/the-ast-typing-problem/][The AST typing problem]], Edward Z. Yang
    - 2010, discussion, "The AST typing problem", [[http://lambda-the-ultimate.org/node/4170][LTU]]
  - Embracing the Any type
    - [[http://javaparser.org/][JavaParser]] added an =Object data= field to the AST Node base class, but they changed their minds.
      - https://github.com/javaparser/javaparser/issues/456
      - https://github.com/javaparser/javaparser/pull/472
  - Structural typing
    - TypeScript (JavaScript) is ideal for AST decoration problem?
      You just add a key to the AST node object you want to decorate.
      - Any language with structural typing is ideal?
      #+BEGIN_EXAMPLE
          interface Node {
          }

          interface Node_parse extends Node {
          }

          interface Node_desugar extends Node_parse {
          }
      #+END_EXAMPLE
  - Loosely-typed Haskell?
    - This is basically the JavaScript way.
    #+BEGIN_SRC haskell
        type Key = String
        data Value
            = VNum Double
            | VStr String
            | VObj Object
        type Object = [(Key, Value)]
        type Node = Object
    #+END_SRC
  - 2017, article, "Trees that grow", https://www.microsoft.com/en-us/research/uploads/prod/2016/11/trees-that-grow.pdf
    - "The compiler writer is then faced with two unpalatable choices.
      She can define a new data type representing the output decorated tree, at the cost of much duplication.
      Or she can write a single data type with all the necessary fields and constructors, at the cost of having many unused fields and constructors at different stages of compilation."
    - However, we can fake extensible ADTs with pattern synonyms, with Fix, and without type families.
      - Similar endeavors
        - https://wiki.haskell.org/Type_composition
      - Haskell doesn't beta-reduce types.
      - This is an example code:
      #+BEGIN_SRC haskell
          data Exp_ name exp
              = Var name
              | Add exp exp
              | ...

          data Locd a
              = MkLocd Loc a

          data Typed t a = MkTyped t a

          newtype Compose f g a = MkCompose { unCompose :: f (g a) }

          type PsExp name = Fix (Compose Locd (Exp_ name))
          type TcExp name = Fix (Compose Locd (Compose Typed (Exp_ name)))

          -- To ameliorate the verbosity:

          class Exp name exp where
              var :: name -> exp
              add :: exp -> exp -> exp
              ...

          instance Exp (PsExp name) where ...
          instance Exp (TcExp name) where ...
      #+END_SRC
  - What if GHC can "inline" data types at compile time?
    What if GHC can "inline" A and B in =data A = MA Int; data B = MB Int String; data E = EA A | EB B;=,
    producing =data E = EA Int | EB Int String=?
    Implementing this with Haskell 98 types should be straightforward.
  - related - "Data types a la carte" - http://hackage.haskell.org/package/compdata - Haskell type composition - https://wiki.haskell.org/Extensible_datatypes
- Other people's efforts
  - https://brianmckenna.org/blog/type_annotation_cofree
- https://discuss.ocaml.org/t/is-it-feasible-to-write-parsers-without-using-polymorphic-variants-for-ast-representation/1906
**** Other solutions to the AST typing problem / trees-that-grow problem; using recursion schemes for separation of concern in functional programming
- "Program Reduction: A Win for Recursion Schemes" http://www.newartisans.com/2018/04/win-for-recursion-schemes/
  - Annotated expression trees
    - "The first moment when this recursion scheme went from an interesting idea to a good design decision was when someone created an issue on GitHub, asking to add location information to the expression tree."
  - Abstract Definitional Interpreters?
    - 2017 article "Abstracting Definitional Interpreters" https://arxiv.org/abs/1707.04755
  - boilerplate
  - recommends using recursion schemes

That is an interesting idea, but some important questions remain:

- How do we do that without boilerplate (for the library writer)?
- How do we do that without performance penalty?
* Developing software for the Web
** The Web was not designed to be a software platform
- [[https://news.ycombinator.com/item?id=11035143][The sad state of web development]] (not everyone agrees).
- It's time to kill the web https://blog.plan99.net/its-time-to-kill-the-web-974a9fe80c89
  - from https://twitter.com/tehjh Jann Horn's Twitter
    - At that time Jann Horn was a member of Google's Project Zero
      https://blog.plan99.net/what-should-follow-the-web-8dcbbeaccd93
- Why not infinite scrolling?
  - Do you have an alternative to infinite scrolling?
  - Do you handle network interruptions?
    How does the user continue scrolling after network connection is restored?
    Is there an unhandled exception in your script?
** Web application frameworks?
http://zotonic.com/
** TODO How do we develop enterprise web applications efficiently?
*** <2018-09-27> Enterprise application development is like three blind people describing an elephant.
Every team is a blind people.

The company's actual ontology is the elephant.

How do we unify enterprise systems?
Should we combine subsystem ontologies to produce the actual ontology,
or should we derive subsystem ontologies from the actual ontology?
*** The ontology of enterprise web applications
**** Entities
An /entity/ is something that has identity.
Every entity is distinguishable from other entities.
**** Properties (extrinsic properties)
A /property/ of an entity is something that makes the entity what it is.

In software modeling, properties are usually extrinsic properties.

An extrinsic property of an entity is something we give to the entity, not something that comes with the entity.

Examples of properties:

- The name of a person is an extrinsic property.
  Changing his name doesn't change what I think of him.
- The name of a hotel is an extrinsic property.
  Changing the hotel's name does not change my willingness to stay in it.

A /property/ is a function from entity E to value V.

https://en.wikipedia.org/wiki/Intrinsic_and_extrinsic_properties
**** Combining entities
**** Mapping entities to storages
* Ramblings? Wish lists? Too speculative? Unclear goal/reason? Condemned to oblivion?
** Category theory and programming languages?
The section title needs a verb.
- Category-theoretic model of functional programming languages
  - Every functional programming language L can be modeled by a category C(L) whose objects are the types of L and arrows are the function expressions of L.
- categorical programming (what is this?)
  - 2000, PhD thesis, "Categorical programming with inductive and coinductive types" https://kodu.ut.ee/~varmo/papers/thesis.pdf
  - categorical programming language
    - 1993, article, "Comparing Hagino's categorical programming language and typed lambda-calculi" https://www.sciencedirect.com/science/article/pii/030439759390186W
    - 1987, PhD thesis, "Categorical programming language" http://web.sfc.keio.ac.jp/~hagino/thesis.pdf
      - "An interpreter of Hagino's Categorical Programming Language (CPL)." https://github.com/msakai/cpl
    - aggregators
      - 2009, https://mathoverflow.net/questions/3721/programming-languages-based-on-category-theory
      - https://softwareengineering.stackexchange.com/questions/216635/category-theory-based-language
- category theory applied to programming language theory
  - 2012, "Generic Programming with Adjunctions" http://www.cs.ox.ac.uk/ralf.hinze/LN.pdf
** Foundation of mathematics especially for programming?
- set theories, such as ZF, ZFC, NBG, etc.
  - https://math.stackexchange.com/questions/136215/difference-between-zfc-nbg
- type theories, such as Martin-Löf type theory
- logic?
- category theory?
- lambda calculus?
- https://cstheory.stackexchange.com/questions/27217/are-there-presentations-of-set-theory-in-terms-of-lambda-calculus
  - Grue's map theory, 1992
    - http://hjemmesider.diku.dk/~grue/
      - 1992, Grue, PhD thesis, [[http://hjemmesider.diku.dk/~grue/papers/Grue92/Grue92.pdf]["Map theory"]]
        - p. 130: "Equality is better than truth [...]" (How do we explain the context?)
          - https://en.wikipedia.org/wiki/Equational_logic
    - related?
      - equational programming
    - 2016 reformulation article "A synthetic axiomatization of Map Theory" [[https://hal.archives-ouvertes.fr/hal-00678410v3][pdf available]]
Can we formalize "a program is an executable formal system" using Grue's map theory?
- How is "false" represented?
- How is "true" represented?
- How is "conjunction" represented?
** Probably irrelevant to our goal
   :PROPERTIES:
   :CUSTOM_ID: probably-irrelevant-to-our-goal
   :END:

- [[https://en.wikipedia.org/wiki/Non-English-based_programming_languages][WP:Non-English-based programming languages]]
- Obscure things. Much marketing, little technical detail.

  - VPRI, Alan Kay et al., archived (stopped operating in 2018), computing for the masses?

    - "Improve 'powerful ideas education' for the world's children and to advance the state of systems research and personal computing"

      - https://harc.ycr.org/

        - https://www.ycr.org/

    - https://en.wikipedia.org/wiki/Viewpoints_Research_Institute
    - https://en.wikipedia.org/wiki/COLA_(software_architecture)
    - https://news.ycombinator.com/item?id=11686325
    - FONC = fundamentals of new computing
    - http://www.vpri.org/index.html

  - YCR

    - visual programming language

      - blocks language

        - https://harc.ycr.org/project/gp/

- Functional Payout Framework http://lambda-the-ultimate.org/node/3331
** Automatic deglobalization of C programs?
** <2018-09-15> Make an Emacs Lisp interpreter in Haskell for Yi editor
** How do we model historical data in SQL?
- Do we have to use SQL?
- Is SQL the best tool for the job?
- Does SQL do the job well enough to justify reducing maintenance costs?
- How is historical data related to audit trail?
  - Audit trail encompasses historical data.
    Audit trail is a more stringent requirement.
*** TODO <2018-09-19> Read
- [[https://stackoverflow.com/questions/3874199/how-to-store-historical-data][database design - How to Store Historical Data - Stack Overflow]]
- [[https://grisha.org/blog/2015/09/23/storing-time-series-in-postgresql-efficiently/][Storing Time Series in PostgreSQL efficiently - Gregory Trubetskoy]]
- [[https://dba.stackexchange.com/questions/114580/best-way-to-design-a-database-and-table-to-keep-records-of-changes][mysql - Best way to design a database and table to keep records of changes? - Database Administrators Stack Exchange]]
  - [[https://www.codeproject.com/Articles/105768/Audit-Trail-Tracing-Data-Changes-in-Database][Audit Trail – Tracing Data Changes in Database - CodeProject]]
- [[https://www.red-gate.com/simple-talk/sql/database-administration/database-design-a-point-in-time-architecture/][Database Design: A Point in Time Architecture - Simple Talk]]
- [[https://blog.timescale.com/time-series-data-why-and-how-to-use-a-relational-database-instead-of-nosql-d0cd6975e87c][Time-series data: Why (and how) to use a relational database instead of NoSQL]]
  - Where is the SQL DDL/schema?
** Information that is looking for a place where they can be most useful
*** Garbage collection
- [[https://www.reddit.com/r/programming/comments/7zfbs5/conservative_gc_is_it_really_that_bad_xpost_rjava/][Conservative GC: Is It Really That Bad? (X-post /r/java) : programming]] (summary)
  - [[https://www.excelsiorjet.com/blog/articles/conservative-gc-is-it-really-that-bad/][Conservative GC: Is It Really That Bad? -- Excelsior JET Team Blog]]
- [[https://news.ycombinator.com/item?id=16436574][Conservative GC: Is It Really That Bad? | Hacker News]]
- Real-time garbage collection
  - http://michaelrbernste.in/2013/06/03/real-time-garbage-collection-is-real.html
- Why GC only memory?
  Why not also GC file handles?
  Why not GC all resources?
  - [[https://cs.stackexchange.com/questions/52735/why-does-garbage-collection-extend-only-to-memory-and-not-other-resource-types][Why does garbage collection extend only to memory and not other resource types? - Computer Science Stack Exchange]]
*** 2017 article "What Is the Best Way For Developers to Learn New Software Tools? An Empirical Comparison Between a Text and a Video Tutorial"
- http://programming-journal.org/2017/1/17/
*** Common Lisp advocacy?
- 2018, article, [[https://academic.oup.com/bib/article/19/3/537/2769437][How the strengths of Lisp-family languages facilitate building complex and flexible bioinformatics applications | Briefings in Bioinformatics | Oxford Academic]]
**** Common Lisp Object System

- [[http://www.aiai.ed.ac.uk/~jeff/clos-guide.html][A Brief Guide to CLOS]]

*** Why people don't adopt metaprogramming tools
I fear that the tool doesn't perfectly fit my use case.
When that happens, I want to drop down to the lower layer.
Generated code is usually inflexible.
I could maintain a patch, but isn't it (patching generated code) rather hacky and brittle?
The right way is to design the metalanguage so that it can express such transformation.

https://www.eclipse.org/epsilon/doc/articles/eugenia-patching/
*** TODO Process these informations

- Composition, composable systems

  - https://en.wikipedia.org/wiki/Software_transactional_memory#Composable_operations

- https://en.wikipedia.org/wiki/Programming_language_theory
- refactoring

  - [[https://github.com/PyCQA/baron][github.com/PyCQA/baron]]: "IDE allow you to refactor code, Baron allows you to write refactoring code."
  - HaRe Haskell refactoring tool https://github.com/alanz/HaRe

- ungrouped

  - https://medium.com/generative-design/introduction-to-computational-design-6c0fdfb3f1
  - magic?

    - http://conal.net/blog/posts/semantic-editor-combinators

  - [[https://2017.programmingconference.org/track/refuses-2017][Salon des Refusés 2017]]

- 2002, article collection, "Recent advances in Java technology: theory, application, implementation" http://www.cs.nuim.ie/~jpower/Research/Papers/2002/power-raijt-toc.pdf
- 1985, article, "Automatic synthesis of typed Λ-programs on term algebras" https://www.sciencedirect.com/science/article/pii/0304397585901355
- 2015, article, "Dynamically Composing Languages in a Modular Way: Supporting C Extensions for Dynamic Languages", [[https://chrisseaton.com/rubytruffle/modularity15/rubyextensions.pdf][pdf]]
- https://github.com/nim-lang/Nim
- 2016, article, "Towards Ontology-Based Program Analysis", [[http://drops.dagstuhl.de/opus/volltexte/2016/6120/pdf/LIPIcs-ECOOP-2016-26.pdf][pdf]]

  - Interesting conference title: "Conference on very important topics (CVIT)"

    - Is it real?
      Is it a secret society?
      Google doesn't seem to know about it.

- functional languages with explicit memory layout?
  functional languages for systems programming?

  - [[https://github.com/ollef/sixten][Sixten: Functional programming with fewer indirections]]

    - It also deals with representing algebraic data type inhabitants as bit patterns.
    - "Sixten is very related to other functional languages such as Haskell, Agda, and Idris.
      The biggest difference between other languages and Sixten is the way that Sixten allows us to control the memory layout of data."
    - [[https://gitter.im/sixten-lang/General?source=orgpage][Sixten, "General", Gitter, community chat]]

- What are Prolog alternatives?

  - 2011, article, [[https://arxiv.org/abs/1107.5408][[1107.5408] A structured alternative to Prolog with simple compositional semantics]]

- 2017, article, [[https://arxiv.org/abs/1707.00024][[1707.00024] A Formalized General Theory of Syntax with Bindings]]
- [[https://www.cs.cmu.edu/~mleone/language/projects.html][Programming Language and Compiler Research Groups]]
- [[http://www.pl-enthusiast.net/2014/07/10/ieee-posts-its-top-list-of-languages/][IEEE posts its top list of languages - The PL Enthusiast]]
- [[http://www.pl-enthusiast.net/2015/05/27/what-is-pl-research-and-how-is-it-useful/][What is PL research and how is it useful? - The PL Enthusiast]]
- 2014, article, [[https://arxiv.org/abs/1410.1776][Ontology-based Representation and Reasoning on Process Models: A Logic Programming Approach]]
- 1994, article, "Formalizing architectural connection", [[http://web.cs.wpi.edu/~cs562/s98/pdf/wright-icse16.pdf][pdf]]
- [[https://2015.splashcon.org/track/nool2015#event-overview][NOOL 2015 accepted papers - SPLASH 2015]] ("New Object Oriented Languages")

  - "Classes Considered Harmful", [[http://web.cecs.pdx.edu/~black/publications/ClassesHarmful.pdf][pdf]]
  - "Ubiquitous Object Orientation to Foster the Advancement of Programming Languages", [[http://www.cs.cmu.edu/~dkurilov/papers/nool15.pdf][pdf]]

- NOOL 2016 articles

  - "Nomen: A Dynamically Typed OO Programming Language, Transpiled to Java", [[http://www.it.uu.se/workshop/nool16/nool16-paper9.pdf][pdf]]

    - "Nomen is an experimental, dynamically typed OO programming language which compiles to Java source code."
    - "Nomen is designed as a language for experimenting with IDE support generation using the Rascal language workbench."

  - "The essence of subclassing", [[http://www.it.uu.se/workshop/nool16/nool16-paper5.pdf][pdf]]
  - "Towards Automatic Decoration", [[http://www.it.uu.se/workshop/nool16/nool16-paper2.pdf][pdf]]
  - syntax

    - "Polite Programmers, Use Spaces in Identifiers When Needed", [[http://www.it.uu.se/workshop/nool16/nool16-paper10.pdf][pdf]]

- [[https://en.wikipedia.org/wiki/Comparison_of_functional_programming_languages][WP:Comparison of functional programming languages]]
- Designing APIs

  - [[http://blog.steveklabnik.com/posts/2012-02-13-an-api-ontology][An API Ontology - Literate Programming]]

- Tools

  - Golang
  - Ruby gem and bundler
  - Python pip

- Great Works in Programming Languages, Collected by Benjamin C. Pierce http://www.cis.upenn.edu/~bcpierce/courses/670Fall04/GreatWorksInPL.shtml
- to read? "theories of programming languages reynolds"
- 2017, book, "Principles of Programming Languages" https://www.cs.bgu.ac.il/~mira/ppl-book-full.pdf
- 2003, article, "Composing Programming Languages by Combining Action-Semantics Modules" http://www.brics.dk/RS/03/53/BRICS-RS-03-53.pdf
- 2001, position paper, "Composition Languages for Black-Box Components" http://scg.unibe.ch/archive/papers/Wuyt01c.pdf
- glue: Make better services. (deprecated) https://hackage.haskell.org/package/glue
- yet another music programming language https://github.com/alda-lang/alda
- linearscan: Linear scan register allocator, formally verified in Coq; 2004, master thesis, https://hackage.haskell.org/package/linearscan
- Lastik: A library for compiling programs in a variety of languages (Java, Scala, C#) https://hackage.haskell.org/package/Lastik
- risc386: Reduced instruction set i386 simulator https://hackage.haskell.org/package/risc386
- 2017, "Theorems for Free for Free", Wadler http://homepages.inf.ed.ac.uk/wadler/topics/blame.html

  - What is "polymorphic blame calculus"?

- https://idris.readthedocs.io/en/v1.3.0/faq/faq.html#what-are-the-differences-between-agda-and-idris

  - "Why does Idris use eager evaluation rather than lazy?"

    - "What is the representation of =thing= at run-time? Is it a bit pattern representing an integer, or is it a pointer to some code which will compute an integer? In Idris, we have decided that we would like to make this distinction precise [...]"
    - Idris has laziness, but you have to be explicit.

- https://en.wikipedia.org/wiki/Automatic_programming
- https://en.wikipedia.org/wiki/Program_synthesis
- https://www.cs.cmu.edu/~mleone/language-research.html
- "Confessions Of A Used Programming Language Salesman: Getting The Masses Hooked On Haskell", Erik Meijer, [[https://pdfs.semanticscholar.org/233a/932b3e94f1f117655e4862995b32f33754be.pdf][pdf]]

  - What are the key points?

- 1966, article, P. J. Landin, "The next 700 programming languages", [[https://www.cs.cmu.edu/~crary/819-f09/Landin66.pdf][pdf]]

  - https://en.wikipedia.org/wiki/Off-side_rule

- http://matt.might.net/articles/best-programming-languages/
- [[http://www.cs.utexas.edu/users/EWD/ewd06xx/EWD641.PDF][EWD641: On the interplay between mathematics and programming]]
- http://hackage.haskell.org/package/Workflow
- https://pchiusano.github.io/2017-01-20/why-not-haskell.html
- http://unisonweb.org/2015-05-07/about.html#post-start
- [[https://github.com/facebook/duckling][facebook/duckling: Language, engine, and tooling for expressing, testing, and evaluating composable language rules on input strings.]]
- [[https://github.com/GaloisInc/crucible][GaloisInc/crucible: Crucible is a library for symbolic simulation of imperative programs]]
- 2009, "Domain-Specific Languages for Composable Editor Plugins"

  - [[https://pdfs.semanticscholar.org/presentation/85d8/bc42122ff5175be1ebc3c7b91e4abff55d22.pdf][2009 slides pdf]]
  - [[http://bora.uib.no/bitstream/handle/1956/9721/1-s2.0-S1571066110001179-main.pdf?sequence=1][2010 article pdf]]

- why not PEG parsing

  - http://jeffreykegler.github.io/Ocean-of-Awareness-blog/individual/2015/03/peg.html

- answer set programming

  - [[http://cs.aalto.fi/en/current/news/2018-07-18/][News: Speed up solving complex problems: be lazy and only work crucial tasks - Aalto University]]

    - 2018, article, "Exploiting Justifications for Lazy Grounding of Answer Set Programs", [[https://www.ijcai.org/proceedings/2018/0240.pdf][pdf]]

- [[https://brianmckenna.org/blog/idris_library][Idris as a Library - BAM Weblog]]

  - Idris as compiler backend

- Prolog ontology?

  - What is the relationship between Prolog, logic programming, ontology, and relational databases?

    - [[https://stackoverflow.com/questions/29062541/what-are-ontology-can-do-but-relational-database-can-not][What are ontology can do, but relational database can not? - Stack Overflow]]

      - [[https://www.slideshare.net/UscholdM/ontologies-and-db-schema-whats-the-difference][Ontologies and DB Schema: What's the Difference?]]
      - 2011, article, "Ontologies versus relational databases: Are they so different? A comparison", [[https://www.researchgate.net/publication/251332115_Ontologies_versus_relational_databases_Are_they_so_different_A_comparison][pdf available]]
      - 2010, article, "Mapping between Relational Databases and OWL Ontologies: an example", [[https://www.lu.lv/materiali/apgads/raksti/756_pp_99-117.pdf][pdf]]

  - [[http://sujitpal.blogspot.com/2009/06/ontology-rules-with-prolog.html][Salmon Run: Ontology Rules with Prolog]]
  - [[http://www.swi-prolog.org/web/][SWI-Prolog for the (semantic) web]]

- [[https://pchiusano.github.io/2017-01-20/why-not-haskell.html][Paul Chiusano: If Haskell is so great, why hasn't it taken over the world? And the curious case of Go.]]

  - Unison programming language

- Elixir has gradual static typing via Erlang Dialyzer.

  - [[https://elixir-lang.org/getting-started/typespecs-and-behaviours.html][Typespecs and behaviours - Elixir]]
  - [Understanding Elixir Types - via @codeship](https://blog.codeship.com/understanding-elixir-types/)

    - "Elixir functions are set up so that they can transparently be called across processes, heaps, or even machines in a cluster."
    - Can BEAM/Erlang/Elixir do live process migration?

  - The catch?

    - [[https://elixirforum.com/t/typed-elixir/1388][Typed Elixir - Elixir Chat - Elixir Forum]]

      - Is Dialyzer slow?

        - "My motivation for this is 95% of my bugs in Elixir/Erlang are due to using types wrong, like I may slightly change a tuple format somewhere but do not update it elsewhere and dialyzer does not catch it because the prior library state was in its cache that I then need to rebuild, in addition to dialyzer can take a long time to run."

- John Hughes, "Deriving combinator implementations", lecture 4, "Designing and using combinators" http://www.cse.chalmers.se/~rjmh/Combinators/DerivingCombinators/sld001.htm
- http://matt.might.net/articles/best-programming-languages/
- http://matt.might.net/articles/compiling-to-java/
- other programming languages

  - https://en.wikipedia.org/wiki/Curry_(programming_language)
  - http://fsl.cs.illinois.edu/images/5/5e/Cayenne.pdf

- [[https://github.com/edom/work/blob/master/meta/doc/extension.md][Extension programming language?]]
- https://en.wikipedia.org/wiki/Higher-order_abstract_syntax
- http://www.stephendiehl.com/posts/haskell_2017.html
- Haskell library: yaml vs HsYaml

  - https://twitter.com/hvrgnu/status/1004136566984503297

    - HsYaml is pure Haskell (doesn't use external libraries)

- [[https://www.cl.cam.ac.uk/~jrh13/slides/manchester-12sep01/slides.pdf][LCF key ideas]]
- closed source?

  - given SQL database, generate HTML user interface http://datanovata.com/

- http://libcello.org
- C HTTP server library?

  - https://kore.io
  - http://facil.io

- Possible user questions

  - How do I write software with this?
  - What are the important types?

- Don't format source code manually.

  - https://github.com/google/google-java-format

- related software

  - refactoring tools

    - https://github.com/RefactoringTools/HaRe
    - https://hackage.haskell.org/package/haskell-tools-refactor

  - parsing without symbol solving

    - Haskell and GHC extensions

      - http://hackage.haskell.org/package/haskell-src-exts

    - Haskell 98 only

      - https://hackage.haskell.org/package/haskell-src

    - Java

      - http://hackage.haskell.org/package/language-java

  - unknown

    - http://hackage.haskell.org/package/haskell-tools-ast

  - multi-database/cross-database query

    - http://www.unityjdbc.com/doc/multiple/multiplequery.php
    - https://www.red-gate.com/simple-talk/dotnet/net-tools/a-unified-approach-to-multi-database-query-templates/

  - similar systems

    - ERP libraries?

      - Meta is similar to Apache Ofbiz.

        - Some differences:

          - To define entities, Meta uses Haskell, Ofbiz uses XML.
          - Meta is written in Haskell, Ofbiz is written in Java.

        - https://cwiki.apache.org/confluence/display/OFBIZ/OFBiz+Tutorial+-+A+Beginners+Development+Guide

    - Web frameworks? Scaffolders?

      - Meta is similar to Laravel.

        - https://www.quora.com/Is-Laravel-a-good-framewok-really

      - Meta is similar to Ruby on Rails.

    - PhD theses

      - [[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.422.5683&rep=rep1&type=pdf]["Programming Language Features for Web Application Development", Ezra Cooper]]

        - "Links" programming language

- For JDBC URL see

  - https://jdbc.postgresql.org/documentation/80/connect.html

- similar

  - https://medium.com/airbnb-engineering/react-native-at-airbnb-f95aa460be1c

- some requirement?

  - https://en.wikipedia.org/wiki/Multitenancy

- Name?

  - HUMPS Haskell Universal Meta Programming System ?
  - Hemps: Haskell Meta Programming System
  - EAG: Enterprise Application Generator
  - HAG: Haskell Application Generator

- https://en.wikipedia.org/wiki/Language-independent_specification
- http://referaat.cs.utwente.nl/conference/12/paper/7000/expressing-ontologies-using-a-functional-language.pdf

  - "there are some proposals for implementing subtyping [in Haskell] [11, 12]"
  - open ADT makes exhaustive case impossible

- sublanguages?

  - Ontology definition language
  - Data definition language
  - Web application description language

    - View description language

- software design

  - functional programming software design

    - designing combinators

      - Hughes 1995 doc [[http://belle.sourceforge.net/doc/hughes95design.pdf][The design of a pretty-printing library]]

- [[http://lambda-the-ultimate.org/node/5292][LTU:progress on gradual typing]]
- [[https://en.wikipedia.org/wiki/%CE%9BProlog][WP:lambda-prolog]]
- Should we use Haskell or TypeScript for this project? Both? Neither?

  - Killer features

    - IDE: TypeScript wins (VS Code).
    - custom infix operators: Haskell wins.

      - We can go even wilder with Agda, Coq, Idris, Lean, etc.

    - untagged unions: TypeScript wins.
    - software diversity: TypeScript wins.

      - TypeScript works with nodejs and npm. Boatloads of software.
      - I think TypeScript has more developers.

    - laziness

      - Haskell wins.

  - Both have

    - ADTs.

** Writing an enterprise application in Java is like teaching graduate physics using only the 100 most common English words.
** The relationship between programming and past self
The key to being a good programmer is being someone that your future self can trust.

When we change a program, we are trusting our past self.
** The context of "Premature optimization"
http://wiki.c2.com/?PrematureOptimization

Knuth was telling us to focus on what matters.

The catchy maxim "premature optimization is the root of all evil" is at risk of being taken out of context.

(Straw-man) example where "optimizing" is stupid:
You're building a small to-do list app, and you do it in C, and you use GOTO statements.

Example where not "optimizing" is stupid:
You're building a electronic fuel injection system,
and you don't know anything about jitter, latency, and real-time systems.
Controlling latency here is a requirement, not an optimization.
** Haskell strictness checker
- 2018 "Keep your laziness in check" https://dl.acm.org/citation.cfm?doid=3243631.3236797
  - "We introduce StrictCheck: a property-based random testing framework for observing, specifying, and testing the strictness of Haskell functions."
** <2018-09-12> question for Abdullah
Do you know of anything that computes (generates code for) the products/sums of data-types?
Do you know of any libraries that enable us to describe how to transform a data type to a related data type?
Do you know of anything resembling template metaprogramming for Haskell that is not Template Haskell?
For example:

#+BEGIN_EXAMPLE
    data A = A1 | A2
    data B = B1 | B2

    -- <input>
    generate data P = A * B
    generate data S = A + B
    -- </input>

    -- <output>
    data P  = P_A1_B1
            | P_A1_B2
            | P_A2_B1
            | P_A2_B2

    data S  = S_A1 | S_A2
            | S_B1 | S_B2
    -- </output>
#+END_EXAMPLE
** <2017-09-04> Scheme currying
  :PROPERTIES:
  :CUSTOM_ID: scheme-currying
  :END:

*** Abstract
   :PROPERTIES:
   :CUSTOM_ID: abstract
   :END:

We define the macros =lambda/c=, =apply/c=, and =define/c=,
which are curried analogs of =lambda=, =apply=, and =define=, respectively.
This way is simple,
but it uses macros
and it is limited to fixed-arity lambda expressions.

*** The idea
   :PROPERTIES:
   :CUSTOM_ID: the-idea
   :END:

The idea of =lambda/c= is this pattern:

#+BEGIN_EXAMPLE
    (lambda/c (a) z) => (lambda (a) z)
    (lambda/c (a b) z) => (lambda (a) (lambda (b) z))
    (lambda/c (a b c) z) => (lambda (a) (lambda (b) (lambda (c) z)))
    ...
#+END_EXAMPLE

The idea of =apply/c= is this pattern:

#+BEGIN_EXAMPLE
    (apply/c a b) => (a b)
    (apply/c a b c) => ((a b) c)
    (apply/c a b c d) => (((a b) c) d)
    ...
#+END_EXAMPLE

However, there is a difference:
=apply= is an arity-2 procedure taking a procedure and a list,
whereas =apply/c= is a macro that takes one or more arguments.

The idea of =define/c= is this parallel:

#+BEGIN_EXAMPLE
    (define (a b ... y) z) = (define a (lambda (b ... y) z))
    (define/c (a b ... y) z) = (define a (lambda/c (b ... y) z))
#+END_EXAMPLE

*** The code
   :PROPERTIES:
   :CUSTOM_ID: the-code
   :END:

I tried this code on Guile 2.0.9 on Ubuntu 14.04.

#+BEGIN_EXAMPLE
    (define-syntax lambda/c
        (syntax-rules ()
            (
                (_ (x) body ...)
                (lambda (x) body ...)
            )
            (
                (_ (x y ...) body ...)
                (lambda (x) (lambda/c (y ...) body ...))
            )
        )
    )

    (define-syntax apply/c
        (syntax-rules ()
            (
                (_ f)
                (f)
            )
            (
                (_ f x)
                (f x)
            )
            (
                (_ f x y ...)
                (apply/c (f x) y ...)
            )
        )
    )

    (define-syntax define/c
        (syntax-rules ()
            (
                (_ (f) body ...)
                (define f (lambda () body ...))
            )
            (
                (_ (f x ...) body ...)
                (define f (lambda/c (x ...) body ...))
            )
        )
    )
#+END_EXAMPLE

*** Example
   :PROPERTIES:
   :CUSTOM_ID: example
   :END:

After the above macros have been defined
(by copying them to your REPL, for example),
the following fragment should print three threes.

#+BEGIN_EXAMPLE
    (define f (lambda/c (x y) (+ x y)))
    (define g (lambda (x) (lambda (y) (+ x y))))
    (define/c (h x y) (+ x y))
    (apply/c f 1 2)
    (apply/c g 1 2)
    (apply/c h 1 2)
#+END_EXAMPLE
** <2018-04-07> Approximating general recursion in TFP
  :PROPERTIES:
  :CUSTOM_ID: approximating-general-recursion-in-tfp
  :END:

Here we are going to show how to approximate general recursive functions in TFP
with the help of the following =repeat= and =approx=:

#+BEGIN_SRC haskell
    -- The expression `repeat n f x` means
    -- `n` times of the application of `f` to `x`.
    repeat : Nat -> (a -> a) -> a -> a
    repeat 0 f = id
    repeat (n+1) f = repeat n f . f

    approx
        : Nat -- count
        -> (a -> s) -- begin
        -> (s -> s) -- step
        -> (s -> Maybe b) -- end
        -> (a -> Maybe b)

    approx count begin step end =
        end . repeat count step . begin
#+END_SRC

To approximate a general recursive function =f : a -> b=,
we write a data type =S_f= and these three non-recursive total functions:

#+BEGIN_SRC haskell
    begin_f : a -> S_f
    step_f : S_f -> S_f
    end_f : S_f -> Maybe b

    -- A side note:
    -- In PFP, the original `f` can be
    -- recovered from those three functions:
    f input = loop (begin_f input)
        where
            loop s = case end_f s of
                Just output -> output
                _ -> loop (step_f s)
#+END_SRC

Then, we can approximate =f= as =f_approx=:

#+BEGIN_SRC haskell
    f_approx : Nat -> (a -> Maybe b)
    f_approx count =
        approx count begin_f step_f end_f
#+END_SRC

The =count= parameter can be thought as a time limit or time-out,
the number of iterations,
the number of steps.

Here is an example approximation of the factorial function.

#+BEGIN_SRC haskell
    fac 0 = 1
    fac n = n * fac (n-1)

    data State = Mk { n : Nat, a : Nat }

    fac_approx count =
        end . repeat count step . begin
        where
            begin : Nat -> State
            begin n = Mk n 1

            end : State -> Maybe Nat
            end (Mk 0 a) = Just a
            end _ = Nothing

            step : State -> State
            step (Mk 0 a) = Mk 0 a
            step (Mk (n+1) a) = Mk n (a * (n+1))
#+END_SRC

Here is an example approximation of bottom.

#+BEGIN_SRC haskell
    -- PFP

    hang : a
    hang = hang

    -- TFP approximation

    data State = Mk

    hang_begin _ = Mk
    hang_step s = s
    hang_end _ = Nothing

    hang_approx count =
        hang_end . repeat count hang_step . hang_begin
#+END_SRC

I conjecture that there is an algorithm that can transform every general recursive function into its begin-step-end form.
** Making a Java virtual machine
  :PROPERTIES:
  :CUSTOM_ID: making-a-java-virtual-machine
  :END:

- https://en.wikipedia.org/wiki/Java_Class_Library
- https://en.wikipedia.org/wiki/Java_Native_Interface

  - https://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/functions.html

** Unsorted things from softeng.md
*** Readings?
- 2018, book, "The essence of software engineering", [[https://link.springer.com/book/10.1007/978-3-319-73897-0][description]], [[https://link.springer.com/content/pdf/10.1007%2F978-3-319-73897-0.pdf][pdf]]
  - chapter "Escaping Method Prison -- On the Road to Real Software Engineering"
    - some history of software engineering; method wars;
    - some retrospective
    - [[https://semat.org/][SEMAT (Software Engineering Method And Theory)]]
- [[http://www.icse-conferences.org/mostinfluential.html][ICSE (International Conference on Software Engineering) most influential articles]]
  - "ICSE is the flagship conference of [software engineering] [...]." ([[http://www.gousios.org/blog/Report-from-ICSE-2017.html][Georgios Gousios]])
    - 2008, article, "Debugging Reinvented: Asking and Answering Why and Why Not Questions About Program Behavior ICSE-30"
      - https://www.cs.cmu.edu/~NatProg/whyline.html
      - https://github.com/andyjko/whyline
    - 2012, slides, "Connecting Software Architecture to Implementation: The Next 10 Years", [[http://www.cs.cmu.edu/~aldrich/presentations/aldrich-icse-mip-2012.pdf][pdf]]
      - 2002, article, "ArchJava: Connecting Software Architecture to Implementation", [[https://www.ics.uci.edu/~andre/informatics223s2009/aldrichchambersnotkin.pdf][pdf]]
    - 1997, article, "Software processes are software too, revisited", [[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.148.7620&rep=rep1&type=pdf][pdf]]
      - 1987, article, "Software processes are software too", [[http://laser.cs.umass.edu/techreports/1987-LJO.pdf][pdf]]
- 2018, slides, "What would a science of software engineering look like?", [[http://herbsleb.org/web-pres/slides/crowd-chase-2018-final-dist.pdf][pdf]]
- Meilir Page Jones, "What every programmer should know about object-oriented design"
*** Old pages
- Things we use, tools and services
  - vim, text editor
  - Management
  - Other opinions
    - .NET stack
      - http://engineering.gopangea.com/stack
      - http://engineering.gopangea.com/2015/12/10/why-dot-net.html
*** Undigested
- What is a database that can be scaled up without downtime?
  We are willing to sacrifice consistency for tracking data.
- Are we really doing Scrum? http://www.allaboutagile.com/the-scrumbutt-test/
- BPMN tool: camunda editor (bpmn.io).
- The nature of enterprise application is low-sophistication high-plumbing, so we need to make plumbing easy.
  All our programs read data, do something what that data, and write data.
  The most important things are the data and the business logic.
- How to group code? By feature? By dependency? By author?
  - https://en.wikipedia.org/wiki/Feature-driven_development#Build_by_feature
    - "Any function that is too complex to be implemented within two weeks is
      further decomposed into smaller functions until each sub-problem is small enough to be called a feature."
- Grails vs Spring MVC vs Play Framework?
- distributed systems
  - [[https://martinfowler.com/bliki/FirstLaw.html][Martin Fowler's First Law of Distributed Object Design]]: "Don't distribute your objects."
  - http://www.drdobbs.com/errant-architectures/184414966
- Eta is GHC ported to JVM.
  - 2017-01-13: Haskell (~ GHC 7.10.3) on JVM: http://eta-lang.org/docs/html/
- https://blog.codinghorror.com/discipline-makes-strong-developers/
  - Good code is more because of programmer discipline than because of the framework or language.
- Emphasize maintainability, readability, understandability, changeability?
- React reinvents Windows 1.0 (1985) https://bitquabit.com/post/the-more-things-change/
- Ramble
  - Writing software?
    - Minimize build time.
    - Minimize the time from program startup to program ready.
      Otherwise you won't test the program.
    - Understand which parts of the code have more risk.
      Risk is caused by something you don't understand. (Warren Buffett)
    - Minimize the way things can go wrong.
      If you make a variable immutable,
      there are less ways it can go wrong. (?)
    - Explicit is better than implicit?
      Prefer writing boilerplates to magical reflection stuff.
      Let the compiler help you.
      Let compilation error guide refactoring.
    - Minimize duplication?
      Minimize duplication of constants, literals, fragments?
    - Data is more important than code?
      The shape of the data is important?
    - Make every part understandable in isolation?
    - Avoid nulls? If you must use null, document it.
- 2018-05-30
  - Enterprise application stack?
    - Java 8
    - Jetty 9.4 (Servlet API 3.1.0)
    - JPA API 1.0.2 (annotations only)
    - J2HTML
    - PostgreSQL 9.5
    - J2HTML-like for C#
      - https://github.com/HtmlTags/htmltags
    - Java: Install OpenJDK 8, install IntelliJ IDEA, you're all set.
      - IntelliJ IDEA comes with Maven.
    - .NET: Install Mono, install Monodevelop 5.
      - Monodevelop 5 comes with Nuget.
    - Database should be a library, not a stand-alone server.
- software legality?
  - Harmony CLA (Contributor License Agreement)?
- What cause software errors?
  - Programming error: what the programmers think are not what they write.
    Difference between their thought and the computer's actual rules.
    Silent wrong assumption.
  - Contributing factors: bad languages, bad tools.
    - Bad languages make writing correct programs difficult.
  - Errors outside programmer control: cosmic rays, hardware problems
- What is software engineering?
  - Engineering is the application of science.
  - Civil engineering is the application of natural science.
  - Software engineering is the application of computer science.
  - What is science?
    - Science is the application of the scientific method.
    - Science is a mixture of philosophy, mathematics, and experiments.
  - What is software?
    - chapter, "What is software?: The role of empirical methods in answering the question", [[https://link.springer.com/chapter/10.1007/978-3-319-73897-0_4][description]], [[https://link.springer.com/content/pdf/10.1007%2F978-3-319-73897-0_4.pdf][pdf]]
      - "Legislation is (like?) software development."
      - "[Cooking] Recipes are software."
    - The ideal software is easy to change but doesn't change.
      The ideal software captures the essence of the problem.
      The essence of a problem is mathematical definitions.
      Mathematical definitions aren't supposed to change.
    - Software is a model of reality.
    - Software is law?
      Law is software?
      - Similarity between software and law
        - Bad software and bad law both result in unnecessarily slow system.
        - Both are based on logic.
        - Both have an ontology.
        - The law of a country is a big (possibly inconsistent) logic program.
          - The law in writing vs the law in practice
            - I think it is too much for anyone to know all laws that are in effect in a country.
      - Difference between software and law
        - A judge cares about both the letter of the law and the spirit of the law.
        - A computer cares only about the letter of the software.
          There is no such thing as the spirit of the software.
          - A computer does what we write, not what we mean.
            - The programmer follows the computer's rules. Not the other way around.
        - [[https://en.wikipedia.org/wiki/Letter_and_spirit_of_the_law][WP:Letter and spirit of the law]]
    - Software is executable theory of nature.
    - Software is like physics but executable.
    - https://queue.acm.org/detail.cfm?id=2693160
    - https://www.cs.umn.edu/research/research_areas/software-engineering-and-programming-languages
      - "Software is a solution to a computational problem using a formal programming language."
- 2010, article, "We show how symbolic execution and Satisfiability Modulo Theories (SMT) solvers can be gainfully employed to greatly automate software debugging of evolving programs.", [[https://www.sciencedirect.com/science/article/pii/S1571066110001246][downloadable as pdf]]
  - confusing title: "Debugging as a Science, that too, when your Program is Changing"
- Distilling the best practices and standardizing the tools and processes
  - API (application programming interface) information systems, REST clients, REST API debuggers
    - https://insomnia.rest/
      - source code https://github.com/getinsomnia/insomnia
    - https://www.getpostman.com/
      - not open source https://stackoverflow.com/questions/43380313/postman-main-source-code-repository
  - JOOQ
  - https://zachholman.com/posts/deploying-software
  - IDE (integrated development environment)
    - How do we make an IDE?
      Can we generate an IDE from grammar?
  - How do we put academic research into practice?
    - 1995, article, "Deriving specifications from requirements: an example", [[https://dl.acm.org/citation.cfm?id=225016][paywall]]
    - 1998, article, "Architecture-based runtime software evolution", [[https://dl.acm.org/citation.cfm?id=302181][paywall]]
    - 2000, article, "Bandera: extracting finite-state models from Java source code", [[https://dl.acm.org/citation.cfm?id=337234][paywall]]
      - Is this related with C#'s async-await?
  - metaprogramming
    - "Spoon is a library to analyze, transform, rewrite, transpile Java source code (incl Java 9 & Java 10)." [[https://github.com/INRIA/spoon][source]]
- unread
  - long text: [[http://organizationalphysics.com/2016/10/13/top-down-vs-bottom-up-hierarchy-or-how-to-build-a-self-managed-organization/][Top-down vs. Bottom-up Hierarchy: Or, How to Design a Self-Managed Organization]]
- 2014, article, "Bidirectionally tolerating inconsistency: partial transformations", [[http://groups.inf.ed.ac.uk/bx/fase14.pdf][pdf]]
  - 1990, article, "Tolerating inconsistency", Robert Balzer, [[http://gssi.det.uvigo.es/users/jgd/public_html/doctorado_01-02/p158-balzer.pdf][pdf]]
- Don't use GitFlow.
  Use continuous integration and continuous deployment instead.
  - The =master= branch always builds, always runs, and is always releasable.
  - Everything goes to =master=. Sketches, hotfixes, everything.
  - Avoid non-master long-lived branches.
  - It is OK to introduce half-baked code into =master= as long as it doesn't introduce errors.
    - Use feature switch/toggle.
      - Just because code is in =master= doesn't mean it will be run on production.
    - Work-in-progress doesn't have to be full of errors.
  - Discipline yourself to make small commits and avoid big merges.
  - Discipline yourself to make backward-compatible changes, and deprecate things slowly.
    - Give your users time to migrate.
    - If your changes are always backward-compatible, you will never break someone else's code.
  - You can rebase/tidy up commits that you haven't pushed.
  - Merges and rebases produce the same working tree but have different uses.
    - The computer doesn't care whether you merge or rebase.
    - Merges and rebases exist for the humans.
  - 2017, article, [[https://www.gamasutra.com/blogs/NiklasGray/20170927/306445/Moving_away_from_GitFlow.php][Moving away from GitFlow]]
- Comparing build systems?
  - Haskell Shake
  - F# FAKE
  - Apache Buildr
- Does putting on a headphone enhance your focus, even if it isn't playing any sound?
  - How about putting a motorcycle helmet?
- 1999, article, "How enterprises use functional languages, and why they don't", Philip Wadler, [[http://homepages.inf.ed.ac.uk/wadler/papers/how-and-why/how-and-why.pdf][pdf]]
- Optimizing enterprise application development
  - Low-code application development
    - G Suite low-code https://developers.google.com/appmaker/
    - competitor https://www.outsystems.com/platform/#low-code
      - "OutSystems is an open, standards-based platform with no lock-in, no proprietary data models, or proprietary run-time"
- software engineering research, advances in software engineering
  - http://www.sigsoft.org/events.html
  - http://homepage.divms.uiowa.edu/~slonnegr/plf/Book/Chapter7.pdf
- https://blog.codinghorror.com/why-cant-database-tables-index-themselves/
- 2015, PhD thesis, Bergersen, "Measuring Programming Skill: Construction and Validation of an Instrument for Evaluating Java Developers"
  - [[http://folk.uio.no/gunnab/publications/Bergersen2015_PhD_thesis.pdf][pdf]]
  - It's a collection of 4 articles.
  - https://www.duo.uio.no/handle/10852/48583
- 2005, article, "Practical Ontology Systems for Enterprise Application", [[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.622.6490&rep=rep1&type=pdf][pdf]]
- 2006, article, "Applications of Ontologies in Software Engineering", [[https://km.aifb.kit.edu/ws/swese2006/final/happel_full.pdf][pdf]]
- dependency management
  - npm dependency hell, how npm2 works, how npm3 works
    - http://npm.github.io/how-npm-works-docs/theory-and-design/dependency-hell.html
- How do we develop enterprise software with less effort?
  - CRUD should be generated.
    - https://news.ycombinator.com/item?id=15429616
    - http://isis.apache.org/
    - other tools?
  - feature-oriented software development
    - https://en.wikipedia.org/wiki/FOSD_program_cubes
** What is the difference between the $10,000 Indonesian-citizen programmer and the $100,000 American-citizen programmer?
Is it location?
Will a $10,000 Indonesian-citizen programmer suddenly become a $100,000 Indonesian-citizen programmer just by moving to America?
Are American companies simply able/willing to pay more?

Is it skill/ability?
Is the $100,000 American-citizen programmer more capable than the $10,000 Indonesian-citizen programmer?

Inconclusive discussion https://marginalrevolution.com/marginalrevolution/2012/01/why-are-some-programmers-paid-more-than-others.html
** Machine-learning database indexing; an index is a model of the data
http://deliprao.com/archives/262

https://arxiv.org/abs/1712.01208
* Maintaining software
** Backward-compatibility complicates development but simplifies maintenance
*** If you maintain your library's backward-compatibility, you only need to maintain the latest version of the library.
*** Compatibility reduces dependency hell and bit rot.
*** The root cause of dependency hell / DLL hell / JAR hell is incompetent library developers who don't care about compatibility.
*** Defining interfaces and backward-compatibility
An interface is something that users depend on.

Your library's interface is what breaks your users' code if that interface changes.

Examples of interface:

- Function parameters.
- Performance.
  Example: Replacing an algorithm with a slower one may stop your users from satisfying their non-functional requirements.

A backward-compatible change is a change that doesn't annoy the people who depend on you.
Such change doesn't require those people to react.
Such change doesn't break those people's works.
**** Backward-compatibility obviates backporting.
*** But backward-compatibility hampers changing the interface (including fixing interface mistakes).
**** But you can always introduce a new interface and deprecate the old one.
***** But you will then collect junk.
*** The key of library-writing is empathy.
   :PROPERTIES:
   :CUSTOM_ID: the-key-of-library-writing-is-empathy.
   :END:

Think about your users.
Don't break their stuffs.

See [[https://wiki.haskell.org/The_Monad.Reader/Issue2/EternalCompatibilityInTheory][Eternal compatibility in theory]].

Making only backward-compatible changes simplifies the lives of people who depend on you.

Library authors must maintain some backward compatibility.
They can't just make arbitrary changes and break things.

- https://plan99.net/~mike/writing-shared-libraries.html

*** Choosing a versioning policy
   :PROPERTIES:
   :CUSTOM_ID: choosing-a-versioning-policy
   :END:

Use what everybody else is already using in your ecosystem:
[[https://github.com/dhall-lang/dhall-lang/blob/master/VERSIONING.md][Dhall versioning policy]],
[[https://pvp.haskell.org/][Haskell PVP Specification]],
[[https://semver.org/][Semantic Versioning]],
etc.

If everybody followed eternal compatibility, versioning policies would be irrelevant and upgrades would be smoother.

*** Following Haskell package versioning policy
   :PROPERTIES:
   :CUSTOM_ID: following-haskell-package-versioning-policy
   :END:

- [[https://gist.github.com/snoyberg/f6f10cdbea4b9e22d1b83e490ec59a10][Michael Snoyman's personal take on PVP version upper bounds]].
- The alternative to Cabal PVP is compile error, or, even worse, logic error and runtime failure?

  - Cabal PVP depends on library authors/maintainers to test and update their dependency bounds.

*** Backward-compatibility hall of fame
   :PROPERTIES:
   :CUSTOM_ID: backward-compatibility-hall-of-fame
   :END:

These systems may be too backward-compatible.

2018-09-01: [[https://www.ibm.com/support/knowledgecenter/en/linuxonibm/liaag/wkvm/wkvm_c_overview.htm][IBM Z mainframes]].
The page says that the 2018 system is mostly backwards-compatible to the 1964 system.

- 2014: [[http://www.longpelaexpertise.com.au/ezine/IBMBackwardCompatibility.php][Are IBM Mainframes Really Backward Compatible? - LongEx Mainframe Quarterly]]

Windows 95: [[https://news.ycombinator.com/item?id=2281932][Much more than you would ever know.. The original version of Sim City was writt... | Hacker News]]
*** Respect legacy code because it works, but don't get too attached to anything.
It may be ugly, but /it works/.
- Is the code really ugly?
  - Are you refusing to read it because it doesn't fit your taste?
    Indent size?
    Snake case vs camel case?
    - Is the code truly unreadable, or are you just an asshole?
      - How hard have you tried?
** Forward-compatibility?
** Logging
- Before logging something, think how it would be read.
- If you can't read the log, you shouldn't write the log.
- Only log important things.
  Keep logging volume low.
  Minimize retention; only retain important logs.
  Don't retain debugging logs.
- Storage is cheap. Rotate your logs and buy more storage.
- If you're looking for things to do, maybe you can try using Amazon SDK
  and log your events to CloudWatch or CloudTrail (or perhaps even SNS).
  Treat a log as an event stream, not a file.
- http://jasonwilder.com/blog/2013/07/16/centralized-logging-architecture/
- http://jasonwilder.com/blog/2012/01/03/centralized-logging/
** Maintainability
- 2017-05-20
  - What helps writing maintainable software?
    - Minimize duplication? The programming language limits deduplication?
    - Facilitate change, minimize ripple due to change
    - Flexibility of a component is proportional to its risk of changing?
** How do you know a software is maintainable?
- Change all the programmers.
  If the new programmers can handle it,
  it's maintainable.
- The only way to ensure software maintainability is periodic rotation of programmers?
  - Yegor agrees: we should rotate programmers, no less frequent than every year, for software maintainability
    https://www.yegor256.com/2015/12/29/turnover-is-good-for-maintainability.html
* Functional programming research
  :PROPERTIES:
  :CUSTOM_ID: functional-programming-research
  :END:

- Abbreviations

  - CPS: continuation-passing style
  - FP: functional programming
  - OS: operating system
  - PFP: partial functional programming
  - TFP: total functional programming
  - TFPL: total functional programming language
  - TM: Turing machine

** Research questions
   :PROPERTIES:
   :CUSTOM_ID: research-questions
   :END:

** Monads, lazy, strict
   :PROPERTIES:
   :CUSTOM_ID: monads-lazy-strict
   :END:

- Can you sell me some TFP?

  - What is TFP?

    - TFP is functional programming with only total functions.

      - A function is total iff it is defined for every element of its domain.

    - TFP ensures that every function is total by constraining every recursion to be structural recursion.

      - Structural recursion is recursion with the constraint that every recursive call is syntactically smaller.

  - Why TFP?

    - The practical advantage of TFP is that it is easier
      (and therefore faster and less costly)
      to write provably correct programs in TFP
      compared to PFP or imperative programming.

      - This ultimately translates to faster time-to-market,
        lower development cost, fewer errors, fewer customer complaints, and higher customer satisfaction.
        (I know this sounds like bullshit. We should not underestimate the ways that humans can screw up.)

    - The theoretical advantage of TFP
      is that TFP has simpler denotational semantics compared to PFP
      because TFP has less bottoms to consider. [Turner2004]

  - Why not TFP?

    - A disadvantage of TFP is that it is not Turing-complete because all programs must terminate,
      but OSes don't terminate,
      but we can still write an OS in a TFPL using codata and corecursion [Turner2004]
      which are discussed in another section in this document.

** Ramble
  :PROPERTIES:
  :CUSTOM_ID: ramble
  :END:

*You should not read anything below this point.*
These are the drafts of my drafts.
I think they should be included in this page,
but I haven't worked them enough.

- Why did Simon Peyton-Jones write that the next Haskell will be strict?

  - [[http://www.cs.nott.ac.uk/~gmh/appsem-slides/peytonjones.ppt][Simon Peyton-Jones PPT slides]].
  - [[https://news.ycombinator.com/item?id=1924061][ycombinator comment thread]].

This is a questionnaire, not survey article:
A preliminary survey of functional programming
Caitlin Sadowski
Daan Leijen
https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/paper-67.pdf

- How do these differ: Agda, Coq, Lean, Isabelle, ACL2, and others?

  - [[https://www.reddit.com/r/haskell/comments/3b498l/if_you_could_change_one_thing_about_haskell_what/csk2gvl/][Conor McBride's tangential opinions]]
    on Coq vs Agda vs others
  - [[http://wiki.portal.chalmers.se/agda/pmwiki.php?n=Main.AgdaVsCoq][Agda Wiki: Agda vs Coq]]
  - [[https://www.reddit.com/r/haskell/comments/30j9l6/lean_the_new_open_source_theorem_prover_developed/][/r/haskell: Lean: the new open source theorem prover developed at Microsoft Research]]

*** Lambda calculus
   :PROPERTIES:
   :CUSTOM_ID: lambda-calculus
   :END:

- History

  - Alonzo Church introduced lambda calculus in 1932 in [Church1932].
  - Notations have changed.
    Church wrote $S_y^x U$ but we write $U[x := y]$ for the same thing:
    the expression $U$ but with every occurrence of free variable $x$ replaced by expression $y$.
  - [Church1932] credits a 1924 publication of Moses Schönfinkel for what we call /currying/:
    changing a multi-parameter function to a one-parameter function
    returning another one-parameter function returning yet another one-parameter function, and so on.
    Currying is changing $f : (a,b) \to c$ to $f' : a \to (b \to c)$ such that $f(x,y) = (f'(x))(y)$.

- See also [[https://en.wikipedia.org/wiki/Lambda_calculus][Wikipedia: Lambda calculus]].

**** might be too old
    :PROPERTIES:
    :CUSTOM_ID: might-be-too-old
    :END:

- [Lof1984]
- 1986 A survey of functional programming language principles https://ntrs.nasa.gov/archive/nasa/casi.ntrs.nasa.gov/19870002073.pdf

*** Codata, corecursion, and coinduction
   :PROPERTIES:
   :CUSTOM_ID: codata-corecursion-and-coinduction
   :END:

For more about codata, corecursion, and coinduction, see: - [[http://www.cl.cam.ac.uk/archive/mjcg/plans/Coinduction.html]["Corecursion and coinduction: what they are and how they relate to recursion and induction", Mike Gordon]]:
"My goal here is to try to understand these things through the activity of creating a simple explanation." - [[http://blog.sigfpe.com/2007/07/data-and-codata.html]["Data and Codata", Dan Piponi]]:
"The program might not terminate, but from a mathematical perspective this is a completely well defined function."
"Note the duality: in structural recursion we 'deconstruct' the argument and then we're allowed to recurse. In guarded recursion we recurse first, and then we're allowed to use the constructor." - [[https://www.tac-tics.net/blog/data-vs-codata]["Data vs Codata", Michael Maloney]]

*** Miscellany
   :PROPERTIES:
   :CUSTOM_ID: miscellany
   :END:

[Turner2004] calls TFP "strong functional programming".

*** Lazy, strict
   :PROPERTIES:
   :CUSTOM_ID: lazy-strict
   :END:

- The Church-Rosser property
  ([[https://en.wikipedia.org/wiki/Church%E2%80%93Rosser_theorem][Wikipedia]],
  [[http://mathworld.wolfram.com/Church-RosserProperty.html][Mathworld]]),
  eliminates the difference between strict and lazy in a TFPL [Turner2004].

*** Type theory is a formal system, not a branch of mathematics
   :PROPERTIES:
   :CUSTOM_ID: type-theory-is-a-formal-system-not-a-branch-of-mathematics
   :END:

There are at least two type theories:
the Martin-L"of type theory, and the calculus of constructions [Bove2001].
I thought "type theory" was a branch of mathematics,
like "category theory", "graph theory", and "number theory".

"Martin-L"of's type theory is basically a theory about sets in which it is possible to interpret a logic." [Nordstrom1988]

*** Recursion and fixpoint
   :PROPERTIES:
   :CUSTOM_ID: recursion-and-fixpoint
   :END:

We say that $x$ is a /fixpoint/ of $f$ iff $x = f(x)$.

A [[https://www.cs.cornell.edu/courses/cs3110/2013sp/supplemental/lectures/lec29-fixpoints/lec29.html][text lecture]]
describes how to obtain the factorial function as a fixed point of successive /approximations/.

[[https://en.wikipedia.org/wiki/Fixed-point_combinator][Wikipedia: Fixed-point combinator]].
A fixed-point combinator enables /anonymous/ recursive functions.

TFP rejects the definition =fix f = f (fix f)= because this is not a structural recursion.

Recursion is about fixpoint.

*** The Eff language and monad-aware languages
   :PROPERTIES:
   :CUSTOM_ID: the-eff-language-and-monad-aware-languages
   :END:

Consider this passage from [McBride2015]:

#+BEGIN_QUOTE
  [The Eff language lets] us write in direct
  style for whatever effectful interface is locally available, then obtain the computation
  delivered by the appropriate Moggi-style translation into an explicitly monadic
  kernel.
#+END_QUOTE

I think "in direct style"
means that in Eff we can write =f x= to mean what we would write as =x >>= f= in Haskell,
but with the Monad instance automatically inferred based on the locally available effects.

I think that passage suggests that the Eff language [Bauer2012]
is related to the "monad-aware language" that Abdullah is trying to accomplish.
The relation is that Eff infers the monad from the locally available effects.
However, Eff's type system ignores the effects (like ML's type system)
so this is probably not what Abdullah wants.

*** Reading triage
   :PROPERTIES:
   :CUSTOM_ID: reading-triage
   :END:

http://semantic-domain.blogspot.co.id/2016/03/agda-is-not-purely-functional-language.html

https://en.wikipedia.org/wiki/Category:Term-rewriting_programming_languages

In a term-rewriting language such as Pure, we can write program transformation as part of the program.
https://stackoverflow.com/questions/24330902/how-does-term-rewriting-based-evaluation-work

https://www.quora.com/What-are-examples-of-statically-typed-logic-programming-languages-ex-similar-to-Prolog

https://mathoverflow.net/questions/3920/what-does-it-mean-to-discharge-assumptions-or-premises

http://www.cs.nott.ac.uk/~pszvc/g54dtp/inductive_domain.v

https://stackoverflow.com/questions/145263/what-is-total-functional-programming

What is a computational effect?

Does totality really have anything to do with termination?

*** TFP and Turing-completeness
   :PROPERTIES:
   :CUSTOM_ID: tfp-and-turing-completeness
   :END:

We must distinguish between a Turing machine and its execution.

A TM needs a tape to run, but does not come with it.
To run a TM, you have to supply a tape.

A /tape/ is a finite sequence of tape symbols.

A /step/ is a pair of configuration and tape.

A /run/ is a sequence of steps. This sequence may be infinite.

A /run/ of a Turing machine $m$ with initial tape $t$ is ...

Instead of thinking about infinitely long tape with infinitely many blank symbols,
we think that the tape is finite but the TM may at every step
insert, update, or delete a cell.

A TM is finite by definition: a TM is a tuple whose each component is taken from a finite set.
The description of a TM does not include the tape.
The execution trace of a TM may be infinite.
A TFPL can /describe/ every TM just fine.

We can describe a Turing machine in a TFPL?

https://www.reddit.com/r/programming/comments/jvu2w/total_functional_programming_and_the_unimportance/

[[http://lambda-the-ultimate.org/node/2003][LTU: Total functional programming]]

https://news.ycombinator.com/item?id=12646390

https://existentialtype.wordpress.com/2014/03/20/old-neglected-theorems-are-still-theorems/

https://math.stackexchange.com/questions/111773/are-total-recursive-functions-recursively-enumerable

How do we write this "echo" program in TFP? Is it even total?

#+BEGIN_SRC haskell
    main : IO ()
    main = getLine >>= putStrLn >> main
#+END_SRC

We can /describe/ the infinite list of natural numbers =[0,1,2,3,...]= in a TFP.

#+BEGIN_EXAMPLE
    f : Nat -> Nat
    f n = n + 1

    f : Nat -> Nat
    f n = n
#+END_EXAMPLE

[[https://arxiv.org/abs/1610.09254][Partiality, Revisited: The Partiality Monad as a Quotient Inductive-Inductive Type]]

http://www.cl.cam.ac.uk/archive/mjcg/plans/Coinduction.html

https://en.wikipedia.org/wiki/Natural_transformation

https://en.wikipedia.org/wiki/Initial_algebra
endofunctor, F-algebra, initial object

[[https://dtai.cs.kuleuven.be/problog/][probabilistic logic programming]]

*** Metaprogramming
   :PROPERTIES:
   :CUSTOM_ID: metaprogramming
   :END:

Spoofax vs Xtext vs MPS?
http://www.metaborg.org/en/latest/
http://www.metaborg.org/en/latest/source/overview/examples.html

PEG (parsing expression grammar)

http://ttic.uchicago.edu/~dmcallester/foundations.pdf
https://en.wikipedia.org/wiki/Foundations_of_mathematics
https://web.stanford.edu/class/cs103/notes/Mathematical%20Foundations%20of%20Computing.pdf
https://github.com/hoplon/javelin
https://codon.com/consider-static-typing

*** Structured editor
   :PROPERTIES:
   :CUSTOM_ID: structured-editor
   :END:

https://news.ycombinator.com/item?id=13773813

https://www.reddit.com/r/programming/comments/1tp83j/lamdu_structuralast_editor/

*** Others
   :PROPERTIES:
   :CUSTOM_ID: others
   :END:

[[https://tio.run/#agda][Compile and run Agda programs online]].

*** Positive and negative positions, strict positivity
   :PROPERTIES:
   :CUSTOM_ID: positive-and-negative-positions-strict-positivity
   :END:

In the function type $A \to B$,
we say that $A$ occurs in a /negative/ position
and $B$ occurs in a /positive/ position.
See [[https://cs.stackexchange.com/questions/42150/meaning-of-positive-position-and-negative-position-in-type-theory][CS StackExchange 42150]].

For the /strict positivity/ constraint of a data type definition, see these:
[[https://cs.stackexchange.com/questions/55646/strict-positivity][CS StackExchange 55646]],
[[http://wiki.portal.chalmers.se/agda/pmwiki.php?n=ReferenceManual.SimpleInductiveTypes?from=ReferenceManual.Datatypes#Strictpositivity][Agda Wiki: Strict positivity]].

In a TFPL, there is no expression whose type is =forall a. a=.

#+BEGIN_EXAMPLE
    exit : IO a
#+END_EXAMPLE

*** Rewriting systems
   :PROPERTIES:
   :CUSTOM_ID: rewriting-systems
   :END:

A TFPL program is a terminating ARS.
https://en.m.wikipedia.org/wiki/Termination_(term_rewriting)

[[https://softoption.us/content/node/37][SoftOption: normal forms and termination]]

[[https://softoption.us/content/node/654][SoftOption: lambda calculus and combinatory logic]]

There are at least two widely used confluent term-rewriting systems:

- applicative, lambda calculus, beta-reduction
- concatenative, postfix notation, PostScript, Forth

An expression is in normal form iff there is no applicable rewrite rule.
See [[https://en.wikipedia.org/wiki/Normal_form_(abstract_rewriting)][Wikipedia: Normal form (abstract rewriting)]].

The following =hang= function is not total.
Why?

#+BEGIN_SRC haskell
    hang : Nat -> Nat
    hang x => hang x
#+END_SRC

The expression =hang x= can be rewritten to =hang x=, so =hang x= is not a normal form,
but this goes on forever, so =hang x= does not have a normal form, and thus =hang x= is not total.

This =loop= thing is not a function in the mathematical sense. Why is that?

#+BEGIN_EXAMPLE
    loop : a
    loop => loop
#+END_EXAMPLE

Consider this, where =exit= terminates the program.

#+BEGIN_SRC haskell
    what : Nat
    what => exit
#+END_SRC

The function =crash= also does not produce a =Nat=.

- What is Scott continuity?

  - Why is it named "continuity"?

https://cs.stackexchange.com/questions/1371/scott-continuous-functions-an-alternative-definition

Girard's System F
https://people.mpi-sws.org/~skilpat/plerg/papers/harper-system-f-2up.pdf
https://www.reddit.com/r/haskell/comments/2zqtfk/why_isnt_anyone_talking_about_optimal_lambda/

Venanzio Capretta's partiality monad
General recursion via coinductive types
[[http://www.cs.ru.nl/~venanzio/publications/Recursion_Coinductive_LMCS_2005.pdf][Venanzio Capretta 2005]]
"see the work by Barendregt
and Geuvers [5] for a good exposition of technical issues of type-theoretic proof assistants"
Coinductive types were first
introduced in type theory by Hagino [34]

[[https://cs.stackexchange.com/questions/19577/what-can-idris-not-do-by-giving-up-turing-completeness][StackOverflow: What can Idris not do by giving up Turing-completeness?]]:
"Dual to termination: while an inductive definition must terminate (by consuming all of its data) a coinductive definition must be productive - in practice this means, brieflt, that any recursive call must be guarded by a constructor. I've found this explanation to be the clearest (ymmv): adam.chlipala.net/cpdt/html/Coinductive.html" -- Edwin Brady Apr 22 '14 at 17:58

Dependent Types and Multi-monadic Effects in F⋆
https://www.fstar-lang.org/papers/mumon/paper.pdf

Type Systems, Luca Cardelli
http://lucacardelli.name/Papers/TypeSystems.pdf

[[https://www.cs.rit.edu/~mtf/student-resources/20094_voelker_msthesis.pdf][Karl Voelker master thesis: practical programming with total functions]]

[[https://www.cs.york.ac.uk/plasma/wiki/index.php?title=Functional_Programming#Theses][York CS wiki: FP researches]]

- Position papers

  - [[https://www.irif.fr/~mellies/mpri/mpri-ens/articles/hyland-power-lawvere-theories-and-monads.pdf][2007, Hyland & Power: "The Category Theoretic Understanding of
    Universal Algebra: Lawvere Theories and
    Monads"]]

- Should we read these?

  - 2015 Ralf Hinze, Nicolas Wu, Jeremy Gibbons: [[http://www.cs.ox.ac.uk/people/jeremy.gibbons/publications/conjugate-hylos.pdf][Conjugate Hylomorphisms Or: The Mother of All Structured Recursion Schemes]]
  - 2007 Colin John Morris Kemp PhD thesis [[https://pdfs.semanticscholar.org/21da/de9b8e96724265f911c90c0ddd935901a0f0.pdf][Theoretical foundations for practical "totally functional programming"]]
* Parsing
#+TOC: headlines 2 local
** My expectations about parsing
I expect the computer to infer a parser and a pretty-printer from the same grammar.
Parser generators only give half of what I want.

I expect the computer to work with non-ambiguous left-recursive grammars.
** What is parsing?
Parsing is also called "syntax analysis" (analysis = breakdown, syntax = put together).

Parsing is the act of modifying the /state/ of the parser.
This is the operational view.

Parsing is converting a sequence to a tree.
This is the data view.

Trees are graphs. Why stop at trees? Why not graphs?

- [[https://en.wikipedia.org/wiki/Graph_rewriting][WP:Graph rewriting]]
- 2015 slides "Graph grammars" [[http://www.its.caltech.edu/~matilde/GraphGrammarsLing.pdf][pdf]]
- 1993 article "A Graph Parsing Algorithm and Implementation" [[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.612.9698&rep=rep1&type=pdf][pdf]]
- 1990 article "A Graph Parsing Algorithm" [[https://dl.acm.org/citation.cfm?id=859753][paywall]]

What is the difference between syntax and grammar?

We /lex/ (perform lexical analysis / tokenization) to clean up the grammar (no need to mention whitespaces in the grammar).

Lexing simplifies grammars.

With lexing:
#+BEGIN_EXAMPLE
    exp ::= exp PLUS exp
#+END_EXAMPLE

Without lexing:
#+BEGIN_EXAMPLE
    white ::= ...
    exp ::= exp white "+" white exp
#+END_EXAMPLE

"Strictly speaking, tokenization may be handled by the parser.
The reason why we tend to bother with tokenising in practice is that it makes the parser simpler,
and decouples it from the character encoding used for the source code."
([[https://en.wikibooks.org/wiki/Compiler_Construction/Lexical_analysis][Wikibooks:Compiler construction]])
** What is the inverse of parsing?
   :PROPERTIES:
   :CUSTOM_ID: what-is-the-inverse-of-parsing
   :END:

Unparsing?

Parsing is the treeization (delinearization, deserialization) of a line.
Unparsing is the linearization (serialization) of a tree.

Parsing is String -> Maybe Tree.
Unparsing is Tree -> String.

Can we make parsing truly one-to-one?
String -> Tree.
CST = AST.
Very rigid syntax.
Forbid whitespace freedom.

Another possibility: Inverse of parsing is anti-parsing (generation)?
From grammar, generate all possible strings and their syntax trees.

Inverse of analytical grammar is generative grammar?

- https://en.wikipedia.org/wiki/Generative_grammar
- https://en.wikipedia.org/wiki/Formal_grammar#Analytic_grammars

Parser is syntax analyzer.
Analysis is the opposite of synthesis?
What is syntax synthesizer?

Inverse of parsing is pretty-printing?

If matching is analogous to subtraction, then what is analogous to multiplication?
Generation?

- algebra of pretty-printing

  - 1995, Hughes, "The design of a pretty-printing library"
  - 1998, Wadler, "A prettier printer"
  - Hughes, Peyton-Jones, et al., http://hackage.haskell.org/package/pretty-1.1.3.6/docs/Text-PrettyPrint-HughesPJ.html

- [[https://www.cs.kent.ac.uk/people/staff/oc/pretty.html][Efficient simple pretty printing combinators]]

** How should parsing be done?
   :PROPERTIES:
   :CUSTOM_ID: how-should-parsing-be-done
   :END:

From grammar description, the machine should generate both a parser and a pretty-printer.

Given grammar, generate both parser and unparser/pretty-printer. - http://www.semdesigns.com/Products/DMS/DMSPrettyPrinters.html?Home=DMSToolkit - https://hackage.haskell.org/package/invertible-syntax-0.2.1/src/Example.lhs - https://hackage.haskell.org/package/invertible-syntax - [[http://www.informatik.uni-marburg.de/~rendel/unparse/rendel10invertible.pdf][Tillmann Rendel and Klaus Ostermann. "Invertible Syntax Descriptions: Unifying Parsing and Pretty Printing". In Proc. of Haskell Symposium, 2010.]] - http://jssst.or.jp/files/user/taikai/2016/PPL/ppl1-1.pdf - [[http://lambda-the-ultimate.org/node/4191][LTU: Invertible Syntax Descriptions: Unifying Parsing and Pretty Printing]] - [[http://www.informatik.uni-marburg.de/~rendel/unparse/rendel10invertible.pdf][Invertible Syntax Descriptions: Unifying Parsing and Pretty Printing]]

Some parsing techniques:

- recursive descent parser (writing a parser manually)
- parser generators: Happy (Haskell), Bison (with Yacc)
- parser combinators: Parsec (Haskell)
- PEG (parsing expression grammar)
- Brzozowski quotient
- binary-parser description languages: ASN.1, Google Protobuf, Apache Thrift, Apache Avro
- invertible parsing?
- https://en.wikipedia.org/wiki/Chart_parser

** Incremental/online parsing
   :PROPERTIES:
   :CUSTOM_ID: incrementalonline-parsing
   :END:

Incremental parsing is parsing as input becomes available (without waiting for the whole input to become available).

- Type-directed automatic incrementalization

  - http://www.cs.cmu.edu/~joshuad/papers/incr/

- https://en.wikipedia.org/wiki/Incremental_computing

  - https://inc-lc.github.io/

- https://hackage.haskell.org/package/incremental-parser
- [[https://yi-editor.github.io/posts/2014-09-04-incremental-parsing/][incremental/online parsing]]

** Parsing with Brzozowski quotients
   :PROPERTIES:
   :CUSTOM_ID: parsing-with-brzozowski-quotients
   :END:

Brzozowski quotient is like quotient in integer division, but for strings.
(Formal definition?)

Why is Brzozowski quotient called Brzozowski derivative?

- [[https://en.wikipedia.org/wiki/Quotient_of_a_formal_language][Quotient of a formal language]]
- [[https://en.wikipedia.org/wiki/Brzozowski_derivative][Brzozowski derivative]]

  - [[https://arxiv.org/find/cs/1/au:+Brzozowski_J/0/1/0/all/0/1][Janusz Brzozowski et al. on arxiv]]

The /multiplication/ of two strings $x$ and $y$ is the concatenation $x \cdot y = x y$.

Multiplication is associative: $(xy)z = x(yz)$.

The /inverse/ of a string $x$ is written $x^{-1}$.
It's hypothetical.
It's pure symbolic manipulation.
Don't imagine what it looks like.
Do care about its properties:

- We define $x^{-1} x = \epsilon$.
- We define $x x^{-1} = \epsilon$.
- We define $(x y)^{-1} = x^{-1} y^{-1}$.

The /left division/ of a string $x$ by divisor $y$ is $y^{-1} x$.

The /right division/ of a string $x$ by divisor $y$ is $x y^{-1}$.

How do we define quotient and remainder?

Perhaps Brzozowski's paper describes why it's called a derivative?

The multiplication of two languages $A$ and $B$ is the Cartesian product $AB = \\{ ab ~\|~ a \in A, b \in B \\}$.

- Differentiating Parsers
  Automatic derivation of incremental parser from a grammar or a non-incremental parser?
  Like automatic differentiation but generalized to any program?
  http://lambda-the-ultimate.org/node/3704
- http://matt.might.net/articles/implementation-of-regular-expression-matching-in-scheme-with-derivatives/
- http://okmij.org/ftp/continuations/differentiating-parsers.html
- Parsing with derivatives?

  - https://hackage.haskell.org/package/derp
  - https://arxiv.org/abs/1010.5023
  - http://matt.might.net/articles/parsing-with-derivatives/ "Yacc is dead"

- Brzozowski quotients.

  - [[https://arxiv.org/abs/1010.5023][Yacc is dead]]
  - "Parsing with derivatives"

- 2017, [[https://www.cl.cam.ac.uk/~nk480/parsing.pdf]["A Typed, Algebraic Approach to Parsing"]]

  - "[...] we extend the notion of Brzozowski derivative from regular expressions to the typed context-free expressions."

** History of parsing
   :PROPERTIES:
   :CUSTOM_ID: history-of-parsing
   :END:

- [[https://jeffreykegler.github.io/personal/timeline_v3][Parsing: a timeline -- V3.0]]: 2012 article about a history of parsing.

  - [[https://www.reddit.com/r/ProgrammingLanguages/comments/8cz97n/parsing_a_timeline_hopefully_this_puts_parsing_is/][Parsing: a timeline. Hopefully this puts "Parsing is a solved problem" to rest. : ProgrammingLanguages]]
  - [[http://jeffreykegler.github.io/Ocean-of-Awareness-blog/individual/2018/05/knuth_1965.html][Why is parsing considered solved?]]

** What
   :PROPERTIES:
   :CUSTOM_ID: what
   :END:

- Parsing Expression Grammar (PEG)

  - https://github.com/harc/ohm/

    - https://ohmlang.github.io/

      - https://harc.ycr.org/project/ohm/

  - Packrat

- 2015, [[https://arxiv.org/abs/1511.08307][Nez: practical open grammar language]]
- Earley parser

  - https://en.wikipedia.org/wiki/Earley_parser
  - https://hackage.haskell.org/package/Earley

- https://github.com/Gabriel439/post-rfc/blob/master/sotu.md#parsing--pretty-printing

  - https://hackage.haskell.org/package/trifecta
  - https://hackage.haskell.org/package/parsers

- Parsing in Lisp and Racket https://stackoverflow.com/questions/21185879/writing-a-formal-language-parser-with-lisp
* Programming
  :PROPERTIES:
  :CUSTOM_ID: programming
  :END:
** What is a program?
- A program is represented by
  - a sequence of instructions (procedural programming)
  - a lambda expression (functional programming)
** Metaprogramming
- JetBrains MPS
- [[http://txl.ca/index.html][TXL: source transformation by example]], what can it do?
- http://www.moserware.com/2008/06/ometa-who-what-when-where-why.html
** Comparing Ocaml and SML
- [[http://adam.chlipala.net/mlcomp/][Comparing Objective Caml and Standard ML]], Adam Chlipala
  - https://people.mpi-sws.org/~rossberg/sml-vs-ocaml.html
** Interoperation
- Programming languages don't work with each other very well.
  - What we need is not a new programming language, but a way for languages to work together?
- [[https://mollyrocket.com/casey/stream_0019.html][compression-oriented programming]]
- Lisp family/dialects
  - Scheme
  - [[https://picolisp.com/wiki/?home][PicoLisp]]
- Undigested
  - https://hakonrossebo.github.io/functional-programming-babelfish/
  - https://github.com/rainbyte/haskell-ide-chart
  - http://docs.mamedev.org/techspecs/luaengine.html
- The source code is a textual representation of the abstract syntax tree (AST).
- The source code is unimportant cosmetics.
  We should care about the ASTs and transformations between ASTs.
  We should read, write, and edit ASTs directly, not text.
  The editor should not parse text into AST; it should generate text from AST.
- Language-oriented programming? Data-first programming?
  - Data is the most important thing.
    - Because data is harder to back up than code?
  - Program translates the shape of data.
  - Describe what you want, and write code that follows that description
    to call the lower-level implementation details.
- Programming language design
  - Which should we start with?
    - Semantics (high-level, top-down language design)
    - Machine code (low-level, bottom-up language design)
  - Every enhancement reduces cognitive load.
  - Example of bottom-up language design and how each level reduces cognitive load:
    - Begin with machine code.
    - Provide mnemonics for instructions.
    - Provide the illusion of infinite custom-named registers and orthogonal operands.
    - Provide macros subroutines as extensible instructions.
    - Provide the illusion of infinite custom-named registers and orthogonal operands.
    - Provide macros and subroutines as extensible instructions.
    - Provide named locations.
    - Provide the illusion of infinite memory.
    - Abstract away processor registers.
    - Abstract away pointers.
    - Expression.
    - Infix expression syntax.
    - First-class functions.
    - The program itself is a procedural program that tells the interpreter what code to generate.
    - End up with something like Randall Hyde's High Level Assembly?
- PL research
  - [[https://www.microsoft.com/en-us/research/publication/implementing-functional-languages-a-tutorial/][1992, book, "Implementing functional languages: a tutorial"]]
- Improve an existing language instead of starting new?
- What is this? http://reasonablypolymorphic.com/blog/elm-is-wrong
** Interesting languages?
*** Rebol? Rebol metaprogramming?
https://en.m.wikipedia.org/wiki/REBOL
*** Carp lisp dialect?
** Scheme vs Lisp:
- A Lisp implementation doesn't have to have proper tail calls.
- A Scheme implementation must have proper tail calls.
** Type systems
- Types help computers help us.
  - Types prevent some mistakes.
  - Types are part of documentation.
    - Types help us write an IDE.
* Proving things using computers
** The problem with formal methods: you can't prove what you don't model.
- Intel uses formal method, but why does its processors have vulnerabilities?
  - Because /you can't prove what you don't model/.
  - Spectre, Meltdown, etc.
  - https://arstechnica.com/information-technology/2018/11/intel-cpus-fall-to-new-hyperthreading-exploit-that-pilfers-crypto-keys/?amp=1
- How will we ever know that we didn't miss anything?
- You have to prove that it does everything that you want it to do, /and/ that it does only that, and nothing else.
*** What if it is impossible to write correct software? What are our options to mitigate/limit the damage?
** What
- Where is tutorial?
- A goal should be to make it easy to make correct software?
- 2014, slides, "How I became interested in foundations of mathematics.", Vladimir Voevodsky, [[https://www.math.ias.edu/vladimir/sites/math.ias.edu.vladimir/files/2014_08_ASC_lecture.pdf][pdf]]
- Why should we be interested in homotopy type theory?
- Coq
- [[https://leanprover.github.io/][Lean]]

  - Pros of Lean

    - Integrates with Visual Studio Code

  - Cons of Lean

    - Less mature than Coq

- Should we care about the relationship between functional programming and theorem proving?
- Ramble

  - Useless idea?

    - Reverse-proving: generate all proofs of a theory.
      (Proving is: given a statement, prove (or disprove).)

      - Which true sentences are interesting?
      - Which proofs are interesting?

- Companies

  - [[https://galois.com/][Galois]], on [[https://github.com/GaloisInc/][github]]

- unread interesting things

  - http://www.joachim-breitner.de/blog/717-Why_prove_programs_equivalent_when_your_compiler_can_do_that_for_you_
  - http://www.michaelburge.us/2017/08/25/writing-a-formally-verified-porn-browser-in-coq.html
  - https://aphyr.com/posts/342-typing-the-technical-interview
  - http://tech.frontrowed.com/2017/09/22/aggregations/

- interoperation between proof assistants?

  - Lem ("lightweight executable mathematics")

    - https://www.openhub.net/p/lightweight-executable-mathematics
    - http://www.cl.cam.ac.uk/~pes20/lem/
** Coq
  :PROPERTIES:
  :CUSTOM_ID: coq
  :END:

- Introduction

  - What is a suitable introduction to Coq?
  - [[https://people.debian.org/~schepler/coqtut.v.html][Daniel Schepler's "Mathematical formalization using Coq"]] seems approachable.
  - [[https://mathoverflow.net/questions/155909/wanted-a-coq-for-the-working-mathematician][MO 155909: Wanted: a "Coq for the working mathematician"]]
  - [[https://mathoverflow.net/questions/164959/how-do-i-verify-the-coq-proof-of-feit-thompson][MO 164959: How do I verify the Coq proof of Feit-Thompson?]]
  - https://softwarefoundations.cis.upenn.edu/current/index.html
  - Yves Bertot's "Coq in a hurry"
  - [[https://coq.inria.fr/tutorial-nahas][Coq tutorial by Mike Nahas]]
  - [[https://coq.inria.fr/distrib/current/refman/Reference-Manual006.html#Cic][Calculus of inductive constructions]]

- [[http://blog.mikael.johanssons.org/coq-and-simple-group-theory.html][Coq and simple group theory]]
- Installation on Ubuntu 14.04

  - =sudo apt-get install coq=

*** Introduction
   :PROPERTIES:
   :CUSTOM_ID: introduction
   :END:

Coq source file extension is =.v=.

The notation =x:T= means "the type of =x= is =T=", "=x= inhabits =T=".
It also means "=x= is a proof of =T=" by Curry-Howard isomorphism.

The type of =nat= is =Type(1)=.

The type of =set= is =Type(2)=.

The type of =Type(i)= is =Type(i+1)=.

#+BEGIN_EXAMPLE
    (* This is a comment in Coq. *)
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    coqtop -l filename.v -batch
#+END_EXAMPLE

*** Defining things
   :PROPERTIES:
   :CUSTOM_ID: defining-things
   :END:

#+BEGIN_EXAMPLE
    Definition x: nat := 0.
    Check x.

    Definition f (x: nat): nat := x + 1.
#+END_EXAMPLE

Definition = non-recursive definition

Fixpoint = recursive definition

Inductive = type (Set (small set)) definition

#+BEGIN_EXAMPLE
    Definition name: type
    where
    type: Set
    or type: Prop
    or type: Type.
#+END_EXAMPLE

Proving 0+1 = 1 using Curry-Howard isomorphism?

Axiom: and-elimination

\begin{align*}
a \wedge b \vdash a
\end{align*}

#+BEGIN_EXAMPLE
    Theorem and_elim: forall a b: Prop, a /\ b -> a.
    tauto.
    Qed.
#+END_EXAMPLE

\begin{align*}
a \vdash a \vee b
\end{align*}

Modus ponens

\begin{align*}
a, a \rightarrow b \vdash b
\end{align*}

*** How Coq represents propositions
   :PROPERTIES:
   :CUSTOM_ID: how-coq-represents-propositions
   :END:

#+BEGIN_EXAMPLE
    Print False.
    Print True.
    Inductive True : Prop := I : True.
    Inductive False : Prop := .
    Inductive and (A B : Prop) : Prop := and : A -> B -> and A B.
#+END_EXAMPLE
* TODO Fix this incoherent Java ramble; don't read
- Make it work
- Make it maintainable
- Make it efficient (only if needed)
- Make it reusable (only if there is demand)
- You Are Not Gonna Need It until proven otherwise, but this does not mean you do not need to anticipate.
- There are many ways to write code that do the same thing. Prefer the way that is the easiest to read and change and needs the least maintenance.
- Don't write getters and setters. Move the computation into the class, or use public fields.
- Corollary: Use public fields for your DTOs (or move the computation there). http://stackoverflow.com/questions/10240372/jackson-field-based-serialization
- Make value classes have final fields and a constructor.
- Use Java wisely ("Object-assisted procedural programming").
  https://www.quora.com/In-Object-Oriented-design-are-void-methods-bad
- OBPP ("Object-based procedural programming"), term coined by Peter DiSalvo.
- Java is not OOP; Java is OBPP.

The Java language is the C language with automatic memory management and without preprocessor.

C:

#+BEGIN_SRC C
    /* file MyClass.h */

    #ifdef _MyClass_h_INCLUDED_
    #define _MyClass_h_INCLUDED_

    struct _MyClass;
    typedef struct _MyClass MyClass;

    MyClass* MyClass_new ();

    int MyClass_myMethod (MyClass* this, Arg* arg);

    #endif


    /* file MyClass.c */

    #include <MyClass.h>

    static const int ONE = 1;

    struct _MyClass {
        int myField;
    };

    MyClass* MyClass_new () {
        const int size = sizeof(MyClass);
        MyClass* this = malloc(size);
        memset(this, 0, size);
        return this;
    }

    int MyClass_myMethod (MyClass* this, Arg* arg) {
        this->myField = ONE + Arg_getField(arg);
        return ONE;
    }
#+END_SRC

Java:

#+BEGIN_SRC java
    /* file MyClass.java */
    class MyClass {
        private static final int ONE = 1;
        private int myMethod (Arg arg) {
            this.myField = ONE + arg.getField();
            return ONE;
        }
    }
#+END_SRC

The essence is the same, but Java reduces the accidental complexity.

Method chaining vs fluent
Method chaining transforms the dot (method invocation) into semicolon (sequence point).

Fluent is embedded DSL.

- Don't use TestNG's @Test for SomethingExample?
  Write a main method in a SomethingExample class instead?
- Other stuffs https://github.com/jhalterman/failsafe
- http://blog.ploeh.dk/2014/03/10/solid-the-next-step-is-functional/
- http://martinfowler.com/bliki/RoleInterface.html
- http://blog.ploeh.dk/2011/06/07/SOLIDCodeisnt/
- https://www.jetbrains.com/help/idea/2016.2/code-inspection.html
- object is closure; closure is object
- LLVM is procedural core.
*** Candidate solution: source-to-source translation
*** Candidate solution: binary interoperability
Translate Java class to LLVM IR.

Translate Haskell to LLVM IR.

Translate C to LLVM IR.

Java has JNI.

Constraints:

- ABI-compatible with JNI:
  JNI C libraries works without recompilation.

Foreign.

What's wrong:
I want to edit the syntax tree.
I don't care about spacing.

The name is /structural editor/.
projectional editor.

https://www.facebook.com/notes/kent-beck/prune-a-code-editor-that-is-not-a-text-editor/1012061842160013/

http://www.lamdu.org/

http://projectured.org/
** Improving the Java language
Too much software is written in Java.

Xtend

Kotlin

IDE support

Top-level methods.
** Metaprogramming
#+BEGIN_EXAMPLE java
{% raw %}
    msg = "Hello";
    c = Class.new;
    c += {{ int foo; }};
    c += {{
        void sayHello ()
        {
            System.out.println($msg);
        }
    }};
{% endraw %}
#+END_EXAMPLE
** Old
This is my opinion on how to best use Java.

Java, when used properly, should not be more verbose than C.
*Java should be thought as enhanced C*.
It adds these features:

- namespacing
- garbage collection
- exception
- limited functional programming
- reflection (should be documented thoroughly when used)

and it removes these features:

- preprocessor
- separate header files

Java sucks least when used as a *mainly procedural* programming language.

Subclassing, public fields, getters, setters, statics,
mutability, and big classes are not evil in and of themselves.
What is evil is /writing code without understanding *why* you write it that way/.
The key to good programming is understanding why the code is the way it is.

With documentation, understanding data is easier than understanding control flow.

*A maintenance engineer translates requirement changes to software changes.*
Software consists of program code, database schema, documentation, and so on.
A software is maintainable iff a reasonable requirement change translates to a reasonable software change.

For example, an application may now have to handle ten times the traffic it was designed for.

If, in 10 years, your application will never handle more than 10 requests per second,
but you split your application into 10 JVMs communicating with JSON-RPC,
you're wasting too many resources.
** Example of namespacing
This is a module in C.
Note that each procedure name is prefixed with =point_=.

#+BEGIN_SRC C
    #include <math.h>

    typedef struct
    {
        double x;
        double y;
    }
    Point;

    void point_init (Point* self, double x, double y)
    {
        self->x = x;
        self->y = y;
    }

    double point_distance (Point* a, Point* b)
    {
        return sqrt(square(b->x - a->x) + square(b->y - a->y));
    }

    static double square (double x)
    {
        return x * x;
    }
#+END_SRC

This is the module in Java.
Note that now you don't have to prefix your method names with =point_=
because it already lives in the class =Point=.

#+BEGIN_SRC java
    package com.example;

    final class Point
    {
        final double x;
        final double y;

        Point (double x, double y)
        {
            this.x = x;
            this.y = y;
        }

        double distance (Point that)
        {
            return distance(this, that);
        }

        static double distance (Point a, Point b)
        {
            return Math.sqrt(square(b.x - a.x) + square(b.y - a.y));
        }

        private static double square (double x)
        {
            return x * x;
        }
    }
#+END_SRC
** Another example
#+BEGIN_SRC java
    class Exchange
    {
        final HttpServletRequest request;
        final HttpServletResponse response;
    }
#+END_SRC
** Mixin
Use extend or mixin if and only if
you want all subclasses to benefit from enhancements of the base class.

A tradeoff is that =unsafeSetHp= is public.

#+BEGIN_SRC java
    interface GameObject
    {
        long getId ();
    }

    interface Health
    {
        int getMaxHp ();
        int getHp ();
        void unsafeSetHp (int x);
        default void setHp (int x)
        {
            final int maxHp = getMaxHp();
            if (x < 0) { setHp(0); return; }
            if (x >= maxHp) { setHp(maxHp); return; }
            setHp(x);
        }
        default boolean isDead ()
        {
            return getHp() <= 0;
        }
        default void addHp (int x)
        {
            setHp(getHp() + x);
        }
    }

    class Chara implements GameObject, Health
    {
        final long id;

        int maxHp;
        int hp;

        Chara (long id, int maxHp)
        {
            this.id = id;
            this.maxHp = maxHp;
            this.hp = maxHp;
        }

        @Override public long getId () { return id; }
        @Override public int getMaxHp () { return maxHp; }
        @Override public int getHp () { return hp; }
        @Override public void unsafeSetHp (int x) { this.hp = x; }
    }
#+END_SRC
** Unrelated
Field stores data.
Method does work.
Classes groups fields and methods.

/A class groups methods that share parameters./
The fields are those shared parameters.

A Java class is equivalent to a C struct and the functions whose first parameter is that struct.
In C, those things are usually grouped into one C file,
so a Java class is practically equivalent to a C file.
Static field in Java is global variable in C,
but without the name conflict.

C =#include= translates to Java =import=, =extends=, and =implements=.
=implements X= imports X's default methods into this module.
=extends X= imports X's fields and methods into this module.
=import static= imports X's static methods into this module.

Java 8 interfaces can be used as mixins.
Use default methods.

A mixin is a contract
"if you give me X, I'll give you Y."

Every method is a contract:
If you give me X, I'll give you Y.

Getters and setters provide "lazy fields" and "computed fields".

Java can be used with edit-compile-reload-refresh.
Java can hotswap.

IDE makes navigation easy.

A class is an instantiable module.

The aim is to maximize understandability and minimize duplication.
Sometimes, reducing duplication makes the code incomprehensible.

=a.b(c)= is a syntactic sugar for =b(a,c)=.
Implicit first argument.

Exception is structured goto.

https://www.reddit.com/r/learnprogramming/comments/1f0g2b/eli5_the_main_differences_between_oop_and/

https://www.reddit.com/r/learnprogramming/comments/tocjf/procedural_programmer_me_needs_help_making_the_oo/
** Can process fix incompetent people?
** Java-Haskell interoperation
https://wiki.haskell.org/GHC/FAQ

https://wiki.haskell.org/HaskellImplementorsWorkshop/2016
*** State of the art
LLJVM?

https://github.com/Frege/frege
Haskell-like language

http://eta-lang.org/
port GHC primitives to Java?

Sorted from the most desirable (highest level):

- Source-to-source translation.

  - Write a Java source interpreter in Haskell.
  - Map Haskell code to Java.

Write a JVM in Haskell.

Translate both Java and Haskell to a common lower-level language such as LLVM.

Core-to-bytecode.

JNI-to-FFI.
** Haskell-to-Java
http://mmhelloworld.github.io/blog/2013/07/10/frege-hello-java/

The Frege language.
The Eta language.

Haskell => Java?

Core => Java?

Module => Class

Data type => Static inner class

Value => instance of =Thunk=

Data constructor => Class extending the class corresponding to the data type

A value definition in a module => a static final Thunk field in the class

A class => A class

A member of a class => An instance field of the Class; the type of the field is =Thunk=

A class constraint => A dictionary argument whose type is the class

Case match => if instanceof

#+BEGIN_SRC java
    interface Thunk
    {
        Object force ();
        Thunk apply (Thunk x);
    }

    class Atom
    {
        Object value;
        Supplier x;
        Atom (Supplier x) { this.x = x; }
        Object force ()
        {
            if (value == null) { value = x.get(); }
            return value;
        }
    }
#+END_SRC

#+BEGIN_SRC haskell
    module M where

    a :: Int
    a = 1

    f :: Int -> Int
    f x = x + 1

    g :: (a -> b) -> a -> b
    g f x = f x
#+END_SRC

Map =Int= and =Int32= to a =Thunk= producing a =java.lang.Integer=.
A Haskell program assumes that =Int= is a two's complement signed integer
/at least/ 30 bits wide.

#+BEGIN_SRC haskell
    class M
    {
        static final Thunk a = new Atom(() -> 1);
        static final Thunk f = new Lambda(x -> (Integer) x + 1);
        static final Thunk g = new Lambda(f -> new Lambda(x -> f.apply(x)));
    }
#+END_SRC
*** Java-to-Haskell
https://github.com/Frege/frege/wiki/Calling-Frege-Code-from-Java

Java method -> foreign import

#+BEGIN_SRC haskell
    -- Foreign.Java

    data JByte
    data JInt
    data JShort
    data JLong
    data JObject

    foreign import java package.Class Method :: ArgType0 ArgType1 ... as haskellName

    foreign import java java.lang.Integer parseInt :: String -> Int32 as jParseInt
#+END_SRC

Message-passing view of Java objects

#+BEGIN_SRC haskell
    s <- call object "toString" []

    ...

    jls <- getClass "java.lang.System"
    out <- getField jls "out"
    call out "println" ["Hello world"]
#+END_SRC
** Architecture
Every Java program is a sequence of statements.

Every Java program is equivalent to one long main class?

A block is a sequence of statements.

#+BEGIN_EXAMPLE
    class Name
        int prop
        // Generates:
        // int prop
        // int getProp ()
        // void setProp (int)
    end
#+END_EXAMPLE
** Understanding factoring
Imagine writing your program as one long main method.
It is almost certain that you will find duplicate blocks.

Two duplicate blocks can be factored into a method.
Two methods with the same parameters can be factored into a class.

What is an optimal factoring of that program?
The factoring is wrong iff the same change needs to be performed more than once.
A program can also suffer from modification anomaly.

There are prime fragments:
fragments that cannot be factored into smaller parts.
** OOP as a special case of FP
Object and closure are equivalent.

=o.m(a0,a1,...) -> m o a0 a1 ...=
** Functional multimethod
Statically checked.

#+BEGIN_EXAMPLE
    collide (a : Asteroid) (b : Asteroid) = ...
    collide (a : Asteroid) (s : Spaceship) = ...
    collide (s : Spaceship) (a : Asteroid) = collide a s
    collide (s : Spaceship) (t : Spaceship) = ...

    True : Bool.

    False : Bool.

    Ord Bool.

    Bool x, Bool y |-
        Equal x y =
            match x y in
                False False -> True;;
                True True -> True;;
                _ _ -> False.

    LessThan False False = False.
    LessThan False True = True.
    LessThan True False = False.
    LessThan True True = False.

    IfElse False t f = f.
    IfElse True t f = t.

    And False x = False.
    And True x = x.

    Or False x = x.
    Or True x = True.

    Not False = True.
    Not True = False.

    Min x y = IfElse (LessThan x y) x y.
    Max x y = IfElse (LessThan x y) y x.

    Table Employee.

    Column Id Employee |- Bigint Id.
    Column Name Employee |- String Name.

    Column name Employee, type name |- Read name From resultSet = Get type name From resultSet.

    Column name Employee |-
        Member
            (Tuple name (Read name From resultSet))
            (Read Employee From resultSet).

    Main |-
        source = Connect "jdbc:postgresql://127.0.0.1/test",
        resultSet = ExecuteQuery source "SELECT * FROM employee",
        Member tuple (Read Employee From resultSet),
        Print tuple.

    ?- Main.

    Ord a, Ord b |- min a b = if lt a b then a else b

    a : Asteroid, b : Asteroid |- collide a b = ...
    IF
        a, b : Asteroid
        AND
        s, t : Spaceship
    THEN
        collide a b = ...
        collide a s = ...
        collide s t = ...

    define multimethod collide with parameters
        a, b : Asteroid
        s, t : Spaceship
    where case parameters matching
        a b -> ...
        a s -> ...
        s a -> ...
        s t -> ...
#+END_EXAMPLE
** Java
=a.m(b)= and =m(a,b)= are equivalent.
The dot is a syntactic sugar for implicit first argument, plus virtual dispatch.

The changes that must be made to implement a feature.
The program is well-factored if no change is duplicated.

A maintainable software does not have to be object-oriented, but it has to be well-factored.
A well-factored program /prevents the same modification from being duplicated./

Factorization reduces information duplication.

Depending on dependable things simplify your program.
I know someone who used a SQL database but didn't want to depend on it,
so he wrote application-level joins everywhere.

A software is maintainable iff it is simple to change.
Being able to start, stop, and restart quickly (in just a few seconds) also helps.
*** SQL
Mutable fields.

#+BEGIN_EXAMPLE
    Column a
        name : String
        read : a -> ResultSet -> ()
        write : ResultSet -> a -> ()

    Table a = [Column a]

    read : Table a -> a -> ResultSet -> ()
    write : Table a -> ResultSet -> a -> ()

    interface SqlCallable2<A, B>
    {
        void call (A a, B b) throws SQLException;
    }

    class Column<E>
    {
        String name;
        SqlCallable2<E, ResultSet> read;
        SqlCallable2<ResultSet, E> write;
    }
#+END_EXAMPLE
*** Annoyances of local variables
- Java can't infer the type of local variables
- Local variables aren't final by default

#+BEGIN_SRC java
    final Something something = new Something();
#+END_SRC
*** Example of under-factored program
#+BEGIN_SRC java
    class Employee
    {
        List<A> getById (long id)
        {
            ... "SELECT * FROM my_schema.employee WHERE id = ?" ...
        }

        List<A> getByName (String name)
        {
            ... "SELECT * FROM my_schema.employee WHERE name = ?" ...
        }
    }
#+END_SRC

What if =my_schema= or =employee= change?

#+BEGIN_SRC java
    class Employee
    {
        private static String TABLE = "my_schema.employee";

        List<A> getById (long id)
        {
            ... "SELECT * FROM " + TABLE + " WHERE id = ?" ...
        }

        List<A> getByName (String name)
        {
            ... "SELECT * FROM " + TABLE + " WHERE name = ?" ...
        }
    }
#+END_SRC

What if SQL syntax changes; for example, what if a committee decides to change SQL =SELECT= to =CHOOSE=?
We assume it's unlikely,
so we don't design our program to anticipate that.
** Extract covariant expressions into variables
#+BEGIN_SRC java
    System.out.println("John's salary is " + employee.computeSalary());
    if (employee.computeSalary() >= 1000)
    {
        System.out.println("It's over one thousand");
    }
#+END_SRC

What if =employee.computeSalary= changes?

#+BEGIN_SRC java
    final long salary = employee.computeSalary();
    System.out.println("John's salary is " + salary);
    if (salary >= 1000)
    {
        System.out.println("It's over one thousand");
    }
#+END_SRC

What if we want to print to =aPrintStream= instead of =System.out=?

#+BEGIN_SRC java
    final long salary = employee.computeSalary();
    final StringBuilder message = new StringBuilder();
    message.append("John's salary is ").append(salary).append('\n')
        .append(salary >= 1000 ? "It's over one thousand" : "");
    aPrintStream.println(message);
#+END_SRC

What if =salary= type changes from =long= to =BigInteger=?
We assume it's unlikely.
** Extract covariant blocks into method
Two blocks that must change together.

#+BEGIN_SRC java
    static Y m (A a, B b, ...);
#+END_SRC

#+BEGIN_SRC java
    static Y m0 (X0 x0, X1 x1, ...);
    static Y m1 (X0 x0, X2 x2, ...);
#+END_SRC

becomes

#+BEGIN_SRC java
    class C
    {
        X0 x0;
        Y m0 (X1 x1, ...);
        Y m1 (X2 x2, ...);
    }
#+END_SRC

Things that change together should be grouped together.

Constructors are methods too.

If two methods share a common parameter, the parameter can be extracted into a field.

If two classes share a common field, a class can be extracted.

Static methods are reusable.

Instance methods force you to instantiate the class.
** Implications of architecture on security
A popular trend: split front-end and back-end.
Write front-end in NodeJS, write back-end in Java, front-end calls back-end via JSON HTTP API.
Front-end runs on visitors' browsers.
Back-end is open to public.

You cannot secure the application.
If you cannot secure the hardware running the software,
all bets are off.
*** Foo
Java is a procedural programming language.

The only reason we don't write everything in one big method is maintainability.

A code is easier to understand if it doesn't mix abstraction levels.

Names relate to things the reader already knows.

Java does not have C#'s extension methods.

Java as procedural programming with implicit first argument.

#+BEGIN_EXAMPLE
    object.method(arg1, ...) = method(object, arg1, ...)
#+END_EXAMPLE

Principles make decision-making easy (not necessarily correct).
Principles are heuristics.

/Cohesion/ is the most important characteristic of a class.
The purpose of a class is to group a /working set/ (variables that often change together),
and the methods that use those variables.

The risk of modifying code?

The larger the change, the bigger the risk.

If you are using object mapper like Jackson,
changing a field to final can break your code.
(You must annotate.)
That's why I avoid reflection.

Microrefactoring.
Small steps.

Abstraction is not a mere indirection. yegor256???
Abstraction allows you to say a lot with a little code.
** Mitigating the risk of changing code
Don't just change old code.

Write new code that works with the old code.
Deprecate the old code.
Delete the old code.

#+BEGIN_SRC java
    class CustomList<T>
    {
        private final List<T> inner;

        public CustomList (List<T> inner)
        {
            this.inner = inner;
        }

        public static <T> CustomList<T> fromArray (T[] array)
        {
            final List<T> list = new ArrayList<>();
            list.addAll(Arrays.asList(array));
            return new CustomList<>(list);
        }

        public List<T> toList ()
        {
            return inner;
        }

        // Implement your primitives like size, map, whatever.
    }
#+END_SRC
** Maintainable code
The problem is working with too many details at once.

Mixing HTTP-handling code (such as the Servlet API 3.0)
with your business logic will cause readability problem.
If a method contains getCookie and business logic,
you're in for maintenance problems.

Java is more verbose than Haskell,
but it doesn't mean that you can't create maintainable Java programs;
it doesn't mean that your Haskell programs will automatically be more maintainable.
If you suck, your code will be just as bad.

Java is a /procedural/ language.
Problems begin when people try to force object-oriented paradigm to Java.

#+BEGIN_SRC java
    interface Log
    {
        void info (String message);
        void warn (String message);
        void error (String message);
    }
#+END_SRC

#+BEGIN_SRC java
    class Log_log4j implements Log
    {
        private final Logger log;
        public Log_log4j (Logger log)
        {
            this.log = log;
        }
        @Override public void error (String message) { log.error(message); }
    }
#+END_SRC
** Writing program backwards
If you're a shop, you can try putting all your pricing logic into one class:

- Every buyer whose age is 60 years or greater gets a 10% elder discount.
- Every buyer (unique phone number) is a first-time buyer (who has not bought anything) gets 10% newcomer discount.
- For simplicity, discount percentages are added before applied to the original price.

#+BEGIN_SRC java
    double percent_discount ()
    {
        double percentage = 0;
        if (buyer_age >= 60) { percentage += 10; }
        if (buyer_is_first_time) { percentage += 10; }
        return percentage;
    }
#+END_SRC

At this point you don't care about how to compute buyer_age and buyer_is_first_time.
You simply want to express the pricing rules as a simple Java code that a programmer can easily understand.

To compute the buyer's age, we need his/her date of birth and today's date.
Use JodaTime.

#+BEGIN_SRC java
    buyer_age = today.subtract(buyer_birth_date);
#+END_SRC

Then we need to figure out how to get today's date, and so on, and then you arrive at this method:

If you need something in a method,
but it's not that method's responsibility to compute it,
then it should be a parameter of that method.

#+BEGIN_SRC java
    class Pricing
    {

        void rule ()
        {
            // XXX dont use double for your prices?

            entry(item.name, item.price);

            if (event.is_giveaway)
            {
                discount(s.giveaway(), item.price);
                return;
            }

            if (buyer.age >= 60) { discount(s.elder(), 1); }
            if (buyer.is_first_time) { discount(s.first_timer(), 1); }
            if (buyer.wants_insurance) { surcharge(s.insurance(), 1); }

            if (event.is_new_year) { discount(s.new_year(), 1); }
            if (event.is_christmas) { discount(s.christmas(), 2); }
            if (event.is_online_shopping_day) { discount(s.online_shopping_day(), 0.25 * item.price); }

            if (item.is_rare) { surcharge(s.rare(), 10); }
            if (item.is_luxury) { surcharge(s.luxury(), 5); }
            if (item.is_from_lion_air) { surcharge(s.lion_air_admin_fee(), 10); }
            if (item.is_from_telkomsel) { surcharge(s.telkomsel_admin_fee(), 0.15); }

            if (payment.uses_credit_card) { surcharge(s.credit_card_fee(), 0.03 * item.price); }

            surcharge(s.surcharge_vat(), 0.1 * item.price);
        }

        class Buyer
        {
            final int age;
            final boolean is_first_time;
            final boolean wants_insurance;
        }

        class Entry
        {
            final String label;
            final double amount;
        }

        private final Strings.I s;
        private final List<Entry> entries = new ArrayList<>();

        private void entry (String label, double amount)
        {
            entries.add(new Entry(label, amount));
        }

        private void surcharge (String label, double amount)
        {
            entry(label, amount);
        }

        private void discount (String label, double amount)
        {
            entry(label, -amount);
        }

    }
#+END_SRC

There you have it: a straightforward, readable, maintainable, easily changeable pricing rule for your online business.
A straightforward translation.

Filling the fields is someone else's problem.

Internationalization:

#+BEGIN_SRC java
    class Strings
    {
        interface I
        {
            /** Value-added tax. */
            String elder ();
            String vat ();
        }
        class English implements I
        {
            @Override public String elder () { return "elder"; }
            @Override public String vat () { return "VAT"; }
        }
        class Indonesia implements I
        {
            @Override public String elder () { return "lansia"; }
            @Override public String vat () { return "PPn"; }
        }
        static load (String path) throws IOException
        {
            // use Proxy to lookup table
        }
    }
#+END_SRC

Do you need to be able to change the discounts without recompiling the program?
You don't.
Instead of making it configurable, make compilation and deployment fast, easy, and automatic, and just recompile.
There is less room for mistakes if you keep it in one place that is easy to see: the source code.
The compiler will also help catch mistakes.

Now you figure out how to compute buyer_age.

The name of a class doesn't have to be a noun.

A constructor parameter states that the class depends on a feature.

A class describes a feature.

#+BEGIN_SRC java
    interface Storage
    {
        void save_user (???) throws IOException;
    }
#+END_SRC

#+BEGIN_SRC java
    interface Handler?
    {
        void get_cookie ();
        Handler set_cookie ();
        Handler set_cookie ();
    }
#+END_SRC

A Java class corresponds to a C source file.
This is as if you could put multiple C source files inside a Java class.
And you can put many Java classes inside a Java class.
Think of a class like a folder for C source files;
it groups things to help programmers understand the code,
not as something that corresponds to an object.
** Crucial question
If there are many ways of writing programs that do the same thing,
why choose a particular way?

More maintainable.
** Use snake case
Class name: =My_class_name=

Field, method, and variable name: =my_method_name=

Maintainability is done by limiting ugliness inside a class.

It is possible to write maintainable Java code. It will only be a bit more verbose.
* Modeling a web application?
** Picking a modeling language
I have narrowed down:
- a relational language such as Prolog, Kanren, Mercury
- a functional language such as Haskell, Idris, Ocaml, ML
- TypeScript, Racket, Scheme, Lisp, Lua

There are too many choices.
What is the /semantics/?
What is the /essence/?
- https://en.wikipedia.org/wiki/Modeling_language

What is AsmL?
https://cs.wmich.edu/~OODA/translate.html
** Example of modeling web application
What do we think a web application is?

What do users think?
What do users care?
What are the users' mental model?
How can we formalize the users' mental model, and use that formal model to develop an application with less effort?

Users think of an app as a /tool/, like a complicated hammer:
- What was it originally invented for? What is it supposed to do? What is it usually used for? (Drive nails into wall)
- How do I use it? (Grip the hammer, and hit the nail)
- What can I use it for? (Cracking this clam open? Destroying this stuff? Killing a house intruder? Euthanizing a dying dog?)

An application (a web application) maps a HTTP request to a HTTP response.

We use a Prolog atom to /refer/ to an /entity/ (something that is unique, has an identity, is identical only to itself, is not identical to any other entity).
Thus a Prolog atom is similar to an English /word/, and the Prolog knowledge base /gives meaning/ to that atom.

The formula =application__sql_table(A,T)= means that application A uses SQL table T.

The formula =application__page(A,P)= means the application A serves page P.
* Bibliography
bibliography:default
