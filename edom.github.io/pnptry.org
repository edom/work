#+TITLE: Trying to prove P neq. NP
#+DATE: 2018-04-28 22:30 +0700
#+PERMALINK: /pnptry.html
#+MATHJAX: yes
* Note
This is a proof /attempt/, not a proof.

Last update was 2018-04-28.
* Finding an search problem that forces a DTM to traverse the search space
Let \(
\newcommand\SetOutcome{\mathbb{F}}
\newcommand\SetBit{\mathbb{B}}
\newcommand\SetPred{\mathbb{P}}
\newcommand\FunSat{\text{sat}}
\newcommand\FunMinTime{\text{MinTime}}
\newcommand\FunLen{\text{Len}}
\mathbb{B}= { 0, 1 } \)
be the set of /bits/.

Let $\mathbb{B}^*$ be the /Kleene closure/ of $\mathbb{B}$.

Let \( \mathbb{F} = \{ \text{accept}, \text{reject} \} \) be the set of /final states/.

A /predicate/ is a function in $\mathbb{B}^* \to \mathbb{B}$.

Let $\mathbb{P}$ be the set of all /computable predicates/.

Let $p \in \mathbb{P}$ be a computable predicate.

Let $\text{Len}(x)$ be the /length/ of the string $x \in \mathbb{B}^*$.

Let the function $\text{sat}: \mathbb{P}\times \Nat \to \mathbb{F}$ be

\begin{equation*}
\text{sat}(p,n) =
\begin{cases}
    \text{accept} & \text{if \( \exists x \in \mathbb{B}^n : p(x) = 1 \);}
    \\
    \text{reject} & \text{otherwise.}
\end{cases}
\end{equation*}

Let $\text{MinTime}_M(p,x)$ be the /shortest time/ (the minimum number of steps)
required by machine $M$
to compute $p(x)$ (to compute the predicate $p$ with input $x$).

Let $N$ be an NTM (non-deterministic Turing machine).

Let $D$ be a DTM (deterministic Turing machine).

Such NTM $N$ can compute $\text{sat}(p,n)$ in $O(n + \max_{x \in \mathbb{B}^n} \text{MinTime}_N(p,x))$ steps.
This is such algorithm:

#+BEGIN_EXAMPLE
    function sat (p, n) {
        var x: array [1..n] of bit
        for i := 1 to n {
            x[i] := guess
        }
        if p(x) { accept }
        else { reject }
    }
#+END_EXAMPLE

Such DTM $D$ can compute $\text{sat}(p,n)$ in $O(\sum_{x \in \mathbb{B}^n} \text{MinTime}_D(p,x))$ steps.
This is such algorithm:

#+BEGIN_EXAMPLE
    function sat (p, n) {
        for x in B^n {
            if p(x) { accept }
        }
        reject
    }
#+END_EXAMPLE

*Conjecture:* There exists a computable predicate $p \in \mathbb{P}$ such that
1. $\text{MinTime}_D(p,x) = \text{MinTime}_N(p,x),$
1. $\text{MinTime}_D(p,x) \in O([\text{Len}(x)]^k)$ where $k > 1$,
1. $N$ optimally computes $\text{sat}(p,n)$ in $O(n^k)$ time, and
1. $D$ optimally computes $\text{sat}(p,n)$ in $O(2^n \cdot n^k)$ time.

If that conjecture is true, then $\TimeP \neq \TimeNP$.
** Equivalent question: Is there a problem whose optimal solution is exhaustive search?
- [[https://www.cs.cmu.edu/~ryanw/improved-algs-lbs2.pdf][2010 Ryan Williams "Improving Exhaustive Search Implies Superpolynomial Lower Bounds"]]:
  "The P vs NP problem arose from the question of whether exhaustive search is necessary for problems
  with short verifiable solutions."
* Questions
Can we apply pigeonhole principle to the computation graph?

What problems are equivalent to the P vs NP problem?
* Plan
   :PROPERTIES:
   :CUSTOM_ID: plan
   :END:

- Reading list

  - [[https://en.wikipedia.org/wiki/Natural_proof][WP: Natural proof]]
  - approaches:

    - Fagin, Immerman, ...: descriptive complexity theory
    - Mulmuley, Sohoni, ...: geometric complexity theory

      - [[https://arxiv.org/abs/0709.0746][2007 Mulmuley and Sohoni, "Geometric Complexity Theory: Introduction"]]
      - [[https://arxiv.org/abs/1305.7387][2013 Landsberg "Geometric Complexity Theory: an introduction for geometers"]]
      - [[https://arxiv.org/abs/1509.02503][2015 Landsberg "An introduction to geometric complexity theory"]]
      - [[https://www.cse.buffalo.edu//~regan/papers/pdf/Reg02MSFD.pdf][Kenneth W. Regan's "Understanding the Mulmuley-Sohoni Approach to P vs.Â NP"]]
      - [[https://people.mpi-inf.mpg.de/~cikenmey/teaching/summer18/firstintrotogct/index.html][Christian Ikenmeyer's 2018 course]]

  - [[http://michaelnielsen.org/polymath1/index.php?title=Deolalikar_P_vs_NP_paper][A clearing house for Deolalikar P vs NP paper]]

- Undigested

  - One-way function implies something about P vs NP?

* Meta-research
   :PROPERTIES:
   :CUSTOM_ID: meta-research
   :END:

- Where are progress tracked?

  - [[https://rjlipton.wordpress.com/2017/02/05/a-panel-on-p-vs-np/][2017 Richard J. Lipton and Kenneth W. Regan]]
  - [[http://www.win.tue.nl/~gwoegi/P-versus-NP.htm][2016 Gerhard J. Woeginger]]
  - [[http://blog.computationalcomplexity.org/2015/08/have-we-made-progress-on-p-vs-np.html][2015 Lance Fortnow and Bill Gasarch]]
  - [[https://www.reddit.com/r/math/comments/1krrkx/what_progress_has_been_made_on_the_p_vs_np/][2014 reddit]]
  - [[http://www.ncmis.cas.cn/kxcb/jclyzs/201204/W020120424627425387644.pdf][2009 Lance Fortnow "The status of the P versus NP problem"]]

- What is the P vs NP problem?

  - Official problem description: [[http://www.claymath.org/sites/default/files/pvsnp.pdf][The P versus NP problem, by Stephen Cook, for the Clay Millennium Prize Problems]]

* Another attempt?
   :PROPERTIES:
   :CUSTOM_ID: another-attempt
   :END:

- This is an older attempt.
- This should be merged to the attempt above.
- Let:

  - $f$ be a predicate
  - $k$ be a natural number
  - $Sat(f,k)$ be the problem of finding a string $x$ of length $k$ such that $f(x) = 1$

- Lemma: If $f \in \TimeP$ then $Sat(f,k) \in \TimeNP$.
  (This should be obvious and simple to prove?)
- Conjecture: There exists a predicate whose search cannot be faster than brute force.

  - Formally: There exists $f \in \TimeP$ such that $Sat(f,k) \not \in \TimeP$.

- That lemma and that conjecture, if proven true, would imply $\TimeP \subset \TimeNP$.
- We try to prove that conjecture by diagonalization/pigeonholing?
  The set \( {0,1}^k \to {0,1} \) has $2^{2^k}$ elements,
  because by combinatorics, in the truth table, there are $2^k$ rows, and each row has $2$ possibilities.
  There are $2^{2^k}$ possible $k$-letter-string predicates.
  Suppose that a deterministic machine can solve $Sat(f,k)$ for all $f$ in $O(poly(k))$ time.
  (Can we apply pigeonhole principle to the configuration graph?)
- Every predicate can be stated in disjunctive normal form.

* Other people's works that may be related
   :PROPERTIES:
   :CUSTOM_ID: other-peoples-works-that-may-be-related
   :END:

- 2017-11-22 news about NEXP and ACC https://news.mit.edu/2017/faculty-profile-ryan-williams-1122
- an explanation in English https://danielmiessler.com/study/pvsnp/
