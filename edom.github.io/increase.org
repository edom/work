#+TITLE: Increase software engineer productivity?
#+DATE: 2018-04-11 00:00 +0700
#+OPTIONS: ^:nil toc:nil
#+PERMALINK: /increase.html
* Understand productivity
** What is productivity?
Where does the word "productivity" come from?
- productivity[fn::https://en.wiktionary.org/wiki/productivity] ← productive + -ity[fn::https://en.wiktionary.org/wiki/-ity]
- productive[fn::https://en.wiktionary.org/wiki/productive] ← prōductīvus
- prōductīvus[fn::https://en.wiktionary.org/wiki/productivus] ← prōdūcō + -īvus[fn::https://en.wiktionary.org/wiki/-ivus]
- prōdūcō[fn::https://en.wiktionary.org/wiki/produco] ← prō-[fn::https://en.wiktionary.org/wiki/pro-] + dūcō[fn::https://en.wiktionary.org/wiki/duco]

In 2019, "to produce"[fn::https://en.wiktionary.org/wiki/produce][fn::https://www.etymonline.com/word/produce]
means "to make".

"Productive" means:
- /related/ to producing
- /tending/ (having a tendency) to produce[fn::https://en.wiktionary.org/wiki/-ive]

"Productivity" means:
- the /state/ of being productive[fn::https://en.wiktionary.org/wiki/-ity]
- a /measure/ of someone's ability to produce
  (this definition parallels the definition of
  conductivity[fn::<2019-05-07> "Measure of a material's ability to conduct an electric current"
  https://en.wikipedia.org/wiki/List_of_physical_quantities] in physics)
- http://www.thefreedictionary.com/words-that-end-in-ivity
- https://en.wikipedia.org/wiki/Sensitivity_and_specificity
- In economics, productivity is output per unit of labor.
  [fn::http://www.thefreedictionary.com/productivity]
- "Productivity describes various measures of the efficiency of production.
  A productivity measure is expressed as the /ratio of output to inputs/ used in a production process, i.e. output per unit of input."
  [fn::<2019-05-07> https://en.wikipedia.org/wiki/Productivity]
  (emphasis mine)

What are the inputs of software production process?
- man-hour
- machine-hour
- electricity
** What should be produced?
Goods.

What are goods?
Goods are what are good.

What is good?
It depends on which /moral system/ we subscribe to.
In pragmatism, what is good is what maximizes the sum of happiness of human kind.
** Why do we want productivity?
** Examples of false or unwanted productivity
Examples of false productivity that feels good but only wastes time:
- Checking off lots of unimportant things from a to-do list.
- Sorting files and folders that we rarely use.

Productivity is about long-term profit.
Forced labor is productive only in the very short term.

Examples of unwanted productivity:
- Manufacturing as much hardware as possible with unacceptable defect rate.
- Writing as much software as possible with unacceptable unmaintainability.
** Where does software operation and maintenance fit in the big picture of productivity?
Once created, software has to be operated.
Software operation has costs.
** Is productivity increase good or desirable?
** Is sustainability more important than productivity?
** How does technology improve productivity?
Technology enables a person to control more things.
With bare hands, a person can control 10 kg.
With power tools, a person can control 100 kg.

- https://en.wikipedia.org/wiki/Productivity_improving_technologies
* Measure productivity?
** Is it possible? Is it practical?
What does it mean to measure productivity?

It is impractical to trace all the causal chains.

It is easy to compare factory worker productivity between such workers because:
- The causal chain is very simple and short.
- The interaction between factory workers do not affect each worker's productivity.
- The environmental factors (machines, lighting, etc.) are constant and identical for all workers.

A knowledge worker's productivity is affected by peer interaction.

In order to measure a programmer's productivity, he must first be isolated from everyone else.
But is this isolation enough?

If both A and B are necessary causes of C,
then A or B alone is not sufficient to cause C.
Each of A and B is a causal factor (necessary but not sufficient).
The cause of C cannot be reduced to either A or B.
Both of them are necessary to cause C.
For example, in the fire triangle, all of fuel, oxygen, and heat are necessary to cause fire.
The cause of fire cannot be reduced to any strict sub-combination of those three factors.

Measuring producitivity requires understanding causality.

It is not as simple as blaming the proximate (the nearest) cause.
For example, suppose a smoker in a gas station causes an explosion.
The blame is /largely/, but not /entirely/ on the smoker,
because the smoker alone is not enough to cause the explosion:
the explosion requires gasoline vapor,
which is caused by the existence of the gas station,
which is caused by the demand for gas,
which is caused by other car owners,
and so on.
In the end, all of humanity shares a little blame, although negligible.
** When is line of code a valid measure?
Line of code (LOC) can be a valid measure if they are /normalized/ first,
like purchasing-power-parity adjustment in currency exchange rates.

One atomic statement per line.

LOC is valid for the same language with the same coding style.

1 LOC of C cannot be equated with 1 LOC of Java, in the same way we cannot equate 1 kilogram and 1 pound.
** Complexity points? Story points? Function points?
- What the hell are we trying to measure?
- What should we care about?
  We only care about /how long it takes to make/.
** What does a software engineer do?
- Find out what the user really wants.
- Formalize user requirements.
** How do we compare programmers/code?
- correctness of the system
- maintainability of the system
- efficiency of the system
- time taken to implement the system
** How do we measure developer productivity?
- 2004 article "Defining and measuring the productivity of programming languages" [[https://pdfs.semanticscholar.org/1852/9ff58460b6238f5095af073d8505d79d3264.pdf][pdf]]:
  - It defines these metrics:
    - "the time and effort required to write, debug, and tune the code"
    - "the performance of the code that results"
  - power-efficiency graph (human efficiency and machine efficiency)
  - what else?
- 2008 https://ifs.host.cs.st-andrews.ac.uk/Books/SE9/Web/Planning/productivity.html
  - https://ifs.host.cs.st-andrews.ac.uk/Books/SE9/
- 1992 article https://www.andrews.edu/~vyhmeisr/papers/progprod.html
- 2012 article http://www.drdobbs.com/jvm/the-comparative-productivity-of-programm/240005881
  - "A database comparing 6,000 projects shows that the choice of programming language has a significant impact on project schedule."
** What?
- 2015, PhD thesis, Bergersen, "Measuring Programming Skill: Construction and Validation of an Instrument for Evaluating Java Developers"
  - [[http://folk.uio.no/gunnab/publications/Bergersen2015_PhD_thesis.pdf][pdf]]
  - It's a collection of 4 articles.
  - https://www.duo.uio.no/handle/10852/48583
** Ideas?
* Some ideas?
** Personal development? Factors intrinsic to the people themselves?
*** Use Gallup StrengthsFinder (CliftonStrengths) to match people and roles?
<2019-05-05>
Ahmad Rizqi Meydiarso told me about Gallup StrengthsFinder.
**** <2019-05-05> What is CliftonStrengths?
- The subject pays $50.[fn::https://www.gallupstrengthscenter.com/store/en-us/]
- The subject makes 177 choices in the survey, which takes about an hour.[fn::https://www.gallupstrengthscenter.com/home/en-us/cliftonstrengths-how-it-works]
- The system creates a report that is an ordering of the 34 themes.[fn::https://www.gallupstrengthscenter.com/home/en-us/cliftonstrengths-themes-domains]
  There is a sample report.[fn::https://www.gallupstrengthscenter.com/home/en-us/get-file?fileName=All34Report_DonClifton.pdf&language=en-us]
**** Is it too complex?
Can the 34 themes and 177 choices be reduced further?
This may be an interesting research topic for people in human resource departments and people in psychology majors.
However, "One major concern about considering people as assets or resources is that they will be commoditized, objectified and abused."
 [fn::<2019-05-07> https://en.wikipedia.org/wiki/Human_resources]

Example simplification:
Which would you rather do:
- think or do?
- plan or execute?
- create or operate?
- create or maintain?
- etc.

But we should not ask people about their future, because nobody knows what they will be in the future.
We should ask people about their past,
and extrapolate their past into the future.
*** Teach new skills?
*** Coach?
*** Physical exercise?
Physical exercise increases blood flow to the brain.
** Higher-level programming language?
more powerful hardware -> higher-level software abstraction -> higher engineer productivity

There is a limit to productivity, because software has irreducible essential complexity.
But there is still some room to reduce the accidental complexity.
** Ergonomic equipments?
Desk, chair, keyboard, screen, etc.?

Comfortable temperature, etc.?

** Distraction room?
A distraction room is where blocked engineers gather and distract each other.
I explain "blocked" below.

When is distraction desirable?

Distraction is desirable when the distracted person encounters a mental block,
and undesirable when the person is in the flow.

A working software engineer can be thought to be in one of two states:
- In the flow: Turning an idea in the mind into reality
- Blocked: Confused, trying to come up with an idea in the mind

When he is in the flow, he should not be distracted.

When he is blocked, he should be distracted.
Sleeping also helps.

A programmer's block is the same as a writer's block:
They don't know what to do next.
In this state, random stimulation and context switching may be good.
** Remote work? Less commute?
For seniors?

<2019-05-05>
Sofian Hadiwijaya of Warung Pintar[fn::https://warungpintar.co.id/]
told me that remote working is not suitable for junior employees who need lots of guidance.

Remote work does not mean absence of interaction.

The remote employee must have a good microphone, a good headphone, a good Internet connection, and a rather quiet space.
