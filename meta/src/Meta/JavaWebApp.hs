module Meta.JavaWebApp where

import Prelude ()
import Meta.Prelude

import qualified Meta.Data as D
import qualified Meta.DataQuery as DQ
import qualified Meta.Html as H
import qualified Meta.Java as J
import qualified Meta.JavaServlet as JS
import qualified Meta.JavaType as JT
import qualified Meta.Maven as M
import qualified Meta.Web as W

type Group_id = M.Group_id

type Artifact_id = M.Artifact_id

type Version = M.Version

type Dep_ver = M.Dep_ver

type Package_name = String

type Output_prefix = FilePath

set_output_prefix :: Output_prefix -> App -> App
set_output_prefix path app = app { _output_prefix = path }

set_package :: String -> App -> App
set_package pkg app = app { _package = pkg }

set_servlet_class_name :: String -> App -> App
set_servlet_class_name nam app = app { _servlet_class_name = nam }

data App
    = MkApp {
        _project :: M.Project
        , aTables :: [D.Table]
        , aPkg :: Package_name
        , _site :: W.Site
        , _output_prefix :: FilePath
        , _package :: String
        , _servlet_class_name :: String
        , _dto_class_name_prefix :: String
        , _injections :: [Injection]
    } deriving (Read, Show)

get_artifact_id :: App -> M.Maven_artifact_id
get_artifact_id = M.pArtifactId . _project

add_pages :: [W.Page] -> App -> App
add_pages pages app = app { _site = W.add_pages pages (_site app) }

type Jdbc_url = String

type Inject_name = String

type Field_name = String

data Injection
    = MkInjection {
        _itype :: J.Type
        , _iname :: Maybe Inject_name
        , _ifield :: Field_name
    } deriving (Read, Show)

type Java_type = J.Type

injection :: Java_type -> Field_name -> Injection
injection typ fld = MkInjection {
        _itype = typ
        , _iname = Nothing
        , _ifield = fld
    }

{- |
Every injection adds these to the servlet class:

* a private final field

* a constructor parameter

* an assignment statement in the constructor
-}
add_injections :: [Injection] -> App -> App
add_injections injs app = app { _injections = _injections app ++ injs }

-- | For javax.inject.Named annotation.
named :: Inject_name -> Injection -> Injection
named nam inj = inj { _iname = Just nam }

-- | This is 'named'.
set_inject_name :: Inject_name -> Injection -> Injection
set_inject_name = named

empty :: App
empty = MkApp {
        _project = M.empty
        , aTables = []
        , aPkg = ""
        , _site = W.empty
        , _output_prefix = "out/"
        , _package = ""
        , _servlet_class_name = "Servlet"
        , _dto_class_name_prefix = "Row_"
        , _injections = []
    }

app_empty :: App
app_empty = empty

set_tables :: [D.Table] -> App -> App
set_tables ts a = a { aTables = ts }

set_project :: M.Project -> App -> App
set_project p a = a { _project = p }

set_gav :: Group_id -> Artifact_id -> Version -> App -> App
set_gav g a v app = set_project (M.set_gav g a v $ _project app) app

-- | This is 'set_gav'.
set_maven_coordinates :: M.Maven_group_id -> M.Maven_artifact_id -> M.Maven_version -> App -> App
set_maven_coordinates = set_gav

type Dep = M.Dep

get_deps :: App -> [Dep]
get_deps = M.pDeps . _project

set_deps :: [Dep] -> App -> App
set_deps deps app = set_project (M.set_deps deps $ _project app) app

get_dependencies :: App -> [M.Maven_dep]
get_dependencies = get_deps

set_dependencies :: [M.Maven_dep] -> App -> App
set_dependencies = set_deps

add_dependencies :: [Dep] -> App -> App
add_dependencies deps app = set_dependencies (get_dependencies app ++ deps) app

-- * Pages

type Page_url = W.Url

type Page_content = W.Content

add_page :: Page_url -> Page_content -> App -> App
add_page url con app = app { _site = W.add_page url con (_site app) }

-- * Transform to Java

{- |
See also:

* https://stackoverflow.com/questions/1159168/should-one-call-close-on-httpservletresponse-getoutputstream-getwriter
-}
get_java_servlet_class :: App -> J.Class
get_java_servlet_class app =
    J.extend name JS.c_HttpServlet
    |> J.c_add_line_comment " Generated by Meta.JavaWebApp.get_java_servlet_class"
    |> J.c_add fields
    |> J.c_add ctor
    |> J.c_add m_service
    |> J.c_add J.a_Singleton
    where
        fields = map inj_field injections
        params = map inj_param injections
        ctor = (J.ctor |> J.m_add J.a_Inject |> J.m_add params) {
                J.mAccess = J.Public
                , J.mBody = flip map injections $ \ inj ->
                    let
                        fld_name = _ifield inj
                    in
                        J.s_assign (J.e_field J.e_this fld_name) (J.e_name fld_name)
            }
        inj_field inj = (J.mkField (_itype inj) (_ifield inj)) { J.fAccess = J.Private, J.fFinal = True }
        inj_param inj =
            J.mkParam (_itype inj) (_ifield inj)
            |> maybe id (\ iname -> J.param_add_ants [J.a_Named iname]) (_iname inj)
        injections = _injections app
        name = _servlet_class_name app
        site = _site app
        m_service =
            J.MMethod (J.override JS.m_service) {
                J.mBody =
                    [
                        J.sDef JT.string "pathInfo" (J.eCall eRequest "getPathInfo" [])
                        , J.sDef JT.string "method" (J.eCall eRequest "getMethod" [])
                        , J.sIf (J.eIsNull ePathInfo) [
                            J.sAsgn ePathInfo (J.eStr "/")
                        ]
                    ]
                    ++ map page_handler pages
                    ++ [
                        sSetStatus "SC_NOT_FOUND"
                    ]
            }
        page_handler page =
            J.sIf (J.eEquals ePathInfo (J.eStr url)) $
                [
                    J.sIf (J.eEquals eMethod (J.eStr method)) $ [
                        sSetStatus "SC_OK"
                        , J.sCall eResponse "setContentType" [J.eStr content_type]
                        , J.sDef JT.printWriter "output" (J.eCall eResponse "getWriter" [])
                    ]
                    ++ content_to_java_sta e_output content
                    ++ [J.sRetVoid]
                ]
            where
                url = W.pUrl page
                content = W.pContent page
                content_type = W.pContentType page
                method = W.pMethod page
        pages = W.sPages site
        e_output = J.eName "output"
        eRequest = J.eName "request"
        eResponse = J.eName "response"
        ePathInfo = J.eName "pathInfo"
        eMethod = J.eName "method"
        sSetStatus code =
            J.sCall eResponse "setStatus" [J.eFieldStatic JS.c_HttpServletResponse code]

content_to_java_sta
    :: J.Exp -- ^ PrintWriter output
    -> W.Content
    -> [J.Sta]

content_to_java_sta e_output con = case con of
    W.CEmpty -> []
    W.CRaw s -> [append_str s]
    W.CText s -> [append_str $ escape_html s]
    W.CSeq a b -> recur a ++ recur b
    W.CLink url cap ->
        [append_str $ "<a href=\"" ++ escape_html url ++ "\">"]
        ++ recur cap
        ++ [append_str "</a>"]
    W.CJavaRes path ->
        let
            e_this_class = J.e_call J.e_this "getClass" []
        in
        [append (J.e_call_static runtime_class_qname "get_resource_as_string" [e_this_class, J.e_str path, J.e_int max_resource_size])]
    W.CHtml html ->
        [append_str "<!DOCTYPE html><html><head>"]
        ++ map
            (\ s -> append_str $ "<link rel=\"stylesheet\" type=\"text/css\" href=\""
                ++ escape_html s ++ "\">"
            )
            (W._h_styles html)
        ++ [append_str "</head><body>"]
        ++ recur (W._h_body html)
        ++ [append_str "</body></html>"]
    W.Chtmla html ->
        recur (H.fold W.content_empty W.content_append W.CRaw html)
    W.CView query@(DQ.From table) ->
        let
            ds_field_name = D.t_DataSource_field_name table
            err_msg = "Meta.JavaWebApp.content_to_java_sta: table DataSource field name not set: " ++ show table
            e_ds = J.e_field J.e_this $ maybe (error err_msg) id ds_field_name
            e_cn = J.e_name "connection"
            e_st = J.e_name "statement"
            e_rs = J.e_name "result_set"
            e_i = J.e_name "i"
            sql = DQ.renderSqlSelect query
            cols = D.t_get_cols table
            column_count = length cols
            header =
                [
                    append_str $
                        "<tr>"
                        ++
                        flip concatMap cols (\ col ->
                            "<th>" ++ maybe "" escape_html (D.c_short_title col) ++ "</th>"
                        )
                        ++
                        "</tr>"
                ]
            body =
                [
                    J.s_while (J.e_call e_rs "next" []) [
                        append_str "<tr>"
                        -- JDBC column index starts from 1.
                        , J.s_for (J.s_def J.t_int "i" (J.e_int32i 1)) (e_i `J.e_lteq` J.e_int32 column_count) (J.e_preincrement e_i) [
                            append_str "<td>"
                            -- FIXME escape
                            , append (J.e_toString $ J.e_call e_rs "getObject" [e_i])
                            , append_str "</td>"
                        ]
                        , append_str "</tr>"
                    ]
                ]
        in
        [
            J.s_block $
            [append_str "<table>"]
            ++ header
            ++
            [
                J.s_with
                    [
                        J.s_def (J.t_ref "java.sql.Connection") "connection" (J.e_call e_ds "getConnection" [])
                        , J.s_def (J.t_ref "java.sql.Statement") "statement" (J.e_call e_cn "createStatement" [])
                        , J.s_def (J.t_ref "java.sql.ResultSet") "result_set" (J.e_call e_st "executeQuery" [J.e_str sql])
                    ]
                    body
                    |> J.catch J.t_SqlException "e" [
                        J.s_throw $ J.e_new J.t_ServletException [J.e_name "e"]
                    ]
            ]
            ++ [append_str "</table>"]
        ]
    _ -> error $ "Meta.JavaWebApp.content_to_java_sta: not implemented: " ++ show con
    where
        runtime_class_qname = "com.spacetimecat.meta.rt.java.Meta_runtime"
        max_resource_size = 1048576
        recur = content_to_java_sta e_output
        append_str = append . J.e_str
        append e_str = J.sCall e_output "append" [e_str]
        escape_html s = concatMap esc s
            where
                esc c = case c of
                    '"' -> "&quot;"
                    '<' -> "&lt;"
                    '>' -> "&gt;"
                    '&' -> "&amp;"
                    _ -> [c]

jt_DataSource :: Java_type
jt_DataSource = JT.dataSource
