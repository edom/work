{-|

* Pretty URL pattern matching isn't supported.
Set up a reverse proxy to rewrite the URL.

-}
module Meta.Web where

import qualified Meta.Java as J
import qualified Meta.JavaServlet as JS
import qualified Meta.JavaSta as S
import qualified Meta.JavaType as JT

type Url = String

data Site
    = MkSite {
        sPages :: [Page]
    }
    deriving (Show, Read)

data Page
    = MkPage {
        pUrl :: Url -- ^ static, no pattern matching
        , pContent :: Content
    }
    deriving (Show, Read)

data Content
    = CEmpty
    | CRaw String -- ^ pass-through unmodified
    | CText String -- ^ escaped
    | CSeq Content Content -- ^ sequence/concatenation/juxtaposition
    | CLink Url Content -- ^ CLink url caption: hyperlink
    | CGetParam String -- ^ value of a GET parameter
    | CPostParam String -- ^ value of a POST parameter
    deriving (Show, Read)

-- | Internal. Do not use.
cToHtml :: Content -> String
cToHtml con = case con of
    CEmpty -> ""
    CRaw s -> s
    CText s -> escape s
    CSeq a b -> cToHtml a ++ cToHtml b
    CLink url cap -> "<a href=\"" ++ escape url ++ "\">" ++ cToHtml cap ++ "</a>"
    _ -> error $ "Meta.Web.cToHtml: not implemented: " ++ show con
    where
        escape s = concatMap esc s
        esc c = case c of
            '"' -> "&quot;"
            '<' -> "&lt;"
            '>' -> "&gt;"
            '&' -> "&amp;"
            _ -> [c]

-- * Transform to Java

{- |
https://stackoverflow.com/questions/1159168/should-one-call-close-on-httpservletresponse-getoutputstream-getwriter
-}
toJavaHttpServletClass :: String -> Site -> J.Class
toJavaHttpServletClass name site =
    (J.extend name JS.c_HttpServlet) {
        J.cMembers = [
            J.MLineComment " Generated by Meta.Web.toJavaHttpServletClass"
            , J.MMethod (J.override JS.m_service) {
                J.mBody =
                    [
                        S.sDef JT.string "pathInfo" (S.eCall eRequest "getPathInfo" [])
                        , S.sIf (S.eIsNull ePathInfo) [
                            S.sAsgn ePathInfo (S.eStr "/")
                        ]
                    ]
                    ++ map pageHandler pages
                    ++ [
                        sSetStatus "SC_NOT_FOUND"
                    ]
            }
        ]
    }
    where
        pageHandler page =
            S.sIf (S.eEquals ePathInfo (S.eStr url)) [
                    sSetStatus "SC_OK"
                    , S.sCall eResponse "setContentType" [S.eStr "text/html; charset=UTF-8"]
                    , S.sDef JT.printWriter "output" (S.eCall eResponse "getWriter" [])
                    , S.sCall eOutput "append" [S.eStr $ cToHtml content]
                    , S.sRetVoid
                ]
            where
                url = pUrl page
                content = pContent page
        pages = sPages site
        eOutput = S.eName "output"
        eRequest = S.eName "request"
        eResponse = S.eName "response"
        ePathInfo = S.eName "pathInfo"
        sSetStatus code =
            S.sCall eResponse "setStatus" [J.eFieldStatic JS.c_HttpServletResponse code]
